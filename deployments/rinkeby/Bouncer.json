{
  "address": "0x5F2D3d298e71d2A2d62d18F5BdefEb77781Fc305",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dispatcherFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_votingPower",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_globalMaxContributionPct",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_dispatcherMaxContributionPct",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_requiredVotingPower",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_bouncerAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_roleAdmin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dispatcher",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BankrollProvided",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dispatcher",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BankrollRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dispatcher",
          "type": "address"
        }
      ],
      "name": "BankrollTokenCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "DispatcherFactoryChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "oldPct",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newPct",
          "type": "uint32"
        }
      ],
      "name": "DispatcherMaxChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "oldPct",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newPct",
          "type": "uint32"
        }
      ],
      "name": "GlobalMaxChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldVotingPower",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newVotingPower",
          "type": "uint256"
        }
      ],
      "name": "RequiredVotingPowerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "VotingPowerChanged",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "BOUNCER_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dispatcher",
          "type": "address"
        }
      ],
      "name": "amountAvailableToBankroll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "amountAvailableToDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "amountDeposited",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDispatcher",
          "name": "dispatcher",
          "type": "address"
        }
      ],
      "name": "bankrollAvailable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dispatcher",
          "type": "address"
        }
      ],
      "name": "bankrollBalances",
      "outputs": [
        {
          "internalType": "uint256[7]",
          "name": "balances",
          "type": "uint256[7]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDispatcher",
          "name": "dispatcher",
          "type": "address"
        }
      ],
      "name": "bankrollProvided",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDispatcher",
          "name": "dispatcher",
          "type": "address"
        }
      ],
      "name": "bankrollRequested",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bankrollTokens",
      "outputs": [
        {
          "internalType": "contract BankrollToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dispatcherFactory",
      "outputs": [
        {
          "internalType": "contract IDispatcherFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dispatcherMaxContributionPct",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dispatchersWithBankrollAvailable",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "dispatchers",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalMaxContributionPct",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dispatcher",
          "type": "address"
        }
      ],
      "name": "join",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDispatcher",
          "name": "dispatcher",
          "type": "address"
        }
      ],
      "name": "maxBankrollPerAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDepositPerAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract BankrollToken",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newBouncer",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dispatcher",
          "type": "address"
        }
      ],
      "name": "provideETHBankroll",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dispatcher",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "removeETHBankroll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredVotingPower",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factoryAddress",
          "type": "address"
        }
      ],
      "name": "setDispatcherFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "newPct",
          "type": "uint32"
        }
      ],
      "name": "setDispatcherMaxContributionPct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "newPct",
          "type": "uint32"
        }
      ],
      "name": "setGlobalMaxContributionPct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newVotingPower",
          "type": "uint256"
        }
      ],
      "name": "setRequiredVotingPower",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "votingPowerAddress",
          "type": "address"
        }
      ],
      "name": "setVotingPower",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAmountDeposited",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBankrollAvailable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBankrollRequested",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "votingPower",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingPowerContract",
      "outputs": [
        {
          "internalType": "contract IVotingPower",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x921707a122f5b8c8dc7d723cdd145984321819b8fed11f96db84a05cd4eac76e",
  "receipt": {
    "to": null,
    "from": "0x4F8f512Dab59F227EA70B1D8A0044aFa95CC80C3",
    "contractAddress": "0x5F2D3d298e71d2A2d62d18F5BdefEb77781Fc305",
    "transactionIndex": 10,
    "gasUsed": "3815228",
    "logsBloom": "0x
    "blockHash": "0x178cafd2eb79c86729b12954b3d41f4d08e7d48a068385200247930346b6f4cb",
    "transactionHash": "0x921707a122f5b8c8dc7d723cdd145984321819b8fed11f96db84a05cd4eac76e",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 8209087,
        "transactionHash": "0x921707a122f5b8c8dc7d723cdd145984321819b8fed11f96db84a05cd4eac76e",
        "address": "0x5F2D3d298e71d2A2d62d18F5BdefEb77781Fc305",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0f38c9a95b3e46f81ca9bc843f8e4f96937802cabd5509bc53c899dec1fa769b",
          "0x0000000000000000000000005b0ac3279dbf84bb8da59be1ecab118198f022e5",
          "0x0000000000000000000000004f8f512dab59f227ea70b1d8a0044afa95cc80c3"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x178cafd2eb79c86729b12954b3d41f4d08e7d48a068385200247930346b6f4cb"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 8209087,
        "transactionHash": "0x921707a122f5b8c8dc7d723cdd145984321819b8fed11f96db84a05cd4eac76e",
        "address": "0x5F2D3d298e71d2A2d62d18F5BdefEb77781Fc305",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000864ad15351c4a50e12f767b1a7d993ae47493e55",
          "0x0000000000000000000000004f8f512dab59f227ea70b1d8a0044afa95cc80c3"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x178cafd2eb79c86729b12954b3d41f4d08e7d48a068385200247930346b6f4cb"
      }
    ],
    "blockNumber": 8209087,
    "cumulativeGasUsed": "7198130",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF055f787562216881e6e04207769F43E220e5546",
    "0x6EE7Ed1e03948954D548745F56c60072683d1257",
    "300000",
    "600000",
    "10000000000000000000000",
    "0x5b0aC3279dBf84Bb8DA59Be1EcaB118198f022E5",
    "0x864AD15351C4a50E12F767B1a7D993aE47493E55"
  ],
  "solcInputHash": "2b5203147f02041ac6fdaf09aea8a6b2",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dispatcherFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_votingPower\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_globalMaxContributionPct\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_dispatcherMaxContributionPct\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_requiredVotingPower\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_bouncerAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_roleAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dispatcher\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BankrollProvided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dispatcher\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BankrollRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dispatcher\",\"type\":\"address\"}],\"name\":\"BankrollTokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"DispatcherFactoryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"oldPct\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newPct\",\"type\":\"uint32\"}],\"name\":\"DispatcherMaxChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"oldPct\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newPct\",\"type\":\"uint32\"}],\"name\":\"GlobalMaxChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldVotingPower\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotingPower\",\"type\":\"uint256\"}],\"name\":\"RequiredVotingPowerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"VotingPowerChanged\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"BOUNCER_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dispatcher\",\"type\":\"address\"}],\"name\":\"amountAvailableToBankroll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"amountAvailableToDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDispatcher\",\"name\":\"dispatcher\",\"type\":\"address\"}],\"name\":\"bankrollAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dispatcher\",\"type\":\"address\"}],\"name\":\"bankrollBalances\",\"outputs\":[{\"internalType\":\"uint256[7]\",\"name\":\"balances\",\"type\":\"uint256[7]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDispatcher\",\"name\":\"dispatcher\",\"type\":\"address\"}],\"name\":\"bankrollProvided\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDispatcher\",\"name\":\"dispatcher\",\"type\":\"address\"}],\"name\":\"bankrollRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bankrollTokens\",\"outputs\":[{\"internalType\":\"contract BankrollToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dispatcherFactory\",\"outputs\":[{\"internalType\":\"contract IDispatcherFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dispatcherMaxContributionPct\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dispatchersWithBankrollAvailable\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"dispatchers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalMaxContributionPct\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dispatcher\",\"type\":\"address\"}],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDispatcher\",\"name\":\"dispatcher\",\"type\":\"address\"}],\"name\":\"maxBankrollPerAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDepositPerAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract BankrollToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newBouncer\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dispatcher\",\"type\":\"address\"}],\"name\":\"provideETHBankroll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dispatcher\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeETHBankroll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredVotingPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"}],\"name\":\"setDispatcherFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newPct\",\"type\":\"uint32\"}],\"name\":\"setDispatcherMaxContributionPct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newPct\",\"type\":\"uint32\"}],\"name\":\"setGlobalMaxContributionPct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVotingPower\",\"type\":\"uint256\"}],\"name\":\"setRequiredVotingPower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"votingPowerAddress\",\"type\":\"address\"}],\"name\":\"setVotingPower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmountDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBankrollAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBankrollRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"votingPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingPowerContract\",\"outputs\":[{\"internalType\":\"contract IVotingPower\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Used as an interface to provide bankroll to Dispatchers on the Archer network\",\"kind\":\"dev\",\"methods\":{\"amountAvailableToBankroll(address,address)\":{\"returns\":{\"amount\":\"Bankroll available to account for given Dispatcher\"}},\"amountAvailableToDeposit(address)\":{\"returns\":{\"amount\":\"Bankroll available to account\"}},\"bankrollAvailable(address)\":{\"returns\":{\"amount\":\"Bankroll available for Dispatcher\"}},\"bankrollBalances(address,address)\":{\"returns\":{\"balances\":\" 1) dispatcher bankroll available  2) min voting power  3) user voting power  4) network deposit max  5) account amount deposited  6) max bankroll per account for dispatcher  7) bankroll already provided by user to this dispatcher\"}},\"bankrollProvided(address)\":{\"returns\":{\"amount\":\"Bankroll provided to Dispatcher\"}},\"bankrollRequested(address)\":{\"returns\":{\"amount\":\"Bankroll requested by Dispatcher\"}},\"constructor\":{\"params\":{\"_bouncerAdmin\":\"Admin of Bouncer contract\",\"_dispatcherFactory\":\"Dispatcher Factory address\",\"_dispatcherMaxContributionPct\":\"Per Dispatcher cap on % of bankroll any one account can provide\",\"_globalMaxContributionPct\":\"Global cap on % of bankroll any one account can provide\",\"_requiredVotingPower\":\"Amount of voting power required for account to provide bankroll\",\"_roleAdmin\":\"Admin of Bouncer admin role\",\"_votingPower\":\"VotingPower address\"}},\"dispatchersWithBankrollAvailable()\":{\"returns\":{\"dispatchers\":\"Array of dispatchers that have bankroll requests available\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"join(address)\":{\"params\":{\"dispatcher\":\"Dispatcher address\"}},\"maxBankrollPerAccount(address)\":{\"returns\":{\"amount\":\"Max bankroll per account\"}},\"maxDepositPerAccount()\":{\"returns\":{\"amount\":\"Max deposit amount\"}},\"migrate(address,address)\":{\"params\":{\"newBouncer\":\"Bouncer address\",\"token\":\"the token\"}},\"provideETHBankroll(address)\":{\"params\":{\"dispatcher\":\"Dispatcher address\"}},\"removeETHBankroll(address,uint256)\":{\"params\":{\"amount\":\"Amount of bankroll to remove\",\"dispatcher\":\"Dispatcher address\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setDispatcherFactory(address)\":{\"details\":\"Only Bouncer admin can call\",\"params\":{\"factoryAddress\":\"Dispatcher Factory address\"}},\"setDispatcherMaxContributionPct(uint32)\":{\"details\":\"Only Bouncer admin can call\",\"params\":{\"newPct\":\"new per Dispatcher cap %\"}},\"setGlobalMaxContributionPct(uint32)\":{\"details\":\"Only Bouncer admin can call\",\"params\":{\"newPct\":\"new global cap %\"}},\"setRequiredVotingPower(uint256)\":{\"details\":\"Only Bouncer admin can call\",\"params\":{\"newVotingPower\":\"minimum voting power\"}},\"setVotingPower(address)\":{\"details\":\"Only Bouncer admin can call\",\"params\":{\"votingPowerAddress\":\"VotingPower address\"}},\"totalBankrollAvailable()\":{\"returns\":{\"amount\":\"Total bankroll available for deposit\"}},\"totalBankrollRequested()\":{\"returns\":{\"amount\":\"Total bankroll requested\"}},\"votingPower(address)\":{\"params\":{\"account\":\"Address of account\"},\"returns\":{\"amount\":\"Amount of voting power\"}}},\"title\":\"Bouncer\",\"version\":1},\"userdoc\":{\"events\":{\"BankrollProvided(address,address,address,address,uint256)\":{\"notice\":\"Event emitted when bankroll is provided to a dispatcher\"},\"BankrollRemoved(address,address,address,address,uint256)\":{\"notice\":\"Event emitted when bankroll is removed from a dispatcher\"},\"BankrollTokenCreated(address,address,address)\":{\"notice\":\"Event emitted when a new Dispatcher/asset is added to the bankroll program\"},\"DispatcherFactoryChanged(address,address)\":{\"notice\":\"Event emitted when Dispatcher Factory contract address is changed\"},\"DispatcherMaxChanged(uint32,uint32)\":{\"notice\":\"Event emitted when per dispatcher cap is changed\"},\"GlobalMaxChanged(uint32,uint32)\":{\"notice\":\"Event emitted when global cap is changed\"},\"RequiredVotingPowerChanged(uint256,uint256)\":{\"notice\":\"Event emitted when required voting power to bankroll network is changed\"},\"VotingPowerChanged(address,address)\":{\"notice\":\"Event emitted when Voting Power contract address is changed\"}},\"kind\":\"user\",\"methods\":{\"BOUNCER_ADMIN_ROLE()\":{\"notice\":\"Admin role to manage Bouncer\"},\"amountAvailableToBankroll(address,address)\":{\"notice\":\"Amount of remaining bankroll account can provide to given Dispatcher\"},\"amountAvailableToDeposit(address)\":{\"notice\":\"Total amount of remaining bankroll account can provide to network\"},\"amountDeposited(address)\":{\"notice\":\"Mapping of Dispatcher address > bankroll provided\"},\"bankrollAvailable(address)\":{\"notice\":\"Amount of bankroll available to provide to given Dispatcher\"},\"bankrollBalances(address,address)\":{\"notice\":\"Gets all balances relevant to determining whether a given user can bankroll a dispatcher\"},\"bankrollProvided(address)\":{\"notice\":\"Amount of bankroll provided to given Dispatcher\"},\"bankrollRequested(address)\":{\"notice\":\"Total amount of bankroll requested by the given Dispatcher\"},\"bankrollTokens(address,address)\":{\"notice\":\"Mapping of bankroll Dispatcher > asset > bankroll token\"},\"constructor\":{\"notice\":\"Construct a new Bouncer contract\"},\"dispatcherFactory()\":{\"notice\":\"Dispatcher Factory\"},\"dispatcherMaxContributionPct()\":{\"notice\":\"Per Dispatcher cap on % of bankroll any one entity can provide (measured in bips: 10,000 bips = 1% of bankroll requested by the Dispatcher)\"},\"dispatchersWithBankrollAvailable()\":{\"notice\":\"All of the Dispatchers on the network that have bankroll available that has not yet been provided\"},\"globalMaxContributionPct()\":{\"notice\":\"Global cap on % of network bankroll any one entity can provide (measured in bips: 10,000 bips = 1% of bankroll requested by the network)\"},\"join(address)\":{\"notice\":\"Function to allow a dispatcher to join the bankroll program\"},\"maxBankrollPerAccount(address)\":{\"notice\":\"Max amount of bankroll any one account can provide to given Dispatcher\"},\"maxDepositPerAccount()\":{\"notice\":\"Maximum amount of bankroll any one account can provide to the network as a whole\"},\"migrate(address,address)\":{\"notice\":\"Admin function to migrate token to new Bouncer\"},\"provideETHBankroll(address)\":{\"notice\":\"Provide ETH bankroll to Dispatcher\"},\"removeETHBankroll(address,uint256)\":{\"notice\":\"Remove ETH bankroll from Dispatcher\"},\"requiredVotingPower()\":{\"notice\":\"Amount of voting power required to bankroll on the network\"},\"setDispatcherFactory(address)\":{\"notice\":\"Set Dispatcher Factory address\"},\"setDispatcherMaxContributionPct(uint32)\":{\"notice\":\"Set per Dispatcher max % of bankroll any one account can provide\"},\"setGlobalMaxContributionPct(uint32)\":{\"notice\":\"Set global max % of network bankroll any one account can provide\"},\"setRequiredVotingPower(uint256)\":{\"notice\":\"Set voting power required by users to provide bankroll\"},\"setVotingPower(address)\":{\"notice\":\"Set VotingPower address\"},\"totalAmountDeposited()\":{\"notice\":\"Total amount of bankroll provided to the network via this contract\"},\"totalBankrollAvailable()\":{\"notice\":\"Total amount of bankroll requested by all of the Dispatchers on the network that has not yet been provided\"},\"totalBankrollRequested()\":{\"notice\":\"Total amount of bankroll requested by all of the Dispatchers on the network\"},\"votingPower(address)\":{\"notice\":\"Amount of voting power a given account has currently\"},\"votingPowerContract()\":{\"notice\":\"Voting Power Contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bouncer.sol\":\"Bouncer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/BankrollToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport './lib/SafeMath.sol';\\n\\n/**\\n * @title BankrollToken\\n * @dev Token representing share of bankroll for Archer DAO\\n * ERC-20 with add-ons to allow for offchain signing\\n * See EIP-712, EIP-2612, and EIP-3009 for details\\n */\\ncontract BankrollToken {\\n    using SafeMath for uint256;\\n\\n    /// @notice EIP-20 token name for this token\\n    string public constant name = \\\"Archer Bankroll Token\\\";\\n\\n    /// @notice EIP-20 token symbol for this token\\n    string public constant symbol = \\\"ARCH-B\\\";\\n\\n    /// @notice EIP-20 token decimals for this token\\n    uint8 public constant decimals = 18;\\n\\n    /// @notice Total number of tokens in circulation\\n    uint256 public totalSupply;\\n\\n    /// @notice Underlying asset being bankrolled\\n    address public asset;\\n\\n    /// @notice Recipient of bankroll\\n    address public recipient;\\n\\n    /// @notice Address which may mint/burn tokens\\n    address public supplyManager;\\n\\n    /// @notice Official record of token balances for each account\\n    mapping(address => uint256) public balanceOf;\\n\\n    /// @notice Allowance amounts on behalf of others\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /// @notice The version number for this token\\n    uint8 public constant version = 1;\\n\\n    /// @notice The EIP-712 version hash\\n    /// keccak256(\\\"1\\\");\\n    bytes32 public constant VERSION_HASH = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\\n\\n    // @notice The EIP-712 typehash for the contract's domain\\n    /// keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n    bytes32 public constant DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    /// @notice The EIP-712 typehash for permit (EIP-2612)\\n    /// keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping (address => uint256) public nonces;\\n\\n    /// @notice An event that's emitted when the supplyManager address is changed\\n    event SupplyManagerChanged(address indexed oldManager, address indexed newManager);\\n\\n    /// @notice The standard EIP-20 transfer event\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice The standard EIP-20 approval event\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    modifier onlySupplyManager {\\n        require(msg.sender == supplyManager, \\\"only supply manager\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Construct a new Arch bankroll token\\n     * @param _asset Bankroll asset\\n     * @param _recipient Address receiving the bankroll\\n     * @param _supplyManager The address with minting/burning ability\\n     */\\n    constructor(\\n        address _asset,\\n        address _recipient,\\n        address _supplyManager\\n    ) {\\n        asset = _asset;\\n        recipient = _recipient;\\n        supplyManager = _supplyManager;\\n        emit SupplyManagerChanged(address(0), _supplyManager);\\n    }\\n\\n    /**\\n     * @notice Change the supplyManager address\\n     * @param newSupplyManager The address of the new supply manager\\n     * @return true if successful\\n     */\\n    function setSupplyManager(address newSupplyManager) external onlySupplyManager returns (bool) {\\n        emit SupplyManagerChanged(supplyManager, newSupplyManager);\\n        supplyManager = newSupplyManager;\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Mint new tokens\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to be minted\\n     * @return Boolean indicating success of mint\\n     */\\n    function mint(address dst, uint256 amount) external onlySupplyManager returns (bool) {\\n        require(dst != address(0), \\\"ABT::mint: cannot transfer to the zero address\\\");\\n\\n        // mint the amount\\n        _mint(dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Burn tokens\\n     * @param src The account that will burn tokens\\n     * @param amount The number of tokens to be burned\\n     * @return Boolean indicating success of burn\\n     */\\n    function burn(address src, uint256 amount) external onlySupplyManager returns (bool) {\\n        require(src != address(0), \\\"ABT::burn: cannot transfer from the zero address\\\");\\n        \\n        // burn the amount\\n        _burn(src, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     * and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * It is recommended to use increaseAllowance and decreaseAllowance instead\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Increase the allowance by a given amount\\n     * @param spender Spender's address\\n     * @param addedValue Amount of increase in allowance\\n     * @return True if successful\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        external\\n        returns (bool)\\n    {\\n        _increaseAllowance(msg.sender, spender, addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Decrease the allowance by a given amount\\n     * @param spender Spender's address\\n     * @param subtractedValue Amount of decrease in allowance\\n     * @return True if successful\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        external\\n        returns (bool)\\n    {\\n        _decreaseAllowance(msg.sender, spender, subtractedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spender\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param value The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        require(deadline >= block.timestamp, \\\"ABT::permit: signature expired\\\");\\n\\n        bytes32 encodeData = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline));\\n        _validateSignedData(owner, encodeData, v, r, s);\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external returns (bool) {\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool) {\\n        address spender = msg.sender;\\n        uint256 spenderAllowance = allowance[src][spender];\\n\\n        if (spender != src && spenderAllowance != uint256(-1)) {\\n            uint256 newAllowance = spenderAllowance.sub(\\n                amount,\\n                \\\"ABT::transferFrom: transfer amount exceeds allowance\\\"\\n            );\\n            allowance[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice EIP-712 Domain separator\\n     * @return Separator\\n     */\\n    function getDomainSeparator() public view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                VERSION_HASH,\\n                _getChainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Recovers address from signed data and validates the signature\\n     * @param signer Address that signed the data\\n     * @param encodeData Data signed by the address\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function _validateSignedData(address signer, bytes32 encodeData, uint8 v, bytes32 r, bytes32 s) internal view {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                getDomainSeparator(),\\n                encodeData\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        // Explicitly disallow authorizations for address(0) as ecrecover returns address(0) on malformed messages\\n        require(recoveredAddress != address(0) && recoveredAddress == signer, \\\"ABT::validateSig: invalid signature\\\");\\n    }\\n\\n    /**\\n     * @notice Approval implementation\\n     * @param owner The address of the account which owns tokens\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"ABT::_approve: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ABT::_approve: approve to the zero address\\\");\\n        allowance[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _increaseAllowance(\\n        address owner,\\n        address spender,\\n        uint256 addedValue\\n    ) internal {\\n        _approve(owner, spender, allowance[owner][spender].add(addedValue));\\n    }\\n\\n    function _decreaseAllowance(\\n        address owner,\\n        address spender,\\n        uint256 subtractedValue\\n    ) internal {\\n        _approve(\\n            owner,\\n            spender,\\n            allowance[owner][spender].sub(\\n                subtractedValue,\\n                \\\"ABT::_decreaseAllowance: decreased allowance below zero\\\"\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Transfer implementation\\n     * @param from The address of the account which owns tokens\\n     * @param to The address of the account which is receiving tokens\\n     * @param value The number of tokens that are being transferred\\n     */\\n    function _transferTokens(address from, address to, uint256 value) internal {\\n        require(to != address(0), \\\"ABT::_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balanceOf[from] = balanceOf[from].sub(\\n            value,\\n            \\\"ABT::_transferTokens: transfer exceeds from balance\\\"\\n        );\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @notice Mint implementation\\n     * @param to The address of the account which is receiving tokens\\n     * @param value The number of tokens that are being minted\\n     */\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    /**\\n     * @notice Burn implementation\\n     * @param from The address of the account which owns tokens\\n     * @param value The number of tokens that are being burned\\n     */\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] = balanceOf[from].sub(\\n            value,\\n            \\\"ABT::_burn: burn amount exceeds from balance\\\"\\n        );\\n        totalSupply = totalSupply.sub(\\n            value,\\n            \\\"ABT::_burn: burn amount exceeds total supply\\\"\\n        );\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /**\\n     * @notice Current id of the chain where this contract is deployed\\n     * @return Chain id\\n     */\\n    function _getChainId() internal pure returns (uint) {\\n        uint256 chainId;\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n}\",\"keccak256\":\"0xe2c3a284ecaee6dfcd0006013807c1ac59d890531d1b68dcb8089658701bed5c\",\"license\":\"MIT\"},\"contracts/Bouncer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/IVotingPower.sol\\\";\\nimport \\\"./interfaces/IDispatcherFactory.sol\\\";\\nimport \\\"./interfaces/IDispatcher.sol\\\";\\nimport \\\"./lib/AccessControl.sol\\\";\\nimport \\\"./lib/ReentrancyGuard.sol\\\";\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./BankrollToken.sol\\\";\\n\\n/**\\n * @title Bouncer\\n * @dev Used as an interface to provide bankroll to Dispatchers on the Archer network\\n */\\ncontract Bouncer is AccessControl, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    /// @notice Dispatcher Factory\\n    IDispatcherFactory public dispatcherFactory;\\n\\n    /// @notice Voting Power Contract\\n    IVotingPower public votingPowerContract;\\n\\n    /// @notice Global cap on % of network bankroll any one entity can provide (measured in bips: 10,000 bips = 1% of bankroll requested by the network)\\n    uint32 public globalMaxContributionPct;\\n\\n    /// @notice Per Dispatcher cap on % of bankroll any one entity can provide (measured in bips: 10,000 bips = 1% of bankroll requested by the Dispatcher)\\n    uint32 public dispatcherMaxContributionPct;\\n\\n    /// @notice Amount of voting power required to bankroll on the network\\n    uint256 public requiredVotingPower;\\n\\n    /// @notice Total amount of bankroll provided to the network via this contract\\n    uint256 public totalAmountDeposited;\\n\\n    /// @notice Mapping of bankroll Dispatcher > asset > bankroll token\\n    mapping(address => mapping(address => BankrollToken)) public bankrollTokens;\\n\\n    /// @notice Mapping of Dispatcher address > bankroll provided\\n    mapping(address => uint256) public amountDeposited;\\n\\n    /// @notice Admin role to manage Bouncer\\n    bytes32 public constant BOUNCER_ADMIN_ROLE = keccak256(\\\"BOUNCER_ADMIN_ROLE\\\");\\n\\n     /// @notice Modifier to restrict functions to only users that have been added as Bouncer admin\\n    modifier onlyAdmin() {\\n        require(hasRole(BOUNCER_ADMIN_ROLE, msg.sender), \\\"Caller must have BOUNCER_ADMIN_ROLE role\\\");\\n        _;\\n    }\\n\\n    /// @notice Event emitted when Dispatcher Factory contract address is changed\\n    event DispatcherFactoryChanged(address indexed oldAddress, address indexed newAddress);\\n    \\n    /// @notice Event emitted when Voting Power contract address is changed\\n    event VotingPowerChanged(address indexed oldAddress, address indexed newAddress);\\n    \\n    /// @notice Event emitted when required voting power to bankroll network is changed\\n    event RequiredVotingPowerChanged(uint256 oldVotingPower, uint256 newVotingPower);\\n    \\n    /// @notice Event emitted when global cap is changed\\n    event GlobalMaxChanged(uint32 oldPct, uint32 newPct);\\n\\n    /// @notice Event emitted when per dispatcher cap is changed\\n    event DispatcherMaxChanged(uint32 oldPct, uint32 newPct);\\n\\n    /// @notice Event emitted when a new Dispatcher/asset is added to the bankroll program\\n    event BankrollTokenCreated(address indexed tokenAddress, address indexed asset, address dispatcher);\\n\\n    /// @notice Event emitted when bankroll is provided to a dispatcher\\n    event BankrollProvided(address indexed dispatcher, address indexed sender, address indexed account, address asset, uint256 amount);\\n    \\n    /// @notice Event emitted when bankroll is removed from a dispatcher\\n    event BankrollRemoved(address indexed dispatcher, address indexed sender, address indexed account, address asset, uint256 amount);\\n\\n    /**\\n     * @notice Construct a new Bouncer contract\\n     * @param _dispatcherFactory Dispatcher Factory address\\n     * @param _votingPower VotingPower address\\n     * @param _globalMaxContributionPct Global cap on % of bankroll any one account can provide\\n     * @param _dispatcherMaxContributionPct Per Dispatcher cap on % of bankroll any one account can provide\\n     * @param _requiredVotingPower Amount of voting power required for account to provide bankroll\\n     * @param _bouncerAdmin Admin of Bouncer contract\\n     * @param _roleAdmin Admin of Bouncer admin role\\n     */\\n    constructor(\\n        address _dispatcherFactory,\\n        address _votingPower,\\n        uint32 _globalMaxContributionPct,\\n        uint32 _dispatcherMaxContributionPct,\\n        uint256 _requiredVotingPower,\\n        address _bouncerAdmin,\\n        address _roleAdmin\\n    ) {\\n        dispatcherFactory = IDispatcherFactory(_dispatcherFactory);\\n        votingPowerContract = IVotingPower(_votingPower);\\n        globalMaxContributionPct = _globalMaxContributionPct;\\n        dispatcherMaxContributionPct = _dispatcherMaxContributionPct;\\n        requiredVotingPower = _requiredVotingPower;\\n        _setupRole(BOUNCER_ADMIN_ROLE, _bouncerAdmin);\\n        _setupRole(DEFAULT_ADMIN_ROLE, _roleAdmin);\\n    }\\n\\n    /// @notice Receive function to allow contract to accept ETH\\n    receive() external payable {}\\n    \\n    /// @notice Fallback function in case receive function is not matched\\n    fallback() external payable {}\\n\\n    /**\\n     * @notice Amount of voting power a given account has currently\\n     * @param account Address of account\\n     * @return amount Amount of voting power\\n     */\\n    function votingPower(address account) public view returns (uint256 amount) {\\n        return votingPowerContract.balanceOf(account);\\n    }\\n\\n    /**\\n     * @notice Maximum amount of bankroll any one account can provide to the network as a whole\\n     * @return amount Max deposit amount\\n     */\\n    function maxDepositPerAccount() public view returns(uint256 amount) {\\n        return totalBankrollRequested().mul(globalMaxContributionPct).div(1000000);\\n    }\\n\\n    /**\\n     * @notice Total amount of bankroll requested by all of the Dispatchers on the network\\n     * @return amount Total bankroll requested\\n     */\\n    function totalBankrollRequested() public view returns (uint256 amount) {\\n        address[] memory allDispatchers = dispatcherFactory.dispatchers();\\n        for(uint i = 0; i < allDispatchers.length; i++) {\\n            IDispatcher dispatcher = IDispatcher(allDispatchers[i]);\\n            if (dispatcher.isWhitelistedLP(address(this)) && bankrollTokens[allDispatchers[i]][address(0)] != BankrollToken(0)) {\\n                amount = amount + bankrollRequested(dispatcher);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Total amount of bankroll requested by all of the Dispatchers on the network that has not yet been provided\\n     * @return amount Total bankroll available for deposit\\n     */\\n    function totalBankrollAvailable() public view returns (uint256 amount) {\\n        address[] memory allDispatchers = dispatcherFactory.dispatchers();\\n        for(uint i = 0; i < allDispatchers.length; i++) {\\n            IDispatcher dispatcher = IDispatcher(allDispatchers[i]);\\n            amount = amount + bankrollAvailable(dispatcher);\\n        }\\n    }\\n\\n    /**\\n     * @notice All of the Dispatchers on the network that have bankroll available that has not yet been provided\\n     * @return dispatchers Array of dispatchers that have bankroll requests available\\n     */\\n    function dispatchersWithBankrollAvailable() public view returns (address[] memory dispatchers) {\\n        address[] memory allDispatchers = dispatcherFactory.dispatchers();\\n        address[] memory filteredDispatchers = new address[](allDispatchers.length);\\n        uint numAvailable = 0;\\n        for(uint i = 0; i < allDispatchers.length; i++) {\\n            IDispatcher dispatcher = IDispatcher(allDispatchers[i]);\\n            if(bankrollAvailable(dispatcher) > 0) {\\n                filteredDispatchers[numAvailable] = allDispatchers[i];\\n                numAvailable++;\\n            }\\n        }\\n        dispatchers = new address[](numAvailable);\\n        for(uint i = 0; i < numAvailable; i++) {\\n            dispatchers[i] = filteredDispatchers[i];\\n        }\\n        return dispatchers;\\n    }\\n\\n    /**\\n     * @notice Total amount of bankroll requested by the given Dispatcher\\n     * @return amount Bankroll requested by Dispatcher\\n     */\\n    function bankrollRequested(IDispatcher dispatcher) public view returns (uint256 amount) {\\n        return dispatcher.MAX_LIQUIDITY();\\n    }\\n\\n   /**\\n     * @notice Amount of bankroll provided to given Dispatcher\\n     * @return amount Bankroll provided to Dispatcher\\n     */\\n    function bankrollProvided(IDispatcher dispatcher) public view returns (uint256 amount) {\\n        return dispatcher.totalLiquidity();\\n    }\\n    \\n    /**\\n     * @notice Amount of bankroll available to provide to given Dispatcher\\n     * @return amount Bankroll available for Dispatcher\\n     */\\n    function bankrollAvailable(IDispatcher dispatcher) public view returns (uint256 amount) {\\n        if (!dispatcher.isWhitelistedLP(address(this))) {\\n            return 0;\\n        } \\n        if (bankrollTokens[address(dispatcher)][address(0)] == BankrollToken(0)) {\\n            return 0;\\n        }\\n\\n        return bankrollRequested(dispatcher).sub(bankrollProvided(dispatcher));\\n    }\\n\\n    /**\\n     * @notice Max amount of bankroll any one account can provide to given Dispatcher\\n     * @return amount Max bankroll per account\\n     */\\n    function maxBankrollPerAccount(IDispatcher dispatcher) public view returns (uint256 amount) {\\n        return bankrollRequested(dispatcher).mul(dispatcherMaxContributionPct).div(1000000);\\n    }\\n\\n    /**\\n     * @notice Total amount of remaining bankroll account can provide to network\\n     * @return amount Bankroll available to account\\n     */\\n    function amountAvailableToDeposit(address account) public view returns (uint256 amount) {\\n        if (votingPower(account) < requiredVotingPower) {\\n            return 0;\\n        }\\n\\n        uint256 existingDeposit = amountDeposited[account];\\n        uint256 maxDeposit = maxDepositPerAccount();\\n        if(maxDeposit <= existingDeposit) {\\n            return 0;\\n        }\\n        return maxDeposit.sub(existingDeposit);\\n    }\\n\\n    /**\\n     * @notice Amount of remaining bankroll account can provide to given Dispatcher\\n     * @return amount Bankroll available to account for given Dispatcher\\n     */\\n    function amountAvailableToBankroll(address account, address dispatcher) public view returns (uint256 amount) {\\n        if (dispatcherFactory.exists(account)) {\\n            return 0;\\n        }\\n\\n        if (votingPower(account) < requiredVotingPower) {\\n            return 0;\\n        }\\n\\n        uint256 availableDeposit = amountAvailableToDeposit(account);\\n        if (availableDeposit == 0) {\\n            return 0;\\n        }\\n        uint256 dispatcherBankrollAvailable = bankrollAvailable(IDispatcher(dispatcher));\\n        if (dispatcherBankrollAvailable == 0) {\\n            return 0;\\n        }\\n\\n        uint256 maxBankroll = maxBankrollPerAccount(IDispatcher(dispatcher));\\n        BankrollToken bToken = bankrollTokens[dispatcher][address(0)];\\n        uint256 existingBankroll = bToken.balanceOf(account);\\n\\n        if (maxBankroll <= existingBankroll) {\\n            return 0;\\n        }\\n        uint256 availableBankroll = maxBankroll.sub(existingBankroll);\\n\\n        if (availableDeposit >= dispatcherBankrollAvailable) {\\n            return availableBankroll <= dispatcherBankrollAvailable ? availableBankroll : dispatcherBankrollAvailable;\\n        } else {\\n            return availableBankroll <= availableDeposit ? availableBankroll : availableDeposit;\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets all balances relevant to determining whether a given user can bankroll a dispatcher\\n     * @return balances \\n     * 1) dispatcher bankroll available \\n     * 2) min voting power \\n     * 3) user voting power \\n     * 4) network deposit max \\n     * 5) account amount deposited \\n     * 6) max bankroll per account for dispatcher \\n     * 7) bankroll already provided by user to this dispatcher\\n     */\\n    function bankrollBalances(address account, address dispatcher) external view returns (uint256[7] memory balances) {\\n        BankrollToken bToken = bankrollTokens[dispatcher][address(0)];\\n        balances[0] = bankrollAvailable(IDispatcher(dispatcher));\\n        balances[1] = requiredVotingPower;\\n        balances[2] = votingPower(account);\\n        balances[3] = maxDepositPerAccount();\\n        balances[4] = amountDeposited[account];\\n        balances[5] = maxBankrollPerAccount(IDispatcher(dispatcher));\\n        balances[6] = bToken.balanceOf(account);\\n    }\\n\\n    /**\\n     * @notice Function to allow a dispatcher to join the bankroll program\\n     * @param dispatcher Dispatcher address\\n     */\\n    function join(address dispatcher) external {\\n        if(bankrollTokens[dispatcher][address(0)] == BankrollToken(0)) {\\n            BankrollToken bToken = new BankrollToken(address(0), dispatcher, address(this));\\n            bankrollTokens[dispatcher][address(0)] = bToken;\\n            emit BankrollTokenCreated(address(bToken), address(0), dispatcher);\\n        }\\n    }\\n\\n    /**\\n     * @notice Admin function to migrate token to new Bouncer\\n     * @param token the token\\n     * @param newBouncer Bouncer address\\n     */\\n    function migrate(BankrollToken token, address newBouncer) external onlyAdmin {\\n        require(newBouncer != address(0), \\\"cannot migrate to zero\\\");\\n        token.setSupplyManager(newBouncer);\\n    }\\n\\n    /**\\n     * @notice Provide ETH bankroll to Dispatcher\\n     * @param dispatcher Dispatcher address\\n     */\\n    function provideETHBankroll(address dispatcher) external payable nonReentrant {\\n        require(bankrollTokens[dispatcher][address(0)] != BankrollToken(0), \\\"create bankroll token first\\\");\\n        require(amountAvailableToBankroll(tx.origin, dispatcher) >= msg.value, \\\"amount exceeds max\\\");\\n        require(!dispatcherFactory.exists(msg.sender), \\\"dispatchers cannot provide bankroll\\\");\\n        amountDeposited[tx.origin] = amountDeposited[tx.origin].add(msg.value);\\n        totalAmountDeposited = totalAmountDeposited.add(msg.value);\\n        IDispatcher(dispatcher).provideETHLiquidity{value:msg.value}();\\n        BankrollToken bToken = bankrollTokens[dispatcher][address(0)];\\n        bToken.mint(tx.origin, msg.value);\\n        emit BankrollProvided(dispatcher, msg.sender, tx.origin, address(0), msg.value);\\n    }\\n\\n    /**\\n     * @notice Remove ETH bankroll from Dispatcher\\n     * @param dispatcher Dispatcher address\\n     * @param amount Amount of bankroll to remove\\n     */\\n    function removeETHBankroll(address dispatcher, uint256 amount) external nonReentrant {\\n        require(bankrollTokens[dispatcher][address(0)] != BankrollToken(0), \\\"create bankroll token first\\\");\\n        BankrollToken bToken = bankrollTokens[dispatcher][address(0)];\\n        require(bToken.balanceOf(tx.origin) >= amount, \\\"not enough bankroll tokens\\\");\\n        require(amountDeposited[tx.origin] >= amount, \\\"amount exceeds deposit\\\");\\n        require(totalAmountDeposited >= amount, \\\"amount exceeds total\\\");\\n        amountDeposited[tx.origin] = amountDeposited[tx.origin].sub(amount);\\n        totalAmountDeposited = totalAmountDeposited.sub(amount);\\n        IDispatcher(dispatcher).removeETHLiquidity(amount);\\n        bToken.burn(tx.origin, amount);\\n        (bool success, ) = msg.sender.call{value:amount}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n        emit BankrollRemoved(dispatcher, msg.sender, tx.origin, address(0), amount);\\n    }\\n\\n    /**\\n     * @notice Set Dispatcher Factory address\\n     * @dev Only Bouncer admin can call\\n     * @param factoryAddress Dispatcher Factory address\\n     */\\n    function setDispatcherFactory(address factoryAddress) external onlyAdmin {\\n        emit DispatcherFactoryChanged(address(dispatcherFactory), factoryAddress);\\n        dispatcherFactory = IDispatcherFactory(factoryAddress);\\n    }\\n\\n    /**\\n     * @notice Set VotingPower address\\n     * @dev Only Bouncer admin can call\\n     * @param votingPowerAddress VotingPower address\\n     */\\n    function setVotingPower(address votingPowerAddress) external onlyAdmin {\\n        emit VotingPowerChanged(address(votingPowerContract), votingPowerAddress);\\n        votingPowerContract = IVotingPower(votingPowerAddress);\\n    }\\n\\n    /**\\n     * @notice Set voting power required by users to provide bankroll\\n     * @dev Only Bouncer admin can call\\n     * @param newVotingPower minimum voting power\\n     */\\n    function setRequiredVotingPower(uint256 newVotingPower) external onlyAdmin {\\n        emit RequiredVotingPowerChanged(requiredVotingPower, newVotingPower);\\n        requiredVotingPower = newVotingPower;\\n    }\\n\\n    /**\\n     * @notice Set global max % of network bankroll any one account can provide\\n     * @dev Only Bouncer admin can call\\n     * @param newPct new global cap %\\n     */\\n    function setGlobalMaxContributionPct(uint32 newPct) external onlyAdmin {\\n        emit GlobalMaxChanged(globalMaxContributionPct, newPct);\\n        globalMaxContributionPct = newPct;\\n    }\\n\\n    /**\\n     * @notice Set per Dispatcher max % of bankroll any one account can provide\\n     * @dev Only Bouncer admin can call\\n     * @param newPct new per Dispatcher cap %\\n     */\\n    function setDispatcherMaxContributionPct(uint32 newPct) external onlyAdmin {\\n        emit DispatcherMaxChanged(dispatcherMaxContributionPct, newPct);\\n        dispatcherMaxContributionPct = newPct;\\n    }\\n}\",\"keccak256\":\"0xf1742513d2a896802f780f5f7cf42a36290a69d79e33bf4f9d334425db1239bc\",\"license\":\"MIT\"},\"contracts/interfaces/IDispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IQueryEngine.sol\\\";\\n\\ninterface IDispatcher {\\n    function version() external view returns (uint8);\\n    function lpBalances(address) external view returns (uint256);\\n    function totalLiquidity() external view returns (uint256);\\n    function MAX_LIQUIDITY() external view returns (uint256);\\n    function tokenAllowAll(address[] memory tokensToApprove, address spender) external;\\n    function tokenAllow(address[] memory tokensToApprove, uint256[] memory approvalAmounts, address spender) external;\\n    function rescueTokens(address[] calldata tokens, uint256 amount) external;\\n    function setMaxETHLiquidity(uint256 newMax) external;\\n    function provideETHLiquidity() external payable;\\n    function removeETHLiquidity(uint256 amount) external;\\n    function withdrawEth(uint256 amount) external;\\n    function estimateQueryCost(bytes memory script, uint256[] memory inputLocations) external;\\n    function queryEngine() external view returns (IQueryEngine);\\n    function isTrader(address addressToCheck) external view returns (bool);\\n    function makeTrade(bytes memory executeScript, uint256 ethValue) external;\\n    function makeTrade(bytes memory executeScript, uint256 ethValue, uint256 blockDeadline) external;\\n    function makeTrade(bytes memory executeScript, uint256 ethValue, uint256 minTimestamp, uint256 maxTimestamp) external;\\n    function makeTrade(bytes memory queryScript, uint256[] memory queryInputLocations, bytes memory executeScript, uint256[] memory executeInputLocations, uint256 targetPrice, uint256 ethValue) external;\\n    function makeTrade(bytes memory queryScript, uint256[] memory queryInputLocations, bytes memory executeScript, uint256[] memory executeInputLocations, uint256 targetPrice, uint256 ethValue, uint256 blockDeadline) external;\\n    function makeTrade(bytes memory queryScript, uint256[] memory queryInputLocations, bytes memory executeScript, uint256[] memory executeInputLocations, uint256 targetPrice, uint256 ethValue, uint256 minTimestamp, uint256 maxTimestamp) external;\\n    function TRADER_ROLE() external view returns (bytes32);\\n    function MANAGE_LP_ROLE() external view returns (bytes32);\\n    function WHITELISTED_LP_ROLE() external view returns (bytes32);\\n    function APPROVER_ROLE() external view returns (bytes32);\\n    function WITHDRAW_ROLE() external view returns (bytes32);\\n    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);\\n    function isApprover(address addressToCheck) external view returns(bool);\\n    function isWithdrawer(address addressToCheck) external view returns(bool);\\n    function isLPManager(address addressToCheck) external view returns(bool);\\n    function isWhitelistedLP(address addressToCheck) external view returns(bool);\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n    event MaxLiquidityUpdated(address indexed asset, uint256 indexed newAmount, uint256 oldAmount);\\n    event LiquidityProvided(address indexed asset, address indexed provider, uint256 amount);\\n    event LiquidityRemoved(address indexed asset, address indexed provider, uint256 amount);\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n}\",\"keccak256\":\"0x4ac3189c5a86ffa18ed8e538c29feab557ba4f369b38df21ff2987b1435242b6\",\"license\":\"MIT\"},\"contracts/interfaces/IDispatcherFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IDispatcherFactory {\\n    function version() external view returns (uint8);\\n    function dispatchers() external view returns (address[] memory);\\n    function exists(address dispatcher) external view returns (bool);\\n    function numDispatchers() external view returns (uint256);\\n    function createNewDispatcher(address queryEngine, address roleManager, address lpManager, address withdrawer, address trader, address supplier, uint256 initialMaxLiquidity, address[] memory lpWhitelist) external returns (address);\\n    function addDispatchers(address[] memory dispatcherContracts) external;\\n    function removeDispatcher(address dispatcherContract) external;\\n    function DISPATCHER_ADMIN_ROLE() external view returns (bytes32);\\n    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n    event DispatcherCreated(address indexed dispatcher, uint8 indexed version, address queryEngine, address roleManager, address lpManager, address withdrawer, address trader, address supplier, uint256 initialMaxLiquidity, bool lpWhitelist);\\n    event DispatcherAdded(address indexed dispatcher);\\n    event DispatcherRemoved(address indexed dispatcher);\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n}\",\"keccak256\":\"0xba6e78c4209f8de605ee59958e1ce153d3a92486f634e3fc7501f5dd86066f0f\",\"license\":\"MIT\"},\"contracts/interfaces/IQueryEngine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IQueryEngine {\\n    function getPrice(address contractAddress, bytes memory data) external view returns (bytes memory);\\n    function queryAllPrices(bytes memory script, uint256[] memory inputLocations) external view returns (bytes memory);\\n    function query(bytes memory script, uint256[] memory inputLocations) external view returns (uint256);\\n}\",\"keccak256\":\"0x582a8bd7cf501ccc1d9c7b6a7266df1986afff33e24e4867b1884bdba137402b\",\"license\":\"MIT\"},\"contracts/interfaces/IVotingPower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IVotingPower {\\n    function balanceOf(address account) external view returns (uint256);\\n    function balanceOfAt(address account, uint256 blockNumber) external view returns (uint256);\\n}\",\"keccak256\":\"0xd453db135aef5572306239ae680da9771c5ee8c4857915d9d66153632e0580f2\",\"license\":\"MIT\"},\"contracts/lib/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\",\"keccak256\":\"0x0bf67f0847f39a0dfb909b4b68d8273f67739f68e5c44c04418156f6d8a11ea1\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0x8fd765afd2c7c5836c65f999138537e2c5460687c68d795128ec20dc73bf2923\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0xd3e88da8695a1d63936f7bbf3b3441056c44d167e679a80f9a1b5ffafb11fad9\",\"license\":\"MIT\"},\"contracts/lib/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\",\"keccak256\":\"0x2b5126d431b44bc6e25a43305eb23b6d093eb2e7923a8d304db425bbb398efce\",\"license\":\"MIT\"},\"contracts/lib/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\",\"keccak256\":\"0x3318ee67bfc251e74ac8ac1a97061fdaed4f5355fd9c23eb26e1ee1550f675bd\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x961855901713e710c05dd67f9a01e501a54e82e68a526fe3662e228c27f788d9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106200025f5760003560e01c80638d2c4878116200013f578063c9c00e1811620000bb578063d7f6a9351162000079578063d7f6a93514620006e5578063e61f9745146200070a578063e6ec4c261462000722578063e6f3e6671462000747578063f4f0e1ae146200077b5762000267565b8063c9c00e181462000639578063ca15c873146200065e578063d120166c1462000683578063d547741f14620006a8578063d7daa48514620006cd5762000267565b8063a217fddf1162000109578063a217fddf146200059a578063a62ef2d314620005b2578063b2333d7314620005ca578063b6dd7ef614620005ef578063c07473f614620006145762000267565b80638d2c487814620005055780639010d07c146200051c57806391d148541462000541578063937829c214620005755762000267565b806344f1639511620001db578063657eda101162000199578063657eda10146200045757806365bcdac7146200047e5780636c03941514620004a357806374854ca214620004c8578063748d4af014620004e05762000267565b806344f1639514620003a957806352a177e514620003d05780635688f78914620003f55780635ccd3d7f146200040d5780636389b5ae14620004325762000267565b806328ffe6c8116200022957806328ffe6c8146200030a5780632f2ff15d146200032f57806333c8c9d1146200035457806336568abe146200036c5780633e70d65d14620003915762000267565b80630d155d2614620002695780631068361f14620002995780631f69171614620002be578063248a9ca314620002e55762000267565b366200026757005b005b3480156200027657600080fd5b5062000281620007a0565b60405162000290919062002869565b60405180910390f35b348015620002a657600080fd5b5062000267620002b836600462002737565b620007a6565b348015620002cb57600080fd5b50620002d66200089b565b6040516200029091906200278c565b348015620002f257600080fd5b506200028162000304366004620026d5565b620008aa565b3480156200031757600080fd5b50620002676200032936600462002576565b620008c2565b3480156200033c57600080fd5b50620002676200034e366004620026ee565b620009a6565b3480156200036157600080fd5b506200028162000a14565b3480156200037957600080fd5b50620002676200038b366004620026ee565b62000aec565b3480156200039e57600080fd5b50620002d662000b53565b348015620003b657600080fd5b50620003c162000b62565b60405162000290919062002a5c565b348015620003dd57600080fd5b5062000281620003ef36600462002576565b62000b75565b3480156200040257600080fd5b506200028162000bb6565b3480156200041a57600080fd5b50620002676200042c36600462002763565b62000be7565b3480156200043f57600080fd5b50620002816200045136600462002576565b62000c94565b3480156200046457600080fd5b506200046f62000d0b565b604051620002909190620027dc565b3480156200048b57600080fd5b50620002676200049d366004620025d2565b62000f0a565b348015620004b057600080fd5b5062000281620004c236600462002576565b620012d7565b348015620004d557600080fd5b50620003c162001313565b348015620004ed57600080fd5b5062000267620004ff36600462002576565b62001326565b620002676200051636600462002576565b620013bc565b3480156200052957600080fd5b50620002d66200053b36600462002715565b620016d3565b3480156200054e57600080fd5b506200056662000560366004620026ee565b620016f4565b6040516200029091906200285e565b3480156200058257600080fd5b50620002d66200059436600462002595565b6200170e565b348015620005a757600080fd5b506200028162001734565b348015620005bf57600080fd5b506200028162001739565b348015620005d757600080fd5b5062000267620005e936600462002763565b620018ef565b348015620005fc57600080fd5b50620002816200060e36600462002595565b6200199c565b3480156200062157600080fd5b50620002816200063336600462002576565b62001ba4565b3480156200064657600080fd5b50620002816200065836600462002576565b62001bf0565b3480156200066b57600080fd5b50620002816200067d366004620026d5565b62001cd8565b3480156200069057600080fd5b5062000267620006a236600462002576565b62001cf1565b348015620006b557600080fd5b5062000267620006c7366004620026ee565b62001d87565b348015620006da57600080fd5b506200028162001de5565b348015620006f257600080fd5b50620002816200070436600462002576565b62001df8565b3480156200071757600080fd5b506200028162001e66565b3480156200072f57600080fd5b506200026762000741366004620026d5565b62001e6c565b3480156200075457600080fd5b506200076c6200076636600462002595565b62001ee8565b6040516200029091906200282b565b3480156200078857600080fd5b50620002816200079a36600462002576565b62002008565b60055481565b620007c160008051602062003f9a83398151915233620016f4565b620007e95760405162461bcd60e51b8152600401620007e090620028a0565b60405180910390fd5b6001600160a01b038116620008125760405162461bcd60e51b8152600401620007e09062002974565b60405163191250d760e01b81526001600160a01b0383169063191250d790620008409084906004016200278c565b602060405180830381600087803b1580156200085b57600080fd5b505af115801562000870573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008969190620026b3565b505050565b6002546001600160a01b031681565b6000818152602081905260409020600201545b919050565b6001600160a01b03818116600090815260066020908152604080832083805290915290205416620009a357600080823060405162000900906200253d565b6200090e93929190620027a0565b604051809103906000f0801580156200092b573d6000803e3d6000fd5b506001600160a01b03838116600090815260066020908152604080832083805290915280822080546001600160a01b031916938516938417905551929350917fc071122b52ad4d37b49f4f5b63628d9defea35f1d7d032c2e43086e5cee2a78d90620009999086906200278c565b60405180910390a3505b50565b600082815260208190526040902060020154620009c7906200056062002031565b62000a045760405162461bcd60e51b815260040180806020018281038252602f81526020018062003f1a602f913960400191505060405180910390fd5b62000a10828262002035565b5050565b60006060600260009054906101000a90046001600160a01b03166001600160a01b031663f31306b26040518163ffffffff1660e01b815260040160006040518083038186803b15801562000a6757600080fd5b505afa15801562000a7c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000aa6919081019062002600565b905060005b815181101562000ae757600082828151811062000ac457fe5b6020026020010151905062000ad98162001bf0565b909301925060010162000aab565b505090565b62000af662002031565b6001600160a01b0316816001600160a01b03161462000b475760405162461bcd60e51b815260040180806020018281038252602f81526020018062003fba602f913960400191505060405180910390fd5b62000a108282620020a3565b6003546001600160a01b031681565b600354600160c01b900463ffffffff1681565b60035460009062000bb090620f42409062000ba990600160c01b900463ffffffff1662000ba28662000c94565b9062002111565b906200216f565b92915050565b60035460009062000be290620f42409062000ba990600160a01b900463ffffffff1662000ba262001739565b905090565b62000c0260008051602062003f9a83398151915233620016f4565b62000c215760405162461bcd60e51b8152600401620007e090620028a0565b7fd85e49bb2d3dba8e8bdee1d5feee79f8877cfdbd92061e41206f87eda668d44e600360149054906101000a900463ffffffff168260405162000c6692919062002a6d565b60405180910390a16003805463ffffffff909216600160a01b0263ffffffff60a01b19909216919091179055565b6000816001600160a01b031663148e250d6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000cd057600080fd5b505afa15801562000ce5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000bb091906200274a565b606080600260009054906101000a90046001600160a01b03166001600160a01b031663f31306b26040518163ffffffff1660e01b815260040160006040518083038186803b15801562000d5d57600080fd5b505afa15801562000d72573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000d9c919081019062002600565b90506060815167ffffffffffffffff8111801562000db957600080fd5b5060405190808252806020026020018201604052801562000de4578160200160208202803683370190505b5090506000805b835181101562000e6d57600084828151811062000e0457fe5b60200260200101519050600062000e1b8262001bf0565b111562000e635784828151811062000e2f57fe5b602002602001015184848151811062000e4457fe5b6001600160a01b03909216602092830291909101909101526001909201915b5060010162000deb565b508067ffffffffffffffff8111801562000e8657600080fd5b5060405190808252806020026020018201604052801562000eb1578160200160208202803683370190505b50935060005b8181101562000f035782818151811062000ecd57fe5b602002602001015185828151811062000ee257fe5b6001600160a01b039092166020928302919091019091015260010162000eb7565b5050505090565b6002600154141562000f63576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001556001600160a01b0382811660009081526006602090815260408083208380529091529020541662000fad5760405162461bcd60e51b8152600401620007e090620029e7565b6001600160a01b038083166000908152600660209081526040808320838052909152908190205490516370a0823160e01b8152911690829082906370a082319062000ffd9032906004016200278c565b60206040518083038186803b1580156200101657600080fd5b505afa1580156200102b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200105191906200274a565b1015620010725760405162461bcd60e51b8152600401620007e09062002911565b32600090815260076020526040902054821115620010a45760405162461bcd60e51b8152600401620007e09062002a1e565b816005541015620010c95760405162461bcd60e51b8152600401620007e09062002872565b32600090815260076020526040902054620010e59083620021b3565b32600090815260076020526040902055600554620011049083620021b3565b600555604051633dee360160e01b81526001600160a01b03841690633dee3601906200113590859060040162002869565b600060405180830381600087803b1580156200115057600080fd5b505af115801562001165573d6000803e3d6000fd5b5050604051632770a7eb60e21b81526001600160a01b0384169250639dc29fac9150620011999032908690600401620027c3565b602060405180830381600087803b158015620011b457600080fd5b505af1158015620011c9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011ef9190620026b3565b506000336001600160a01b0316836040516200120b9062002789565b60006040518083038185875af1925050503d80600081146200124a576040519150601f19603f3d011682016040523d82523d6000602084013e6200124f565b606091505b5050905080620012735760405162461bcd60e51b8152600401620007e090620028e8565b326001600160a01b0316336001600160a01b0316856001600160a01b03167ffb5bc434a540611454b1ea1fcb31a93bea493e3d618bd7dd7687d69da0916651600087604051620012c5929190620027c3565b60405180910390a45050600180555050565b6000816001600160a01b03166315770f926040518163ffffffff1660e01b815260040160206040518083038186803b15801562000cd057600080fd5b600354600160a01b900463ffffffff1681565b6200134160008051602062003f9a83398151915233620016f4565b620013605760405162461bcd60e51b8152600401620007e090620028a0565b6002546040516001600160a01b038084169216907f100be422750b26ed68cc2d48487c0dc36c48cd549dce64b3154ff1c557a5cfda90600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b6002600154141562001415576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001556001600160a01b038181166000908152600660209081526040808320838052909152902054166200145f5760405162461bcd60e51b8152600401620007e090620029e7565b346200146c32836200199c565b10156200148d5760405162461bcd60e51b8152600401620007e09062002948565b600254604051637b51e92760e11b81526001600160a01b039091169063f6a3d24e90620014bf9033906004016200278c565b60206040518083038186803b158015620014d857600080fd5b505afa158015620014ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620015139190620026b3565b15620015335760405162461bcd60e51b8152600401620007e090620029a4565b326000908152600760205260409020546200154f9034620021f7565b326000908152600760205260409020556005546200156e9034620021f7565b600581905550806001600160a01b031663ac19e898346040518263ffffffff1660e01b81526004016000604051808303818588803b158015620015b057600080fd5b505af1158015620015c5573d6000803e3d6000fd5b5050506001600160a01b038084166000908152600660209081526040808320838052909152908190205490516340c10f1960e01b8152911692508291506340c10f19906200161a9032903490600401620027c3565b602060405180830381600087803b1580156200163557600080fd5b505af11580156200164a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620016709190620026b3565b50326001600160a01b0316336001600160a01b0316836001600160a01b03167f4bd51299eef57634739331d684bf93948f4c8c616d74b4c9e5835ff05aee1eda600034604051620016c3929190620027c3565b60405180910390a4505060018055565b6000828152602081905260408120620016ed908362002252565b9392505050565b6000828152602081905260408120620016ed908362002260565b60066020908152600092835260408084209091529082529020546001600160a01b031681565b600081565b60006060600260009054906101000a90046001600160a01b03166001600160a01b031663f31306b26040518163ffffffff1660e01b815260040160006040518083038186803b1580156200178c57600080fd5b505afa158015620017a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620017cb919081019062002600565b905060005b815181101562000ae7576000828281518110620017e957fe5b60200260200101519050806001600160a01b031663c2d4f8c0306040518263ffffffff1660e01b81526004016200182191906200278c565b60206040518083038186803b1580156200183a57600080fd5b505afa1580156200184f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620018759190620026b3565b8015620018cf575060006001600160a01b0316600660008585815181106200189957fe5b6020908102919091018101516001600160a01b039081168352828201939093526040918201600090812081805290915220541614155b15620018e557620018e08162000c94565b840193505b50600101620017d0565b6200190a60008051602062003f9a83398151915233620016f4565b620019295760405162461bcd60e51b8152600401620007e090620028a0565b7fd3db75a6788ef7ddfbc07f1d0e9daf04b8c94d2bda034ae6d5dba8113a160e75600360189054906101000a900463ffffffff16826040516200196e92919062002a6d565b60405180910390a16003805463ffffffff909216600160c01b0263ffffffff60c01b19909216919091179055565b600254604051637b51e92760e11b81526000916001600160a01b03169063f6a3d24e90620019cf9086906004016200278c565b60206040518083038186803b158015620019e857600080fd5b505afa158015620019fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a239190620026b3565b1562001a325750600062000bb0565b60045462001a408462001ba4565b101562001a505750600062000bb0565b600062001a5d8462001df8565b90508062001a7057600091505062000bb0565b600062001a7d8462001bf0565b90508062001a915760009250505062000bb0565b600062001a9e8562000b75565b6001600160a01b0380871660009081526006602090815260408083208380529091528082205490516370a0823160e01b81529394509091169182906370a082319062001aef908b906004016200278c565b60206040518083038186803b15801562001b0857600080fd5b505afa15801562001b1d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b4391906200274a565b905080831162001b5c5760009550505050505062000bb0565b600062001b6a8483620021b3565b905084861062001b94578481111562001b84578462001b86565b805b965050505050505062000bb0565b8581111562001b84578562001b86565b6003546040516370a0823160e01b81526000916001600160a01b0316906370a082319062001bd79085906004016200278c565b60206040518083038186803b15801562000cd057600080fd5b60405163030b53e360e61b81526000906001600160a01b0383169063c2d4f8c09062001c219030906004016200278c565b60206040518083038186803b15801562001c3a57600080fd5b505afa15801562001c4f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001c759190620026b3565b62001c8357506000620008bd565b6001600160a01b0382811660009081526006602090815260408083208380529091529020541662001cb757506000620008bd565b62000bb062001cc683620012d7565b62001cd18462000c94565b90620021b3565b600081815260208190526040812062000bb09062002277565b62001d0c60008051602062003f9a83398151915233620016f4565b62001d2b5760405162461bcd60e51b8152600401620007e090620028a0565b6003546040516001600160a01b038084169216907f3711f8e3726b8750f42b9e8500711fef90f81ff40faa301baf2d14302b8fddb090600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b60008281526020819052604090206002015462001da8906200056062002031565b62000b475760405162461bcd60e51b815260040180806020018281038252603081526020018062003f496030913960400191505060405180910390fd5b60008051602062003f9a83398151915281565b600060045462001e088362001ba4565b101562001e1857506000620008bd565b6001600160a01b0382166000908152600760205260408120549062001e3c62000bb6565b905081811162001e5257600092505050620008bd565b62001e5e8183620021b3565b949350505050565b60045481565b62001e8760008051602062003f9a83398151915233620016f4565b62001ea65760405162461bcd60e51b8152600401620007e090620028a0565b7fe18a48fdafe80edf1e3097aa58b7ccb9d4b51ebbce4529ebd29f6bcfe662dde76004548260405162001edb92919062002a4e565b60405180910390a1600455565b62001ef26200254b565b6001600160a01b0380831660009081526006602090815260408083208380529091529020541662001f238362001bf0565b8252600454602083015262001f388462001ba4565b604083015262001f4762000bb6565b60608301526001600160a01b038416600090815260076020526040902054608083015262001f758362000b75565b60a08301526040516370a0823160e01b81526001600160a01b038216906370a082319062001fa89087906004016200278c565b60206040518083038186803b15801562001fc157600080fd5b505afa15801562001fd6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001ffc91906200274a565b60c08301525092915050565b60076020526000908152604090205481565b6000620016ed836001600160a01b03841662002284565b3390565b60008281526020819052604090206200204f90826200201a565b1562000a10576200205f62002031565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081905260409020620020bd9082620022d3565b1562000a1057620020cd62002031565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600082620021225750600062000bb0565b828202828482816200213057fe5b0414620016ed5760405162461bcd60e51b815260040180806020018281038252602181526020018062003f796021913960400191505060405180910390fd5b6000620016ed83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250620022ea565b6000620016ed83836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f770081525062002391565b600082820183811015620016ed576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000620016ed8383620023ee565b6000620016ed836001600160a01b03841662002455565b600062000bb0826200246d565b600062002292838362002455565b620022ca5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000bb0565b50600062000bb0565b6000620016ed836001600160a01b03841662002471565b600081836200237a5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156200233e57818101518382015260200162002324565b50505050905090810190601f1680156200236c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816200238757fe5b0495945050505050565b60008184841115620023e65760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156200233e57818101518382015260200162002324565b505050900390565b81546000908210620024325760405162461bcd60e51b815260040180806020018281038252602281526020018062003ef86022913960400191505060405180910390fd5b8260000182815481106200244257fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b60008181526001830160205260408120548015620025325783546000198083019190810190600090879083908110620024a657fe5b9060005260206000200154905080876000018481548110620024c457fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080620024f557fe5b6001900381819060005260206000200160009055905586600101600087815260200190815260200160002060009055600194505050505062000bb0565b600091505062000bb0565b6114388062002ac083390190565b6040518060e001604052806007906020820280368337509192915050565b8051620008bd8162002aa9565b60006020828403121562002588578081fd5b8135620016ed8162002aa9565b60008060408385031215620025a8578081fd5b8235620025b58162002aa9565b91506020830135620025c78162002aa9565b809150509250929050565b60008060408385031215620025e5578182fd5b8235620025f28162002aa9565b946020939093013593505050565b6000602080838503121562002613578182fd5b825167ffffffffffffffff808211156200262b578384fd5b818501915085601f8301126200263f578384fd5b8151818111156200264c57fe5b83810291506200265e84830162002a84565b8181528481019084860184860187018a101562002679578788fd5b8795505b83861015620026a657620026918162002569565b8352600195909501949186019186016200267d565b5098975050505050505050565b600060208284031215620026c5578081fd5b81518015158114620016ed578182fd5b600060208284031215620026e7578081fd5b5035919050565b6000806040838503121562002701578182fd5b823591506020830135620025c78162002aa9565b6000806040838503121562002728578182fd5b50508035926020909101359150565b60008060408385031215620025a8578182fd5b6000602082840312156200275c578081fd5b5051919050565b60006020828403121562002775578081fd5b813563ffffffff81168114620016ed578182fd5b90565b6001600160a01b0391909116815260200190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156200281f5783516001600160a01b031683529284019291840191600101620027f8565b50909695505050505050565b60e08101818360005b60078110156200285557815183526020928301929091019060010162002834565b50505092915050565b901515815260200190565b90815260200190565b602080825260149082015273185b5bdd5b9d08195e18d959591cc81d1bdd185b60621b604082015260600190565b60208082526028908201527f43616c6c6572206d757374206861766520424f554e4345525f41444d494e5f526040820152674f4c4520726f6c6560c01b606082015260800190565b6020808252600f908201526e151c985b9cd9995c8819985a5b1959608a1b604082015260600190565b6020808252601a908201527f6e6f7420656e6f7567682062616e6b726f6c6c20746f6b656e73000000000000604082015260600190565b6020808252601290820152710c2dadeeadce840caf0c6cacac8e640dac2f60731b604082015260600190565b60208082526016908201527563616e6e6f74206d69677261746520746f207a65726f60501b604082015260600190565b60208082526023908201527f64697370617463686572732063616e6e6f742070726f766964652062616e6b726040820152621bdb1b60ea1b606082015260800190565b6020808252601b908201527f6372656174652062616e6b726f6c6c20746f6b656e2066697273740000000000604082015260600190565b602080825260169082015275185b5bdd5b9d08195e18d959591cc819195c1bdcda5d60521b604082015260600190565b918252602082015260400190565b63ffffffff91909116815260200190565b63ffffffff92831681529116602082015260400190565b60405181810167ffffffffffffffff8111828210171562002aa157fe5b604052919050565b6001600160a01b0381168114620009a357600080fdfe608060405234801561001057600080fd5b5060405161143838038061143883398101604081905261002f916100b9565b600180546001600160a01b038086166001600160a01b031992831617909255600280548584169083161790556003805492841692909116821790556040516000907f0cff5c8e2b1e51135595ff4ebaefab9ef5b26373c3b84cbdc4677bb41468843b908290a35050506100fb565b80516001600160a01b03811681146100b457600080fd5b919050565b6000806000606084860312156100cd578283fd5b6100d68461009d565b92506100e46020850161009d565b91506100f26040850161009d565b90509250925092565b61132e8061010a6000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c806366d003ac116100c3578063a457c2d71161007c578063a457c2d71461028f578063a9059cbb146102a2578063d505accf146102b5578063dd62ed3e146102ca578063ed24911d146102dd578063f147389f146102e557610158565b806366d003ac1461023e57806370a08231146102465780637ecebe001461025957806395d89b411461026c5780639dc29fac146102745780639e4e73181461028757610158565b806330adf81f1161011557806330adf81f146101de578063313ce567146101e657806338d52e0f146101fb578063395093511461021057806340c10f191461022357806354fd4d501461023657610158565b806306fdde031461015d578063095ea7b31461017b57806318160ddd1461019b578063191250d7146101b057806320606b70146101c357806323b872dd146101cb575b600080fd5b6101656102ed565b6040516101729190610f69565b60405180910390f35b61018e610189366004610e7f565b61031e565b6040516101729190610ed7565b6101a3610334565b6040516101729190610ee2565b61018e6101be366004610d87565b61033a565b6101a36103ce565b61018e6101d9366004610dd3565b6103f2565b6101a36104d9565b6101ee6104fd565b60405161017291906111f4565b610203610502565b6040516101729190610ec3565b61018e61021e366004610e7f565b610511565b61018e610231366004610e7f565b61051e565b6101ee61057b565b610203610580565b6101a3610254366004610d87565b61058f565b6101a3610267366004610d87565b6105a1565b6101656105b3565b61018e610282366004610e7f565b6105d5565b6101a3610632565b61018e61029d366004610e7f565b610656565b61018e6102b0366004610e7f565b610663565b6102c86102c3366004610e0e565b610670565b005b6101a36102d8366004610da1565b610725565b6101a3610742565b61020361080c565b6040518060400160405280601581526020017420b931b432b9102130b735b937b636102a37b5b2b760591b81525081565b600061032b33848461081b565b50600192915050565b60005481565b6003546000906001600160a01b031633146103705760405162461bcd60e51b815260040161036790610fbc565b60405180910390fd5b6003546040516001600160a01b038085169216907f0cff5c8e2b1e51135595ff4ebaefab9ef5b26373c3b84cbdc4677bb41468843b90600090a350600380546001600160a01b0319166001600160a01b03831617905560015b919050565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6001600160a01b03831660008181526005602090815260408083203380855292528220549192909190821480159061042c57506000198114155b156104c257600061045885604051806060016040528060348152602001611203603491398491906108cf565b6001600160a01b03808916600081815260056020908152604080832094891680845294909152908190208490555192935090917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906104b8908590610ee2565b60405180910390a3505b6104cd868686610966565b50600195945050505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b6001546001600160a01b031681565b600061032b338484610a4a565b6003546000906001600160a01b0316331461054b5760405162461bcd60e51b815260040161036790610fbc565b6001600160a01b0383166105715760405162461bcd60e51b815260040161036790611035565b61032b8383610a8c565b600181565b6002546001600160a01b031681565b60046020526000908152604090205481565b60066020526000908152604090205481565b6040518060400160405280600681526020016520a921a416a160d11b81525081565b6003546000906001600160a01b031633146106025760405162461bcd60e51b815260040161036790610fbc565b6001600160a01b0383166106285760405162461bcd60e51b815260040161036790611110565b61032b8383610b19565b7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b600061032b338484610be6565b600061032b338484610966565b428410156106905760405162461bcd60e51b815260040161036790611160565b6001600160a01b038716600090815260066020908152604080832080546001810190915590516106eb927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928c928c928c92918c9101610eeb565b6040516020818303038152906040528051906020012090506107108882868686610c35565b61071b88888861081b565b5050505050505050565b600560209081526000928352604080842090915290825290205481565b60408051808201909152601581527420b931b432b9102130b735b937b636102a37b5b2b760591b60209091015260007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7fb4c81079ad1897d28ecc306d4363630b748207b96007b1febc4186bf692400187fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66107dc610d0b565b306040516020016107f1959493929190610f1f565b60405160208183030381529060405280519060200120905090565b6003546001600160a01b031681565b6001600160a01b0383166108415760405162461bcd60e51b815260040161036790610fe9565b6001600160a01b0382166108675760405162461bcd60e51b8152600401610367906110c6565b6001600160a01b0380841660008181526005602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906108c2908590610ee2565b60405180910390a3505050565b6000818484111561095e5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561092357818101518382015260200161090b565b50505050905090810190601f1680156109505780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b03821661098c5760405162461bcd60e51b815260040161036790611197565b6109c98160405180606001604052806033815260200161129a603391396001600160a01b03861660009081526004602052604090205491906108cf565b6001600160a01b0380851660009081526004602052604080822093909355908416815220546109f89082610d0f565b6001600160a01b0380841660008181526004602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906108c2908590610ee2565b6001600160a01b03808416600090815260056020908152604080832093861683529290522054610a879084908490610a829085610d0f565b61081b565b505050565b600054610a999082610d0f565b60009081556001600160a01b038316815260046020526040902054610abe9082610d0f565b6001600160a01b0383166000818152600460205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610b0d908590610ee2565b60405180910390a35050565b610b56816040518060600160405280602c81526020016112cd602c91396001600160a01b03851660009081526004602052604090205491906108cf565b60046000846001600160a01b03166001600160a01b0316815260200190815260200160002081905550610ba6816040518060600160405280602c815260200161126e602c913960005491906108cf565b60009081556040516001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610b0d908590610ee2565b610a878383610a8284604051806060016040528060378152602001611237603791396001600160a01b03808a166000908152600560209081526040808320938c168352929052205491906108cf565b6000610c3f610742565b85604051602001610c51929190610ea8565b604051602081830303815290604052805190602001209050600060018286868660405160008152602001604052604051610c8e9493929190610f4b565b6020604051602081039080840390855afa158015610cb0573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590610ce65750866001600160a01b0316816001600160a01b0316145b610d025760405162461bcd60e51b815260040161036790611083565b50505050505050565b4690565b600082820183811015610d69576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b80356001600160a01b03811681146103c957600080fd5b600060208284031215610d98578081fd5b610d6982610d70565b60008060408385031215610db3578081fd5b610dbc83610d70565b9150610dca60208401610d70565b90509250929050565b600080600060608486031215610de7578081fd5b610df084610d70565b9250610dfe60208501610d70565b9150604084013590509250925092565b600080600080600080600060e0888a031215610e28578283fd5b610e3188610d70565b9650610e3f60208901610d70565b95506040880135945060608801359350608088013560ff81168114610e62578384fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215610e91578182fd5b610e9a83610d70565b946020939093013593505050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b901515815260200190565b90815260200190565b9586526001600160a01b0394851660208701529290931660408501526060840152608083019190915260a082015260c00190565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b93845260ff9290921660208401526040830152606082015260800190565b6000602080835283518082850152825b81811015610f9557858101830151858201604001528201610f79565b81811115610fa65783604083870101525b50601f01601f1916929092016040019392505050565b60208082526013908201527237b7363c9039bab838363c9036b0b730b3b2b960691b604082015260600190565b6020808252602c908201527f4142543a3a5f617070726f76653a20617070726f76652066726f6d207468652060408201526b7a65726f206164647265737360a01b606082015260800190565b6020808252602e908201527f4142543a3a6d696e743a2063616e6e6f74207472616e7366657220746f20746860408201526d65207a65726f206164647265737360901b606082015260800190565b60208082526023908201527f4142543a3a76616c69646174655369673a20696e76616c6964207369676e617460408201526275726560e81b606082015260800190565b6020808252602a908201527f4142543a3a5f617070726f76653a20617070726f766520746f20746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526030908201527f4142543a3a6275726e3a2063616e6e6f74207472616e736665722066726f6d2060408201526f746865207a65726f206164647265737360801b606082015260800190565b6020808252601e908201527f4142543a3a7065726d69743a207369676e617475726520657870697265640000604082015260600190565b60208082526039908201527f4142543a3a5f7472616e73666572546f6b656e733a2063616e6e6f742074726160408201527f6e7366657220746f20746865207a65726f206164647265737300000000000000606082015260800190565b60ff9190911681526020019056fe4142543a3a7472616e7366657246726f6d3a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63654142543a3a5f6465637265617365416c6c6f77616e63653a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f4142543a3a5f6275726e3a206275726e20616d6f756e74206578636565647320746f74616c20737570706c794142543a3a5f7472616e73666572546f6b656e733a207472616e7366657220657863656564732066726f6d2062616c616e63654142543a3a5f6275726e3a206275726e20616d6f756e7420657863656564732066726f6d2062616c616e6365a26469706673582212207842e31e4aa83f28809b985ce690bcc02f627b6d40f4780f77571c88ee91284064736f6c63430007040033456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f770f38c9a95b3e46f81ca9bc843f8e4f96937802cabd5509bc53c899dec1fa769b416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a2646970667358221220c822429282c0271a9c9cc86ccf698a7278239749a16037c8f958c934570234e164736f6c63430007040033",
  "devdoc": {
    "details": "Used as an interface to provide bankroll to Dispatchers on the Archer network",
    "kind": "dev",
    "methods": {
      "amountAvailableToBankroll(address,address)": {
        "returns": {
          "amount": "Bankroll available to account for given Dispatcher"
        }
      },
      "amountAvailableToDeposit(address)": {
        "returns": {
          "amount": "Bankroll available to account"
        }
      },
      "bankrollAvailable(address)": {
        "returns": {
          "amount": "Bankroll available for Dispatcher"
        }
      },
      "bankrollBalances(address,address)": {
        "returns": {
          "balances": " 1) dispatcher bankroll available  2) min voting power  3) user voting power  4) network deposit max  5) account amount deposited  6) max bankroll per account for dispatcher  7) bankroll already provided by user to this dispatcher"
        }
      },
      "bankrollProvided(address)": {
        "returns": {
          "amount": "Bankroll provided to Dispatcher"
        }
      },
      "bankrollRequested(address)": {
        "returns": {
          "amount": "Bankroll requested by Dispatcher"
        }
      },
      "constructor": {
        "params": {
          "_bouncerAdmin": "Admin of Bouncer contract",
          "_dispatcherFactory": "Dispatcher Factory address",
          "_dispatcherMaxContributionPct": "Per Dispatcher cap on % of bankroll any one account can provide",
          "_globalMaxContributionPct": "Global cap on % of bankroll any one account can provide",
          "_requiredVotingPower": "Amount of voting power required for account to provide bankroll",
          "_roleAdmin": "Admin of Bouncer admin role",
          "_votingPower": "VotingPower address"
        }
      },
      "dispatchersWithBankrollAvailable()": {
        "returns": {
          "dispatchers": "Array of dispatchers that have bankroll requests available"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "join(address)": {
        "params": {
          "dispatcher": "Dispatcher address"
        }
      },
      "maxBankrollPerAccount(address)": {
        "returns": {
          "amount": "Max bankroll per account"
        }
      },
      "maxDepositPerAccount()": {
        "returns": {
          "amount": "Max deposit amount"
        }
      },
      "migrate(address,address)": {
        "params": {
          "newBouncer": "Bouncer address",
          "token": "the token"
        }
      },
      "provideETHBankroll(address)": {
        "params": {
          "dispatcher": "Dispatcher address"
        }
      },
      "removeETHBankroll(address,uint256)": {
        "params": {
          "amount": "Amount of bankroll to remove",
          "dispatcher": "Dispatcher address"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setDispatcherFactory(address)": {
        "details": "Only Bouncer admin can call",
        "params": {
          "factoryAddress": "Dispatcher Factory address"
        }
      },
      "setDispatcherMaxContributionPct(uint32)": {
        "details": "Only Bouncer admin can call",
        "params": {
          "newPct": "new per Dispatcher cap %"
        }
      },
      "setGlobalMaxContributionPct(uint32)": {
        "details": "Only Bouncer admin can call",
        "params": {
          "newPct": "new global cap %"
        }
      },
      "setRequiredVotingPower(uint256)": {
        "details": "Only Bouncer admin can call",
        "params": {
          "newVotingPower": "minimum voting power"
        }
      },
      "setVotingPower(address)": {
        "details": "Only Bouncer admin can call",
        "params": {
          "votingPowerAddress": "VotingPower address"
        }
      },
      "totalBankrollAvailable()": {
        "returns": {
          "amount": "Total bankroll available for deposit"
        }
      },
      "totalBankrollRequested()": {
        "returns": {
          "amount": "Total bankroll requested"
        }
      },
      "votingPower(address)": {
        "params": {
          "account": "Address of account"
        },
        "returns": {
          "amount": "Amount of voting power"
        }
      }
    },
    "title": "Bouncer",
    "version": 1
  },
  "userdoc": {
    "events": {
      "BankrollProvided(address,address,address,address,uint256)": {
        "notice": "Event emitted when bankroll is provided to a dispatcher"
      },
      "BankrollRemoved(address,address,address,address,uint256)": {
        "notice": "Event emitted when bankroll is removed from a dispatcher"
      },
      "BankrollTokenCreated(address,address,address)": {
        "notice": "Event emitted when a new Dispatcher/asset is added to the bankroll program"
      },
      "DispatcherFactoryChanged(address,address)": {
        "notice": "Event emitted when Dispatcher Factory contract address is changed"
      },
      "DispatcherMaxChanged(uint32,uint32)": {
        "notice": "Event emitted when per dispatcher cap is changed"
      },
      "GlobalMaxChanged(uint32,uint32)": {
        "notice": "Event emitted when global cap is changed"
      },
      "RequiredVotingPowerChanged(uint256,uint256)": {
        "notice": "Event emitted when required voting power to bankroll network is changed"
      },
      "VotingPowerChanged(address,address)": {
        "notice": "Event emitted when Voting Power contract address is changed"
      }
    },
    "kind": "user",
    "methods": {
      "BOUNCER_ADMIN_ROLE()": {
        "notice": "Admin role to manage Bouncer"
      },
      "amountAvailableToBankroll(address,address)": {
        "notice": "Amount of remaining bankroll account can provide to given Dispatcher"
      },
      "amountAvailableToDeposit(address)": {
        "notice": "Total amount of remaining bankroll account can provide to network"
      },
      "amountDeposited(address)": {
        "notice": "Mapping of Dispatcher address > bankroll provided"
      },
      "bankrollAvailable(address)": {
        "notice": "Amount of bankroll available to provide to given Dispatcher"
      },
      "bankrollBalances(address,address)": {
        "notice": "Gets all balances relevant to determining whether a given user can bankroll a dispatcher"
      },
      "bankrollProvided(address)": {
        "notice": "Amount of bankroll provided to given Dispatcher"
      },
      "bankrollRequested(address)": {
        "notice": "Total amount of bankroll requested by the given Dispatcher"
      },
      "bankrollTokens(address,address)": {
        "notice": "Mapping of bankroll Dispatcher > asset > bankroll token"
      },
      "constructor": {
        "notice": "Construct a new Bouncer contract"
      },
      "dispatcherFactory()": {
        "notice": "Dispatcher Factory"
      },
      "dispatcherMaxContributionPct()": {
        "notice": "Per Dispatcher cap on % of bankroll any one entity can provide (measured in bips: 10,000 bips = 1% of bankroll requested by the Dispatcher)"
      },
      "dispatchersWithBankrollAvailable()": {
        "notice": "All of the Dispatchers on the network that have bankroll available that has not yet been provided"
      },
      "globalMaxContributionPct()": {
        "notice": "Global cap on % of network bankroll any one entity can provide (measured in bips: 10,000 bips = 1% of bankroll requested by the network)"
      },
      "join(address)": {
        "notice": "Function to allow a dispatcher to join the bankroll program"
      },
      "maxBankrollPerAccount(address)": {
        "notice": "Max amount of bankroll any one account can provide to given Dispatcher"
      },
      "maxDepositPerAccount()": {
        "notice": "Maximum amount of bankroll any one account can provide to the network as a whole"
      },
      "migrate(address,address)": {
        "notice": "Admin function to migrate token to new Bouncer"
      },
      "provideETHBankroll(address)": {
        "notice": "Provide ETH bankroll to Dispatcher"
      },
      "removeETHBankroll(address,uint256)": {
        "notice": "Remove ETH bankroll from Dispatcher"
      },
      "requiredVotingPower()": {
        "notice": "Amount of voting power required to bankroll on the network"
      },
      "setDispatcherFactory(address)": {
        "notice": "Set Dispatcher Factory address"
      },
      "setDispatcherMaxContributionPct(uint32)": {
        "notice": "Set per Dispatcher max % of bankroll any one account can provide"
      },
      "setGlobalMaxContributionPct(uint32)": {
        "notice": "Set global max % of network bankroll any one account can provide"
      },
      "setRequiredVotingPower(uint256)": {
        "notice": "Set voting power required by users to provide bankroll"
      },
      "setVotingPower(address)": {
        "notice": "Set VotingPower address"
      },
      "totalAmountDeposited()": {
        "notice": "Total amount of bankroll provided to the network via this contract"
      },
      "totalBankrollAvailable()": {
        "notice": "Total amount of bankroll requested by all of the Dispatchers on the network that has not yet been provided"
      },
      "totalBankrollRequested()": {
        "notice": "Total amount of bankroll requested by all of the Dispatchers on the network"
      },
      "votingPower(address)": {
        "notice": "Amount of voting power a given account has currently"
      },
      "votingPowerContract()": {
        "notice": "Voting Power Contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4034,
        "contract": "contracts/Bouncer.sol:Bouncer",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)4030_storage)"
      },
      {
        "astId": 5535,
        "contract": "contracts/Bouncer.sol:Bouncer",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 749,
        "contract": "contracts/Bouncer.sol:Bouncer",
        "label": "dispatcherFactory",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IDispatcherFactory)3808"
      },
      {
        "astId": 752,
        "contract": "contracts/Bouncer.sol:Bouncer",
        "label": "votingPowerContract",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IVotingPower)4011"
      },
      {
        "astId": 755,
        "contract": "contracts/Bouncer.sol:Bouncer",
        "label": "globalMaxContributionPct",
        "offset": 20,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 758,
        "contract": "contracts/Bouncer.sol:Bouncer",
        "label": "dispatcherMaxContributionPct",
        "offset": 24,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 761,
        "contract": "contracts/Bouncer.sol:Bouncer",
        "label": "requiredVotingPower",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 764,
        "contract": "contracts/Bouncer.sol:Bouncer",
        "label": "totalAmountDeposited",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 771,
        "contract": "contracts/Bouncer.sol:Bouncer",
        "label": "bankrollTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_contract(BankrollToken)728))"
      },
      {
        "astId": 776,
        "contract": "contracts/Bouncer.sol:Bouncer",
        "label": "amountDeposited",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(BankrollToken)728": {
        "encoding": "inplace",
        "label": "contract BankrollToken",
        "numberOfBytes": "20"
      },
      "t_contract(IDispatcherFactory)3808": {
        "encoding": "inplace",
        "label": "contract IDispatcherFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IVotingPower)4011": {
        "encoding": "inplace",
        "label": "contract IVotingPower",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_contract(BankrollToken)728)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract BankrollToken)",
        "numberOfBytes": "32",
        "value": "t_contract(BankrollToken)728"
      },
      "t_mapping(t_address,t_mapping(t_address,t_contract(BankrollToken)728))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => contract BankrollToken))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_contract(BankrollToken)728)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)4030_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)4030_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)5320_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 5319,
            "contract": "contracts/Bouncer.sol:Bouncer",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5055_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)4030_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 4027,
            "contract": "contracts/Bouncer.sol:Bouncer",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)5320_storage"
          },
          {
            "astId": 4029,
            "contract": "contracts/Bouncer.sol:Bouncer",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)5055_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5050,
            "contract": "contracts/Bouncer.sol:Bouncer",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5054,
            "contract": "contracts/Bouncer.sol:Bouncer",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}