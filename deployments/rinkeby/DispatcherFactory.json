{
  "address": "0xEf3514DB9D4BA463Ca0D7469c1437d77d2d90b86",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roleAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dispatcherAdmin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dispatcher",
          "type": "address"
        }
      ],
      "name": "DispatcherAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dispatcher",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "queryEngine",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "roleManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lpManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "supplier",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialMaxLiquidity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "lpWhitelist",
          "type": "bool"
        }
      ],
      "name": "DispatcherCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dispatcher",
          "type": "address"
        }
      ],
      "name": "DispatcherRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DISPATCHER_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "dispatcherContracts",
          "type": "address[]"
        }
      ],
      "name": "addDispatchers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "queryEngine",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "roleManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lpManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "supplier",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialMaxLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "lpWhitelist",
          "type": "address[]"
        }
      ],
      "name": "createNewDispatcher",
      "outputs": [
        {
          "internalType": "address",
          "name": "dispatcher",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dispatchers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dispatcherContract",
          "type": "address"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numDispatchers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "dispatcherContracts",
          "type": "address[]"
        }
      ],
      "name": "removeDispatchers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2783d6aa40d17a3e95c2877df5f1f954b7e855db798695c96233177485bec319",
  "receipt": {
    "to": null,
    "from": "0x4F8f512Dab59F227EA70B1D8A0044aFa95CC80C3",
    "contractAddress": "0xEf3514DB9D4BA463Ca0D7469c1437d77d2d90b86",
    "transactionIndex": 26,
    "gasUsed": "4709426",
    "logsBloom": "0x
    "blockHash": "0x34c836860e276c3a539e52c7ebf4861c96ef9d17559f5d35e5e70dbbd8bdf7d3",
    "transactionHash": "0x2783d6aa40d17a3e95c2877df5f1f954b7e855db798695c96233177485bec319",
    "logs": [
      {
        "transactionIndex": 26,
        "blockNumber": 8364133,
        "transactionHash": "0x2783d6aa40d17a3e95c2877df5f1f954b7e855db798695c96233177485bec319",
        "address": "0xEf3514DB9D4BA463Ca0D7469c1437d77d2d90b86",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xaa1af34341297dfbc4dfe694fa8bb873bcaf9528e24c7336ae6bfc3f79ddeddb",
          "0x0000000000000000000000005b0ac3279dbf84bb8da59be1ecab118198f022e5",
          "0x0000000000000000000000004f8f512dab59f227ea70b1d8a0044afa95cc80c3"
        ],
        "data": "0x",
        "logIndex": 37,
        "blockHash": "0x34c836860e276c3a539e52c7ebf4861c96ef9d17559f5d35e5e70dbbd8bdf7d3"
      },
      {
        "transactionIndex": 26,
        "blockNumber": 8364133,
        "transactionHash": "0x2783d6aa40d17a3e95c2877df5f1f954b7e855db798695c96233177485bec319",
        "address": "0xEf3514DB9D4BA463Ca0D7469c1437d77d2d90b86",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000864ad15351c4a50e12f767b1a7d993ae47493e55",
          "0x0000000000000000000000004f8f512dab59f227ea70b1d8a0044afa95cc80c3"
        ],
        "data": "0x",
        "logIndex": 38,
        "blockHash": "0x34c836860e276c3a539e52c7ebf4861c96ef9d17559f5d35e5e70dbbd8bdf7d3"
      }
    ],
    "blockNumber": 8364133,
    "cumulativeGasUsed": "8981987",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x864AD15351C4a50E12F767B1a7D993aE47493E55",
    "0x5b0aC3279dBf84Bb8DA59Be1EcaB118198f022E5"
  ],
  "solcInputHash": "59536337a91024c932facfe596b5086e",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roleAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dispatcherAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dispatcher\",\"type\":\"address\"}],\"name\":\"DispatcherAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dispatcher\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"queryEngine\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"roleManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialMaxLiquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"lpWhitelist\",\"type\":\"bool\"}],\"name\":\"DispatcherCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dispatcher\",\"type\":\"address\"}],\"name\":\"DispatcherRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISPATCHER_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dispatcherContracts\",\"type\":\"address[]\"}],\"name\":\"addDispatchers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"queryEngine\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"roleManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialMaxLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"lpWhitelist\",\"type\":\"address[]\"}],\"name\":\"createNewDispatcher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"dispatcher\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dispatchers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dispatcherContract\",\"type\":\"address\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numDispatchers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dispatcherContracts\",\"type\":\"address[]\"}],\"name\":\"removeDispatchers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Creates and keeps track of Dispatchers on the network\",\"kind\":\"dev\",\"methods\":{\"addDispatchers(address[])\":{\"params\":{\"dispatcherContracts\":\"Array of dispatcher contract addresses\"}},\"constructor\":{\"params\":{\"_dispatcherAdmin\":\"admin that can create new Dispatchers\",\"_roleAdmin\":\"admin in control of roles\"}},\"createNewDispatcher(address,address,address,address,address,address,uint256,address[])\":{\"params\":{\"initialMaxLiquidity\":\"Initial max liquidity allowed in contract\",\"lpManager\":\"Address allowed to manage LP whitelist\",\"lpWhitelist\":\"List of addresses that are allowed to provide liquidity to this contract\",\"queryEngine\":\"Address of query engine contract\",\"roleManager\":\"Address allowed to manage contract roles\",\"supplier\":\"Address allowed to supply opportunities to contract\",\"trader\":\"Address allowed to make trades via this contract\",\"withdrawer\":\"Address allowed to withdraw profit from contract\"},\"returns\":{\"dispatcher\":\"Address of new Dispatcher contract\"}},\"dispatchers()\":{\"returns\":{\"_0\":\"Array of Dispatcher addresses\"}},\"exists(address)\":{\"params\":{\"dispatcherContract\":\"Dispatcher address\"},\"returns\":{\"_0\":\"true if Dispatcher is indexed \"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"numDispatchers()\":{\"returns\":{\"_0\":\"number of Dispatchers indexed \"}},\"removeDispatchers(address[])\":{\"params\":{\"dispatcherContracts\":\"Dispatcher contract addresses\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"stateVariables\":{\"dispatchersSet\":{\"details\":\"Record of all Dispatchers\"}},\"title\":\"DispatcherFactory\",\"version\":1},\"userdoc\":{\"events\":{\"DispatcherAdded(address)\":{\"notice\":\"Add existing Dispatcher event\"},\"DispatcherCreated(address,uint8,address,address,address,address,address,address,uint256,bool)\":{\"notice\":\"Create new Dispatcher event\"},\"DispatcherRemoved(address)\":{\"notice\":\"Remove existing Dispatcher event\"}},\"kind\":\"user\",\"methods\":{\"DISPATCHER_ADMIN_ROLE()\":{\"notice\":\"Admin role to create new Dispatchers\"},\"addDispatchers(address[])\":{\"notice\":\"Admin function to allow addition of dispatchers created via other Dispatcher Factories\"},\"constructor\":{\"notice\":\"Initializes contract, setting admin\"},\"createNewDispatcher(address,address,address,address,address,address,uint256,address[])\":{\"notice\":\"Create new Dispatcher contract\"},\"dispatchers()\":{\"notice\":\"Return list of Dispatcher contracts this factory indexes\"},\"exists(address)\":{\"notice\":\"Determine whether this factory is indexing a Dispatcher at the provided address\"},\"numDispatchers()\":{\"notice\":\"Returns the number of Dispatchers indexed by this factory\"},\"removeDispatchers(address[])\":{\"notice\":\"Admin function to allow removal of dispatchers from Dispatcher set\"},\"version()\":{\"notice\":\"Version number of Dispatcher Factory\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DispatcherFactory.sol\":\"DispatcherFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Dispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IQueryEngine.sol\\\";\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\nimport \\\"./lib/AccessControl.sol\\\";\\nimport \\\"./lib/Trader.sol\\\";\\n\\n/**\\n * @title Dispatcher\\n * @dev Executes trades on behalf of suppliers and maintains bankroll to support supplier strategies\\n */\\ncontract Dispatcher is AccessControl, Trader {\\n    // Allows safe math operations on uint256 values\\n    using SafeMath for uint256;\\n\\n    // Allows easy manipulation on bytes\\n    using BytesLib for bytes;\\n\\n    // Use safe ERC20 interface to gracefully handle non-compliant tokens\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Version number of Dispatcher\\n    uint8 public version;\\n\\n    /// @notice Admin role to manage whitelisted LPs\\n    bytes32 public constant MANAGE_LP_ROLE = keccak256(\\\"MANAGE_LP_ROLE\\\");\\n\\n    /// @notice Addresses with this role are allowed to provide liquidity to this contract\\n    /// @dev If no addresses with this role exist, all addresses can provide liquidity\\n    bytes32 public constant WHITELISTED_LP_ROLE = keccak256(\\\"WHITELISTED_LP_ROLE\\\");\\n\\n    /// @notice Admin role to restrict approval of tokens on dispatcher\\n    bytes32 public constant APPROVER_ROLE = keccak256(\\\"APPROVER_ROLE\\\");  \\n\\n    /// @notice Admin role to restrict withdrawal of funds from contract\\n    bytes32 public constant WITHDRAW_ROLE = keccak256(\\\"WITHDRAW_ROLE\\\");    \\n\\n    /// @notice Maximum ETH liquidity allowed in Dispatcher\\n    uint256 public MAX_LIQUIDITY;\\n\\n    /// @notice Total current liquidity provided to Dispatcher\\n    uint256 public totalLiquidity;\\n\\n    /// @notice Mapping of lp address to liquidity provided\\n    mapping(address => uint256) public lpBalances;\\n\\n    /// @notice modifier to restrict functions to only users that have been added as LP manager\\n    modifier onlyLPManager() {\\n        require(hasRole(MANAGE_LP_ROLE, msg.sender), \\\"Caller must have MANAGE_LP role\\\");\\n        _;\\n    }\\n\\n    /// @notice modifier to restrict functions to only users that have been added as an approver\\n    modifier onlyApprover() {\\n        require(hasRole(APPROVER_ROLE, msg.sender), \\\"Caller must have APPROVER role\\\");\\n        _;\\n    }\\n\\n    /// @notice modifier to restrict functions to only users that have been added as a withdrawer\\n    modifier onlyWithdrawer() {\\n        require(hasRole(WITHDRAW_ROLE, msg.sender), \\\"Caller must have WITHDRAW role\\\");\\n        _;\\n    }\\n\\n    /// @notice modifier to restrict functions to only users that have been whitelisted as an LP\\n    modifier onlyWhitelistedLP() {\\n        if(getRoleMemberCount(WHITELISTED_LP_ROLE) > 0) {\\n            require(hasRole(WHITELISTED_LP_ROLE, msg.sender), \\\"Caller must have WHITELISTED_LP role\\\");\\n        }\\n        _;\\n    }\\n\\n    /// @notice Max liquidity updated event\\n    event MaxLiquidityUpdated(address indexed asset, uint256 indexed newAmount, uint256 oldAmount);\\n\\n    /// @notice Liquidity Provided event\\n    event LiquidityProvided(address indexed asset, address indexed provider, uint256 amount);\\n\\n    /// @notice Liquidity removed event\\n    event LiquidityRemoved(address indexed asset, address indexed provider, uint256 amount);\\n\\n    /// @notice Initializes contract, setting up initial contract permissions\\n    /// @param _version Version number of Dispatcher\\n    /// @param _queryEngine Address of query engine contract\\n    /// @param _roleManager Address allowed to manage contract roles\\n    /// @param _lpManager Address allowed to manage LP whitelist\\n    /// @param _withdrawer Address allowed to withdraw profit from contract\\n    /// @param _trader Address allowed to make trades via this contract\\n    /// @param _supplier Address allowed to send opportunities to this contract\\n    /// @param _initialMaxLiquidity Initial max liquidity allowed in contract\\n    /// @param _lpWhitelist List of addresses that are allowed to provide liquidity to this contract\\n    constructor(\\n        uint8 _version,\\n        address _queryEngine,\\n        address _roleManager,\\n        address _lpManager,\\n        address _withdrawer,\\n        address _trader,\\n        address _supplier,\\n        uint256 _initialMaxLiquidity,\\n        address[] memory _lpWhitelist\\n    ) {\\n        version = _version;\\n        queryEngine = IQueryEngine(_queryEngine);\\n        _setupRole(MANAGE_LP_ROLE, _lpManager);\\n        _setRoleAdmin(WHITELISTED_LP_ROLE, MANAGE_LP_ROLE);\\n        _setupRole(WITHDRAW_ROLE, _withdrawer);\\n        _setupRole(TRADER_ROLE, _trader);\\n        _setupRole(APPROVER_ROLE, _supplier);\\n        _setupRole(APPROVER_ROLE, _withdrawer);\\n        _setupRole(DEFAULT_ADMIN_ROLE, _roleManager);\\n        MAX_LIQUIDITY = _initialMaxLiquidity;\\n        for(uint i; i < _lpWhitelist.length; i++) {\\n            _setupRole(WHITELISTED_LP_ROLE, _lpWhitelist[i]);\\n        }\\n    }\\n\\n    /// @notice Receive function to allow contract to accept ETH\\n    receive() external payable {}\\n    \\n    /// @notice Fallback function in case receive function is not matched\\n    fallback() external payable {}\\n\\n    /// @notice Returns true if given address is on the list of approvers\\n    /// @param addressToCheck the address to check\\n    /// @return true if address is approver\\n    function isApprover(address addressToCheck) external view returns(bool) {\\n        return hasRole(APPROVER_ROLE, addressToCheck);\\n    }\\n\\n    /// @notice Returns true if given address is on the list of approved withdrawers\\n    /// @param addressToCheck the address to check\\n    /// @return true if address is withdrawer\\n    function isWithdrawer(address addressToCheck) external view returns(bool) {\\n        return hasRole(WITHDRAW_ROLE, addressToCheck);\\n    }\\n\\n    /// @notice Returns true if given address is on the list of LP managers\\n    /// @param addressToCheck the address to check\\n    /// @return true if address is LP manager\\n    function isLPManager(address addressToCheck) external view returns(bool) {\\n        return hasRole(MANAGE_LP_ROLE, addressToCheck);\\n    }\\n\\n    /// @notice Returns true if given address is on the list of whitelisted LPs\\n    /// @param addressToCheck the address to check\\n    /// @return true if address is whitelisted\\n    function isWhitelistedLP(address addressToCheck) external view returns(bool) {\\n        return hasRole(WHITELISTED_LP_ROLE, addressToCheck);\\n    }\\n\\n    /// @notice Set approvals for external addresses to use Dispatcher contract tokens\\n    /// @param tokensToApprove the tokens to approve\\n    /// @param spender the address to allow spending of token\\n    function tokenAllowAll(\\n        address[] memory tokensToApprove, \\n        address spender\\n    ) external onlyApprover {\\n        for(uint i = 0; i < tokensToApprove.length; i++) {\\n            IERC20 token = IERC20(tokensToApprove[i]);\\n            if (token.allowance(address(this), spender) != uint256(-1)) {\\n                token.safeApprove(spender, uint256(-1));\\n            }\\n        }\\n    }\\n\\n    /// @notice Set approvals for external addresses to use Dispatcher contract tokens\\n    /// @param tokensToApprove the tokens to approve\\n    /// @param approvalAmounts the token approval amounts\\n    /// @param spender the address to allow spending of token\\n    function tokenAllow(\\n        address[] memory tokensToApprove, \\n        uint256[] memory approvalAmounts, \\n        address spender\\n    ) external onlyApprover {\\n        require(tokensToApprove.length == approvalAmounts.length, \\\"not same length\\\");\\n        for(uint i = 0; i < tokensToApprove.length; i++) {\\n            IERC20 token = IERC20(tokensToApprove[i]);\\n            if (token.allowance(address(this), spender) != uint256(-1)) {\\n                token.safeApprove(spender, approvalAmounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Rescue (withdraw) tokens from the smart contract\\n    /// @param tokens the tokens to withdraw\\n    /// @param amount the amount of each token to withdraw.  If zero, withdraws the maximum allowed amount for each token\\n    function rescueTokens(address[] calldata tokens, uint256 amount) external onlyWithdrawer {\\n        for (uint i = 0; i < tokens.length; i++) {\\n            IERC20 token = IERC20(tokens[i]);\\n            uint256 withdrawalAmount;\\n            uint256 tokenBalance = token.balanceOf(address(this));\\n            uint256 tokenAllowance = token.allowance(address(this), msg.sender);\\n            if (amount == 0) {\\n                if (tokenBalance > tokenAllowance) {\\n                    withdrawalAmount = tokenAllowance;\\n                } else {\\n                    withdrawalAmount = tokenBalance;\\n                }\\n            } else {\\n                require(tokenBalance >= amount, \\\"Contract balance too low\\\");\\n                require(tokenAllowance >= amount, \\\"Increase token allowance\\\");\\n                withdrawalAmount = amount;\\n            }\\n            token.safeTransferFrom(address(this), msg.sender, withdrawalAmount);\\n        }\\n    }\\n\\n    /// @notice Set max ETH liquidity to accept for this contract\\n    /// @param newMax new max ETH liquidity\\n    function setMaxETHLiquidity(uint256 newMax) external onlyLPManager {\\n        emit MaxLiquidityUpdated(address(0), newMax, MAX_LIQUIDITY);\\n        MAX_LIQUIDITY = newMax;\\n    }\\n\\n    /// @notice Provide ETH liquidity to Dispatcher\\n    function provideETHLiquidity() external payable onlyWhitelistedLP {\\n        require(totalLiquidity.add(msg.value) <= MAX_LIQUIDITY, \\\"amount exceeds max liquidity\\\");\\n        totalLiquidity = totalLiquidity.add(msg.value);\\n        lpBalances[msg.sender] = lpBalances[msg.sender].add(msg.value);\\n        emit LiquidityProvided(address(0), msg.sender, msg.value);\\n    }\\n\\n    /// @notice Remove ETH liquidity from Dispatcher\\n    /// @param amount amount of liquidity to remove\\n    function removeETHLiquidity(uint256 amount) external {\\n        require(lpBalances[msg.sender] >= amount, \\\"amount exceeds liquidity provided\\\");\\n        require(totalLiquidity.sub(amount) >= 0, \\\"amount exceeds total liquidity\\\");\\n        require(address(this).balance.sub(amount) >= 0, \\\"amount exceeds contract balance\\\");\\n        lpBalances[msg.sender] = lpBalances[msg.sender].sub(amount);\\n        totalLiquidity = totalLiquidity.sub(amount);\\n        (bool success, ) = msg.sender.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Could not withdraw ETH\\\");\\n        emit LiquidityRemoved(address(0), msg.sender, amount);\\n    }\\n\\n    /// @notice Withdraw ETH from the smart contract\\n    /// @param amount the amount of ETH to withdraw.  If zero, withdraws the maximum allowed amount.\\n    function withdrawEth(uint256 amount) external onlyWithdrawer {\\n        uint256 withdrawalAmount;\\n        uint256 withdrawableBalance = address(this).balance.sub(totalLiquidity);\\n        if (amount == 0) {\\n            withdrawalAmount = withdrawableBalance;\\n        } else {\\n            require(withdrawableBalance >= amount, \\\"amount exceeds withdrawable balance\\\");\\n            withdrawalAmount = amount;\\n        }\\n        (bool success, ) = msg.sender.call{value: withdrawalAmount}(\\\"\\\");\\n        require(success, \\\"Could not withdraw ETH\\\");\\n    }\\n\\n    /// @notice A non-view function to help estimate the cost of a given query in practice\\n    /// @param script the compiled bytecode for the series of function calls to get the final price\\n    /// @param inputLocations index locations within the script to insert input amounts dynamically\\n    function estimateQueryCost(bytes memory script, uint256[] memory inputLocations) public {\\n        queryEngine.queryAllPrices(script, inputLocations);\\n    }\\n}\",\"keccak256\":\"0x5aae4e6af72d36dd5bda35ebd15266b7c5ca70ac927e3e2d2a402a65b889b5ec\",\"license\":\"MIT\"},\"contracts/DispatcherFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/AccessControl.sol\\\";\\nimport \\\"./Dispatcher.sol\\\";\\n\\n/**\\n * @title DispatcherFactory\\n * @dev Creates and keeps track of Dispatchers on the network\\n */\\ncontract DispatcherFactory is AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /// @notice Version number of Dispatcher Factory\\n    uint8 public version = 2;\\n\\n    /// @notice Admin role to create new Dispatchers\\n    bytes32 public constant DISPATCHER_ADMIN_ROLE = keccak256(\\\"DISPATCHER_ADMIN_ROLE\\\");\\n\\n    /// @dev Record of all Dispatchers\\n    EnumerableSet.AddressSet private dispatchersSet;\\n\\n    /// @notice Create new Dispatcher event\\n    event DispatcherCreated(\\n        address indexed dispatcher,\\n        uint8 indexed version, \\n        address queryEngine,\\n        address roleManager,\\n        address lpManager,\\n        address withdrawer,\\n        address trader,\\n        address supplier,\\n        uint256 initialMaxLiquidity,\\n        bool lpWhitelist\\n    );\\n\\n    /// @notice Add existing Dispatcher event\\n    event DispatcherAdded(address indexed dispatcher);\\n\\n    /// @notice Remove existing Dispatcher event\\n    event DispatcherRemoved(address indexed dispatcher);\\n\\n    /// @notice modifier to restrict createNewDispatcher function\\n    modifier onlyAdmin() {\\n        require(hasRole(DISPATCHER_ADMIN_ROLE, msg.sender), \\\"Caller must have DISPATCHER_ADMIN role\\\");\\n        _;\\n    }\\n\\n    /// @notice Initializes contract, setting admin\\n    /// @param _roleAdmin admin in control of roles\\n    /// @param _dispatcherAdmin admin that can create new Dispatchers\\n    constructor(\\n        address _roleAdmin,\\n        address _dispatcherAdmin\\n    ) {\\n        _setupRole(DISPATCHER_ADMIN_ROLE, _dispatcherAdmin);\\n        _setupRole(DEFAULT_ADMIN_ROLE, _roleAdmin);\\n    }\\n\\n    /// @notice Create new Dispatcher contract\\n    /// @param queryEngine Address of query engine contract\\n    /// @param roleManager Address allowed to manage contract roles\\n    /// @param lpManager Address allowed to manage LP whitelist\\n    /// @param withdrawer Address allowed to withdraw profit from contract\\n    /// @param trader Address allowed to make trades via this contract\\n    /// @param supplier Address allowed to supply opportunities to contract\\n    /// @param initialMaxLiquidity Initial max liquidity allowed in contract\\n    /// @param lpWhitelist List of addresses that are allowed to provide liquidity to this contract\\n    /// @return dispatcher Address of new Dispatcher contract\\n    function createNewDispatcher(\\n        address queryEngine,\\n        address roleManager,\\n        address lpManager,\\n        address withdrawer,\\n        address trader,\\n        address supplier,\\n        uint256 initialMaxLiquidity,\\n        address[] memory lpWhitelist\\n    ) external onlyAdmin returns (\\n        address dispatcher\\n    ) {\\n        Dispatcher newDispatcher = new Dispatcher(\\n            version,\\n            queryEngine,\\n            roleManager,\\n            lpManager,\\n            withdrawer,\\n            trader,\\n            supplier,\\n            initialMaxLiquidity,\\n            lpWhitelist\\n        );\\n\\n        dispatcher = address(newDispatcher);\\n        dispatchersSet.add(dispatcher);\\n\\n        emit DispatcherCreated(\\n            dispatcher,\\n            version,\\n            queryEngine,\\n            roleManager,\\n            lpManager,\\n            withdrawer,\\n            trader,\\n            supplier,\\n            initialMaxLiquidity,\\n            lpWhitelist.length > 0 ? true : false\\n        );\\n    }\\n\\n    /**\\n     * @notice Admin function to allow addition of dispatchers created via other Dispatcher Factories\\n     * @param dispatcherContracts Array of dispatcher contract addresses\\n     */\\n    function addDispatchers(address[] memory dispatcherContracts) external onlyAdmin {\\n        for(uint i = 0; i < dispatcherContracts.length; i++) {\\n            dispatchersSet.add(dispatcherContracts[i]);\\n            emit DispatcherAdded(dispatcherContracts[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Admin function to allow removal of dispatchers from Dispatcher set\\n     * @param dispatcherContracts Dispatcher contract addresses\\n     */\\n    function removeDispatchers(address[] memory dispatcherContracts) external onlyAdmin {\\n        for(uint i = 0; i < dispatcherContracts.length; i++) {\\n            dispatchersSet.remove(dispatcherContracts[i]);\\n            emit DispatcherRemoved(dispatcherContracts[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Return list of Dispatcher contracts this factory indexes\\n     * @return Array of Dispatcher addresses\\n     */\\n    function dispatchers() external view returns (address[] memory) {\\n        uint256 dispatchersLength = dispatchersSet.length();\\n        address[] memory dispatchersArray = new address[](dispatchersLength);\\n        for(uint i = 0; i < dispatchersLength; i++) {\\n            dispatchersArray[i] = dispatchersSet.at(i);\\n        }\\n        return dispatchersArray;\\n    }\\n\\n    /**\\n     * @notice Determine whether this factory is indexing a Dispatcher at the provided address\\n     * @param dispatcherContract Dispatcher address\\n     * @return true if Dispatcher is indexed \\n     */\\n    function exists(address dispatcherContract) external view returns (bool) {\\n        return dispatchersSet.contains(dispatcherContract);\\n    }\\n\\n    /**\\n     * @notice Returns the number of Dispatchers indexed by this factory\\n     * @return number of Dispatchers indexed \\n     */\\n    function numDispatchers() external view returns (uint256) {\\n        return dispatchersSet.length();\\n    }\\n}\",\"keccak256\":\"0x4dd35ceff47c740cf6ad59fbe11fa67634a7e5452d36dd93efc32c2e420c0d02\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x077c1c7b2001eab9f0cb3b7cee53577b39305495db8cba923f92420af9a4099a\",\"license\":\"MIT\"},\"contracts/interfaces/IQueryEngine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IQueryEngine {\\n    function getPrice(address contractAddress, bytes memory data) external view returns (bytes memory);\\n    function queryAllPrices(bytes memory script, uint256[] memory inputLocations) external view returns (bytes memory);\\n    function query(bytes memory script, uint256[] memory inputLocations) external view returns (uint256);\\n}\",\"keccak256\":\"0x582a8bd7cf501ccc1d9c7b6a7266df1986afff33e24e4867b1884bdba137402b\",\"license\":\"MIT\"},\"contracts/lib/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\",\"keccak256\":\"0x0bf67f0847f39a0dfb909b4b68d8273f67739f68e5c44c04418156f6d8a11ea1\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0x8fd765afd2c7c5836c65f999138537e2c5460687c68d795128ec20dc73bf2923\",\"license\":\"MIT\"},\"contracts/lib/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity ^0.7.0;\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_bytes.length >= (_start + _length), \\\"Read out of bounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= (_start + 20), \\\"Read out of bounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= (_start + 1), \\\"Read out of bounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= (_start + 2), \\\"Read out of bounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= (_start + 4), \\\"Read out of bounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= (_start + 8), \\\"Read out of bounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= (_start + 12), \\\"Read out of bounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= (_start + 16), \\\"Read out of bounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= (_start + 32), \\\"Read out of bounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= (_start + 32), \\\"Read out of bounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\",\"keccak256\":\"0x6d70ec583c608b94cdb17170dfb447d5df4a657410c1c3f36c885fa71ee7ec39\",\"license\":\"Unlicense\"},\"contracts/lib/CalldataEditor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./BytesLib.sol\\\";\\n\\nabstract contract CalldataEditor {\\n    using BytesLib for bytes;\\n\\n    /// @notice Returns uint from chunk of the bytecode\\n    /// @param data the compiled bytecode for the series of function calls\\n    /// @param location the current 'cursor' location within the bytecode\\n    /// @return result uint\\n    function uint256At(bytes memory data, uint256 location) pure internal returns (uint256 result) {\\n        assembly {\\n            result := mload(add(data, add(0x20, location)))\\n        }\\n    }\\n\\n    /// @notice Returns address from chunk of the bytecode\\n    /// @param data the compiled bytecode for the series of function calls\\n    /// @param location the current 'cursor' location within the bytecode\\n    /// @return result address\\n    function addressAt(bytes memory data, uint256 location) pure internal returns (address result) {\\n        uint256 word = uint256At(data, location);\\n        assembly {\\n            result := div(and(word, 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000),\\n                          0x1000000000000000000000000)\\n        }\\n    }\\n\\n    /// @notice Returns the start of the calldata within a chunk of the bytecode\\n    /// @param data the compiled bytecode for the series of function calls\\n    /// @param location the current 'cursor' location within the bytecode\\n    /// @return result pointer to start of calldata\\n    function locationOf(bytes memory data, uint256 location) pure internal returns (uint256 result) {\\n        assembly {\\n            result := add(data, add(0x20, location))\\n        }\\n    }\\n    \\n    /// @notice Replace the bytes at the index location in original with new bytes\\n    /// @param original original bytes\\n    /// @param newBytes new bytes to replace in original\\n    /// @param location the index within the original bytes where to make the replacement\\n    function replaceDataAt(bytes memory original, bytes memory newBytes, uint256 location) pure internal {\\n        assembly {\\n            mstore(add(add(original, location), 0x20), mload(add(newBytes, 0x20)))\\n        }\\n    }\\n\\n    /// @dev Get the revert message from a call\\n    /// @notice This is needed in order to get the human-readable revert message from a call\\n    /// @param res Response of the call\\n    /// @return Revert message string\\n    function getRevertMsg(bytes memory res) internal pure returns (string memory) {\\n        // If the res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (res.length < 68) return 'Call failed for unknown reason';\\n        bytes memory revertData = res.slice(4, res.length - 4); // Remove the selector which is the first 4 bytes\\n        return abi.decode(revertData, (string)); // All that remains is the revert string\\n    }\\n}\",\"keccak256\":\"0xd9dd639cf35c8a7457a1fc126da4801f5ff79ce3267e1f46121b11516ae27265\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0xd3e88da8695a1d63936f7bbf3b3441056c44d167e679a80f9a1b5ffafb11fad9\",\"license\":\"MIT\"},\"contracts/lib/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\",\"keccak256\":\"0x2b5126d431b44bc6e25a43305eb23b6d093eb2e7923a8d304db425bbb398efce\",\"license\":\"MIT\"},\"contracts/lib/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\",\"keccak256\":\"0x3318ee67bfc251e74ac8ac1a97061fdaed4f5355fd9c23eb26e1ee1550f675bd\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0xf5c6f7a4e202733b9bea8dc0c4be4bc16f765c08079418eb426ad490d9f4142e\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x961855901713e710c05dd67f9a01e501a54e82e68a526fe3662e228c27f788d9\",\"license\":\"MIT\"},\"contracts/lib/Trader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"../interfaces/IQueryEngine.sol\\\";\\n\\nimport \\\"./BytesLib.sol\\\";\\nimport \\\"./CalldataEditor.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\n\\nabstract contract Trader is ReentrancyGuard, AccessControl, CalldataEditor {\\n    using BytesLib for bytes;\\n\\n    /// @notice Query contract\\n    IQueryEngine public queryEngine;\\n\\n    /// @notice Trader role to restrict functions to set list of approved traders\\n    bytes32 public constant TRADER_ROLE = keccak256(\\\"TRADER_ROLE\\\");\\n\\n    /// @notice modifier to restrict functions to only users that have been added as a trader\\n    modifier onlyTrader() {\\n        require(hasRole(TRADER_ROLE, msg.sender), \\\"Trader must have TRADER role\\\");\\n        _;\\n    }\\n\\n    /// @notice All trades must be profitable\\n    modifier mustBeProfitable(uint256 ethRequested) {\\n        uint256 contractBalanceBefore = address(this).balance;\\n        require(contractBalanceBefore >= ethRequested, \\\"Not enough ETH in contract\\\");\\n        _;\\n        require(address(this).balance >= contractBalanceBefore, \\\"missing ETH\\\");\\n    }\\n\\n    /// @notice Trades must not be expired\\n    modifier notExpired(uint256 deadlineBlock) {\\n        require(deadlineBlock >= block.number, \\\"trade expired\\\");\\n        _;\\n    }\\n\\n    /// @notice Trades must be executed within time window\\n    modifier onTime(uint256 minTimestamp, uint256 maxTimestamp) {\\n        require(maxTimestamp >= block.timestamp, \\\"trade too late\\\");\\n        require(minTimestamp <= block.timestamp, \\\"trade too early\\\");\\n        _;\\n    }\\n\\n    /// @notice Returns true if given address is on the list of approved traders\\n    /// @param addressToCheck the address to check\\n    /// @return true if address is trader\\n    function isTrader(address addressToCheck) external view returns (bool) {\\n        return hasRole(TRADER_ROLE, addressToCheck);\\n    }\\n\\n    /// @notice Makes a series of trades as single transaction if profitable without query\\n    /// @param executeScript the compiled bytecode for the series of function calls to execute the trade\\n    /// @param ethValue the amount of ETH to send with initial contract call\\n    function makeTrade(\\n        bytes memory executeScript,\\n        uint256 ethValue\\n    ) public onlyTrader nonReentrant mustBeProfitable(ethValue) {\\n        execute(executeScript, ethValue);\\n    }\\n\\n    /// @notice Makes a series of trades as single transaction if profitable without query + block deadline\\n    /// @param executeScript the compiled bytecode for the series of function calls to execute the trade\\n    /// @param ethValue the amount of ETH to send with initial contract call\\n    /// @param blockDeadline block number when trade expires\\n    function makeTrade(\\n        bytes memory executeScript,\\n        uint256 ethValue,\\n        uint256 blockDeadline\\n    ) public onlyTrader nonReentrant notExpired(blockDeadline) mustBeProfitable(ethValue) {\\n        execute(executeScript, ethValue);\\n    }\\n\\n    /// @notice Makes a series of trades as single transaction if profitable without query + within time window specified\\n    /// @param executeScript the compiled bytecode for the series of function calls to execute the trade\\n    /// @param ethValue the amount of ETH to send with initial contract call\\n    /// @param minTimestamp minimum block timestamp to execute trade\\n    /// @param maxTimestamp maximum timestamp to execute trade\\n    function makeTrade(\\n        bytes memory executeScript,\\n        uint256 ethValue,\\n        uint256 minTimestamp,\\n        uint256 maxTimestamp\\n    ) public onlyTrader nonReentrant onTime(minTimestamp, maxTimestamp) mustBeProfitable(ethValue) {\\n        execute(executeScript, ethValue);\\n    }\\n\\n    /// @notice Makes a series of trades as single transaction if profitable\\n    /// @param queryScript the compiled bytecode for the series of function calls to get the final price\\n    /// @param queryInputLocations index locations within the queryScript to insert input amounts dynamically\\n    /// @param executeScript the compiled bytecode for the series of function calls to execute the trade\\n    /// @param executeInputLocations index locations within the executeScript to insert input amounts dynamically\\n    /// @param targetPrice profit target for this trade, if ETH>ETH, this should be ethValue + gas estimate * gas price\\n    /// @param ethValue the amount of ETH to send with initial contract call\\n    function makeTrade(\\n        bytes memory queryScript,\\n        uint256[] memory queryInputLocations,\\n        bytes memory executeScript,\\n        uint256[] memory executeInputLocations,\\n        uint256 targetPrice,\\n        uint256 ethValue\\n    ) public onlyTrader nonReentrant mustBeProfitable(ethValue) {\\n        bytes memory prices = queryEngine.queryAllPrices(queryScript, queryInputLocations);\\n        require(prices.toUint256(prices.length - 32) >= targetPrice, \\\"Not profitable\\\");\\n        for(uint i = 0; i < executeInputLocations.length; i++) {\\n            replaceDataAt(executeScript, prices.slice(i*32, 32), executeInputLocations[i]);\\n        }\\n        execute(executeScript, ethValue);\\n    }\\n\\n    /// @notice Makes a series of trades as single transaction if profitable + block deadline\\n    /// @param queryScript the compiled bytecode for the series of function calls to get the final price\\n    /// @param queryInputLocations index locations within the queryScript to insert input amounts dynamically\\n    /// @param executeScript the compiled bytecode for the series of function calls to execute the trade\\n    /// @param executeInputLocations index locations within the executeScript to insert input amounts dynamically\\n    /// @param targetPrice profit target for this trade, if ETH>ETH, this should be ethValue + gas estimate * gas price\\n    /// @param ethValue the amount of ETH to send with initial contract call\\n    /// @param blockDeadline block number when trade expires\\n    function makeTrade(\\n        bytes memory queryScript,\\n        uint256[] memory queryInputLocations,\\n        bytes memory executeScript,\\n        uint256[] memory executeInputLocations,\\n        uint256 targetPrice,\\n        uint256 ethValue,\\n        uint256 blockDeadline\\n    ) public onlyTrader nonReentrant notExpired(blockDeadline) mustBeProfitable(ethValue) {\\n        bytes memory prices = queryEngine.queryAllPrices(queryScript, queryInputLocations);\\n        require(prices.toUint256(prices.length - 32) >= targetPrice, \\\"Not profitable\\\");\\n        for(uint i = 0; i < executeInputLocations.length; i++) {\\n            replaceDataAt(executeScript, prices.slice(i*32, 32), executeInputLocations[i]);\\n        }\\n        execute(executeScript, ethValue);\\n    }\\n\\n    /// @notice Makes a series of trades as single transaction if profitable + within time window specified\\n    /// @param queryScript the compiled bytecode for the series of function calls to get the final price\\n    /// @param queryInputLocations index locations within the queryScript to insert input amounts dynamically\\n    /// @param executeScript the compiled bytecode for the series of function calls to execute the trade\\n    /// @param executeInputLocations index locations within the executeScript to insert input amounts dynamically\\n    /// @param targetPrice profit target for this trade, if ETH>ETH, this should be ethValue + gas estimate * gas price\\n    /// @param ethValue the amount of ETH to send with initial contract call\\n    /// @param minTimestamp minimum block timestamp to execute trade\\n    /// @param maxTimestamp maximum timestamp to execute trade\\n    function makeTrade(\\n        bytes memory queryScript,\\n        uint256[] memory queryInputLocations,\\n        bytes memory executeScript,\\n        uint256[] memory executeInputLocations,\\n        uint256 targetPrice,\\n        uint256 ethValue,\\n        uint256 minTimestamp,\\n        uint256 maxTimestamp\\n    ) public onlyTrader nonReentrant onTime(minTimestamp, maxTimestamp) mustBeProfitable(ethValue) {\\n        bytes memory prices = queryEngine.queryAllPrices(queryScript, queryInputLocations);\\n        require(prices.toUint256(prices.length - 32) >= targetPrice, \\\"Not profitable\\\");\\n        for(uint i = 0; i < executeInputLocations.length; i++) {\\n            replaceDataAt(executeScript, prices.slice(i*32, 32), executeInputLocations[i]);\\n        }\\n        execute(executeScript, ethValue);\\n    }\\n\\n    /// @notice Executes series of function calls as single transaction\\n    /// @param script the compiled bytecode for the series of function calls to invoke\\n    /// @param ethValue the amount of ETH to send with initial contract call\\n    function execute(bytes memory script, uint256 ethValue) internal {\\n        // sequentially call contract methods\\n        uint256 location = 0;\\n        while (location < script.length) {\\n            address contractAddress = addressAt(script, location);\\n            uint256 calldataLength = uint256At(script, location + 0x14);\\n            uint256 calldataStart = location + 0x14 + 0x20;\\n            bytes memory callData = script.slice(calldataStart, calldataLength);\\n            if(location == 0) {\\n                callMethod(contractAddress, callData, ethValue);\\n            }\\n            else {\\n                callMethod(contractAddress, callData, 0);\\n            }\\n            location += (0x14 + 0x20 + calldataLength);\\n        }\\n    }\\n\\n    /// @notice Calls the supplied calldata using the supplied contract address\\n    /// @param contractToCall the contract to call\\n    /// @param data the call data to execute\\n    /// @param ethValue the amount of ETH to send with initial contract call\\n    function callMethod(address contractToCall, bytes memory data, uint256 ethValue) internal {\\n        bool success;\\n        bytes memory returnData;\\n        address payable contractAddress = payable(contractToCall);\\n        if(ethValue > 0) {\\n            (success, returnData) = contractAddress.call{value: ethValue}(data);\\n        } else {\\n            (success, returnData) = contractAddress.call(data);\\n        }\\n        if (!success) {\\n            string memory revertMsg = getRevertMsg(returnData);\\n            revert(revertMsg);\\n        }\\n    }\\n}\",\"keccak256\":\"0x4ae813d98a8a20d19cb49f3c9578938642a2ce11d2c7ee449f83e67594da6283\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526001805460ff191660021790553480156200001e57600080fd5b506040516200533a3803806200533a8339810160408190526200004191620001b3565b6200006d7faa1af34341297dfbc4dfe694fa8bb873bcaf9528e24c7336ae6bfc3f79ddeddb8262000082565b6200007a60008362000082565b5050620001ea565b6200008e828262000092565b5050565b600082815260208181526040909120620000b7918390620007ef6200010b821b17901c565b156200008e57620000c76200012b565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600062000122836001600160a01b0384166200012f565b90505b92915050565b3390565b60006200013d83836200017e565b620001755750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000125565b50600062000125565b60009081526001919091016020526040902054151590565b80516001600160a01b0381168114620001ae57600080fd5b919050565b60008060408385031215620001c6578182fd5b620001d18362000196565b9150620001e16020840162000196565b90509250929050565b61514080620001fa6000396000f3fe60806040523480156200001157600080fd5b5060043610620001185760003560e01c8063a217fddf11620000a5578063e70850c2116200006f578063e70850c21462000251578063e9a75151146200025b578063f31306b21462000272578063f6a3d24e146200028b5762000118565b8063a217fddf1462000202578063ca15c873146200020c578063d547741f1462000223578063d85e785d146200023a5762000118565b806354fd4d5011620000e757806354fd4d5014620001935780639010d07c14620001ac57806391d1485414620001d25780639ce3ec3d14620001f85762000118565b8063248a9ca3146200011d5780632f2ff15d146200014c57806336568abe14620001655780634363b012146200017c575b600080fd5b620001346200012e36600462000ca6565b620002a2565b60405162000143919062000dd4565b60405180910390f35b620001636200015d36600462000cbf565b620002ba565b005b620001636200017636600462000cbf565b62000328565b620001636200018d36600462000c67565b6200038f565b6200019d6200045d565b60405162000143919062000e23565b620001c3620001bd36600462000ced565b62000466565b60405162000143919062000d54565b620001e9620001e336600462000cbf565b62000489565b60405162000143919062000dc9565b62000134620004a3565b62000134620004b6565b620001346200021d36600462000ca6565b620004bb565b620001636200023436600462000cbf565b620004d4565b620001636200024b36600462000c67565b62000532565b62000134620005f7565b620001c36200026c36600462000bae565b6200060a565b6200027c62000738565b60405162000143919062000db4565b620001e96200029c36600462000b91565b620007e0565b6000818152602081905260409020600201545b919050565b600082815260208190526040902060020154620002db90620001e362000806565b620003185760405162461bcd60e51b815260040180806020018281038252602f8152602001806200507d602f913960400191505060405180910390fd5b6200032482826200080a565b5050565b6200033262000806565b6001600160a01b0316816001600160a01b031614620003835760405162461bcd60e51b815260040180806020018281038252602f815260200180620050dc602f913960400191505060405180910390fd5b62000324828262000878565b620003aa6000805160206200503b8339815191523362000489565b620003d25760405162461bcd60e51b8152600401620003c99062000ddd565b60405180910390fd5b60005b8151811015620003245762000409828281518110620003f057fe5b60200260200101516002620007ef90919063ffffffff16565b508181815181106200041757fe5b60200260200101516001600160a01b03167f9e69d1ca026e9c4abd5386883d3283629530e9fb7defea1b2942931c07475d7e60405160405180910390a2600101620003d5565b60015460ff1681565b6000828152602081905260408120620004809083620008e6565b90505b92915050565b6000828152602081905260408120620004809083620008f4565b6000805160206200503b83398151915281565b600081565b600081815260208190526040812062000483906200090b565b600082815260208190526040902060020154620004f590620001e362000806565b620003835760405162461bcd60e51b8152600401808060200182810382526030815260200180620050ac6030913960400191505060405180910390fd5b6200054d6000805160206200503b8339815191523362000489565b6200056c5760405162461bcd60e51b8152600401620003c99062000ddd565b60005b81518110156200032457620005a38282815181106200058a57fe5b602002602001015160026200091890919063ffffffff16565b50818181518110620005b157fe5b60200260200101516001600160a01b03167f53862eaed5a7ee88d1f67ec39296eb98d641bd5d0dbf8cdc77bccf42be146d7960405160405180910390a26001016200056f565b60006200060560026200090b565b905090565b6000620006276000805160206200503b8339815191523362000489565b620006465760405162461bcd60e51b8152600401620003c99062000ddd565b6000600160009054906101000a900460ff168a8a8a8a8a8a8a8a6040516200066e9062000acd565b620006829998979695949392919062000e31565b604051809103906000f0801580156200069f573d6000803e3d6000fd5b509150819050620006b2600282620007ef565b50600160009054906101000a900460ff1660ff16826001600160a01b03167f9a63203234614199a0bc755131a988e0dbed1944eec7ef17037d48f11a0f2bd78c8c8c8c8c8c8c60008d51116200070a5760006200070d565b60015b6040516200072398979695949392919062000d68565b60405180910390a35098975050505050505050565b606060006200074860026200090b565b905060608167ffffffffffffffff811180156200076457600080fd5b506040519080825280602002602001820160405280156200078f578160200160208202803683370190505b50905060005b82811015620007d957620007ab600282620008e6565b828281518110620007b857fe5b6001600160a01b039092166020928302919091019091015260010162000795565b5091505090565b600062000483600283620008f4565b600062000480836001600160a01b0384166200092f565b3390565b6000828152602081905260409020620008249082620007ef565b1562000324576200083462000806565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260208190526040902062000892908262000918565b156200032457620008a262000806565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60006200048083836200097e565b600062000480836001600160a01b038416620009e5565b60006200048382620009fd565b600062000480836001600160a01b03841662000a01565b60006200093d8383620009e5565b620009755750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000483565b50600062000483565b81546000908210620009c25760405162461bcd60e51b81526004018080602001828103825260228152602001806200505b6022913960400191505060405180910390fd5b826000018281548110620009d257fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b6000818152600183016020526040812054801562000ac2578354600019808301919081019060009087908390811062000a3657fe5b906000526020600020015490508087600001848154811062000a5457fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908062000a8557fe5b6001900381819060005260206000200160009055905586600101600087815260200190815260200160002060009055600194505050505062000483565b600091505062000483565b6141998062000ea283390190565b80356001600160a01b0381168114620002b557600080fd5b600082601f83011262000b04578081fd5b813567ffffffffffffffff8082111562000b1a57fe5b60208083026040518282820101818110858211171562000b3657fe5b60405284815294508185019250858201818701830188101562000b5857600080fd5b600091505b8482101562000b865762000b718162000adb565b84529282019260019190910190820162000b5d565b505050505092915050565b60006020828403121562000ba3578081fd5b620004808262000adb565b600080600080600080600080610100898b03121562000bcb578384fd5b62000bd68962000adb565b975062000be660208a0162000adb565b965062000bf660408a0162000adb565b955062000c0660608a0162000adb565b945062000c1660808a0162000adb565b935062000c2660a08a0162000adb565b925060c0890135915060e089013567ffffffffffffffff81111562000c49578182fd5b62000c578b828c0162000af3565b9150509295985092959890939650565b60006020828403121562000c79578081fd5b813567ffffffffffffffff81111562000c90578182fd5b62000c9e8482850162000af3565b949350505050565b60006020828403121562000cb8578081fd5b5035919050565b6000806040838503121562000cd2578182fd5b8235915062000ce46020840162000adb565b90509250929050565b6000806040838503121562000d00578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b8381101562000d495781516001600160a01b03168752958201959082019060010162000d22565b509495945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b039889168152968816602088015294871660408701529286166060860152908516608085015290931660a083015260c082019290925290151560e08201526101000190565b60006020825262000480602083018462000d0f565b901515815260200190565b90815260200190565b60208082526026908201527f43616c6c6572206d757374206861766520444953504154434845525f41444d496040820152654e20726f6c6560d01b606082015260800190565b60ff91909116815260200190565b60ff8a1681526001600160a01b03898116602083015288811660408301528781166060830152868116608083015285811660a0830152841660c082015260e08101839052610120610100820181905260009062000e918382018562000d0f565b9c9b50505050505050505050505056fe60806040523480156200001157600080fd5b50604051620041993803806200419983398101604081905262000034916200032b565b60016000556002805460ff60a01b1916600160a01b60ff8c1602176001600160a01b0319166001600160a01b038a16179055620000816000805160206200417983398151915287620001a6565b620000ab6000805160206200415983398151915260008051602062004179833981519152620001b6565b620000d77f5d8e12c39142ff96d79d04d15d1ba1269e4fe57bb9d26f43523628b34ba108ec86620001a6565b620001037ffacaf2747a7486cf5730e9265973fb54447d3ace6e7e4711f6360826b073194185620001a6565b6200011e6000805160206200413983398151915284620001a6565b620001396000805160206200413983398151915286620001a6565b62000146600088620001a6565b600382905560005b815181101562000196576200018d600080516020620041598339815191528383815181106200017957fe5b6020026020010151620001a660201b60201c565b6001016200014e565b5050505050505050505062000487565b620001b2828262000208565b5050565b600082815260016020526040808220600201549051839285917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a460009182526001602052604090912060020155565b60008281526001602090815260409091206200022f9183906200229862000283821b17901c565b15620001b2576200023f620002a3565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006200029a836001600160a01b038416620002a7565b90505b92915050565b3390565b6000620002b58383620002f6565b620002ed575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200029d565b5060006200029d565b60009081526001919091016020526040902054151590565b80516001600160a01b03811681146200032657600080fd5b919050565b60008060008060008060008060006101208a8c0312156200034a578485fd5b895160ff811681146200035b578586fd5b98506200036b60208b016200030e565b97506200037b60408b016200030e565b96506200038b60608b016200030e565b95506200039b60808b016200030e565b9450620003ab60a08b016200030e565b9350620003bb60c08b016200030e565b60e08b01516101008c015191945092506001600160401b0380821115620003e0578283fd5b818c0191508c601f830112620003f4578283fd5b8151818111156200040157fe5b604051602080830282010181811084821117156200041b57fe5b8060405250809250818152602081019250602084018f6020808502870101111562000444578586fd5b8594505b8285101562000472576200045c816200030e565b8452600194909401936020938401930162000448565b50809450505050509295985092959850929598565b613ca280620004976000396000f3fe60806040526004361061021e5760003560e01c806376e821cf11610123578063c311d049116100ab578063e02023a11161006f578063e02023a1146105f4578063e7abbb2214610609578063ec38857614610629578063ecd1878f14610649578063f0a56fc81461066957610225565b8063c311d04914610554578063ca15c87314610574578063cc6febdf14610594578063d547741f146105b4578063d99125ee146105d457610225565b806391d14854116100f257806391d14854146104e257806397ff5fb614610502578063a217fddf14610517578063ac19e8981461052c578063c2d4f8c01461053457610225565b806376e821cf1461046057806379f645f0146104755780639004e5c5146104955780639010d07c146104b557610225565b806341650279116101a657806366f4deca1161017557806366f4deca146103cb57806368285acd146103eb5780636880608f1461040b5780636d218e481461042b578063717f8df01461044b57610225565b806341650279146103545780634245962b14610374578063509f1fc11461038957806354fd4d50146103a957610225565b8063248a9ca3116101ed578063248a9ca3146102a75780632f2ff15d146102c757806336568abe146102e75780633dee3601146103075780634039ad0d1461032757610225565b80630b65092d14610227578063148e250d1461025d57806315770f9214610272578063189165131461028757610225565b3661022557005b005b34801561023357600080fd5b50610247610242366004613072565b61067e565b6040516102549190613660565b60405180910390f35b34801561026957600080fd5b50610247610690565b34801561027e57600080fd5b50610247610696565b34801561029357600080fd5b506102256102a236600461308c565b61069c565b3480156102b357600080fd5b506102476102c23660046131bb565b610899565b3480156102d357600080fd5b506102256102e23660046131d3565b6108b1565b3480156102f357600080fd5b506102256103023660046131d3565b610918565b34801561031357600080fd5b506102256103223660046131bb565b610979565b34801561033357600080fd5b50610347610342366004613072565b610af1565b6040516102549190613655565b34801561036057600080fd5b5061022561036f36600461352e565b610b11565b34801561038057600080fd5b50610247610c50565b34801561039557600080fd5b506102256103a43660046135bb565b610c62565b3480156103b557600080fd5b506103be610e34565b60405161025491906139bb565b3480156103d757600080fd5b506102256103e6366004613100565b610e44565b3480156103f757600080fd5b506102256104063660046131bb565b610f46565b34801561041757600080fd5b506102256104263660046132e8565b610fd6565b34801561043757600080fd5b50610347610446366004613072565b611383565b34801561045757600080fd5b5061024761139d565b34801561046c57600080fd5b506102476113c1565b34801561048157600080fd5b5061022561049036600461314b565b6113d3565b3480156104a157600080fd5b506103476104b0366004613072565b61150c565b3480156104c157600080fd5b506104d56104d03660046131f5565b611526565b6040516102549190613627565b3480156104ee57600080fd5b506103476104fd3660046131d3565b611545565b34801561050e57600080fd5b506104d561155d565b34801561052357600080fd5b5061024761156c565b610225611571565b34801561054057600080fd5b5061034761054f366004613072565b61166c565b34801561056057600080fd5b5061022561056f3660046131bb565b611686565b34801561058057600080fd5b5061024761058f3660046131bb565b611781565b3480156105a057600080fd5b506102256105af366004613288565b611798565b3480156105c057600080fd5b506102256105cf3660046131d3565b61181e565b3480156105e057600080fd5b506102256105ef366004613463565b611877565b34801561060057600080fd5b50610247611cca565b34801561061557600080fd5b50610225610624366004613570565b611cdc565b34801561063557600080fd5b506102256106443660046133a1565b611e63565b34801561065557600080fd5b50610347610664366004613072565b61225a565b34801561067557600080fd5b50610247612286565b60056020526000908152604090205481565b60035481565b60045481565b6106b4600080516020613b7e83398151915233611545565b6106d95760405162461bcd60e51b81526004016106d0906137f4565b60405180910390fd5b60005b828110156108935760008484838181106106f257fe5b90506020020160208101906107079190613072565b9050600080826001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016107389190613627565b60206040518083038186803b15801561075057600080fd5b505afa158015610764573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610788919061360c565b90506000836001600160a01b031663dd62ed3e30336040518363ffffffff1660e01b81526004016107ba92919061363b565b60206040518083038186803b1580156107d257600080fd5b505afa1580156107e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080a919061360c565b90508561082a578082111561082157809250610825565b8192505b61086e565b8582101561084a5760405162461bcd60e51b81526004016106d09061389e565b8581101561086a5760405162461bcd60e51b81526004016106d0906137bd565b8592505b6108836001600160a01b0385163033866122ad565b5050600190920191506106dc9050565b50505050565b6000818152600160205260409020600201545b919050565b6000828152600160205260409020600201546108cf906104fd612307565b61090a5760405162461bcd60e51b815260040180806020018281038252602f815260200180613a79602f913960400191505060405180910390fd5b610914828261230b565b5050565b610920612307565b6001600160a01b0316816001600160a01b03161461096f5760405162461bcd60e51b815260040180806020018281038252602f815260200180613c3e602f913960400191505060405180910390fd5b6109148282612374565b336000908152600560205260409020548111156109a85760405162461bcd60e51b81526004016106d090613943565b6004546000906109b890836123dd565b10156109d65760405162461bcd60e51b81526004016106d09061390c565b60006109e247836123dd565b1015610a005760405162461bcd60e51b81526004016106d090613984565b33600090815260056020526040902054610a1a90826123dd565b33600090815260056020526040902055600454610a3790826123dd565b60045560405160009033908390610a4d90613624565b60006040518083038185875af1925050503d8060008114610a8a576040519150601f19603f3d011682016040523d82523d6000602084013e610a8f565b606091505b5050905080610ab05760405162461bcd60e51b81526004016106d09061382b565b60405133906000907f983e86fda8e7b1e2eae380201830eaf1cac55772e8e39583da349865e817886390610ae5908690613660565b60405180910390a35050565b6000610b0b600080516020613b9e83398151915283611545565b92915050565b610b29600080516020613b9e83398151915233611545565b610b68576040805162461bcd60e51b815260206004820152601c6024820152600080516020613ac8833981519152604482015290519081900360640190fd5b60026000541415610bae576040805162461bcd60e51b815260206004820152601f6024820152600080516020613aa8833981519152604482015290519081900360640190fd5b6002600055804781811015610bf8576040805162461bcd60e51b815260206004820152601a6024820152600080516020613be8833981519152604482015290519081900360640190fd5b610c02848461241f565b80471015610c45576040805162461bcd60e51b815260206004820152600b60248201526a0dad2e6e6d2dcce408aa8960ab1b604482015290519081900360640190fd5b505060016000555050565b600080516020613ae883398151915281565b610c7a600080516020613b9e83398151915233611545565b610cb9576040805162461bcd60e51b815260206004820152601c6024820152600080516020613ac8833981519152604482015290519081900360640190fd5b60026000541415610cff576040805162461bcd60e51b815260206004820152601f6024820152600080516020613aa8833981519152604482015290519081900360640190fd5b6002600055818142811015610d4c576040805162461bcd60e51b815260206004820152600e60248201526d747261646520746f6f206c61746560901b604482015290519081900360640190fd5b42821115610d93576040805162461bcd60e51b815260206004820152600f60248201526e747261646520746f6f206561726c7960881b604482015290519081900360640190fd5b844781811015610dd8576040805162461bcd60e51b815260206004820152601a6024820152600080516020613be8833981519152604482015290519081900360640190fd5b610de2888861241f565b80471015610e25576040805162461bcd60e51b815260206004820152600b60248201526a0dad2e6e6d2dcce408aa8960ab1b604482015290519081900360640190fd5b50506001600055505050505050565b600254600160a01b900460ff1681565b610e5c600080516020613ae883398151915233611545565b610e785760405162461bcd60e51b81526004016106d0906138d5565b60005b8251811015610f41576000838281518110610e9257fe5b60200260200101519050600019816001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b8152600401610ecd92919061363b565b60206040518083038186803b158015610ee557600080fd5b505afa158015610ef9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1d919061360c565b14610f3857610f386001600160a01b0382168460001961248e565b50600101610e7b565b505050565b610f707fa381348eb3fe7f232f3078689dd9188d0bc370b23350159f64231117527caec733611545565b610f8c5760405162461bcd60e51b81526004016106d090613726565b8060006001600160a01b03167fb2c6cf9c77391977298388e9125711ceb6bd1ddc9e8a8da1d2af054316cbc853600354604051610fc99190613660565b60405180910390a3600355565b610fee600080516020613b9e83398151915233611545565b61102d576040805162461bcd60e51b815260206004820152601c6024820152600080516020613ac8833981519152604482015290519081900360640190fd5b60026000541415611073576040805162461bcd60e51b815260206004820152601f6024820152600080516020613aa8833981519152604482015290519081900360640190fd5b60026000558047818110156110bd576040805162461bcd60e51b815260206004820152601a6024820152600080516020613be8833981519152604482015290519081900360640190fd5b6002546040805163a363a0f360e01b8152600481019182528a5160448201528a516060936001600160a01b03169263a363a0f3928d928d92918291602482019160640190602087019080838360005b8381101561112457818101518382015260200161110c565b50505050905090810190601f1680156111515780820380516001836020036101000a031916815260200191505b508381038252845181528451602091820191808701910280838360005b8381101561118657818101518382015260200161116e565b5050505090500194505050505060006040518083038186803b1580156111ab57600080fd5b505afa1580156111bf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156111e857600080fd5b8101908080516040519392919084600160201b82111561120757600080fd5b90830190602082018581111561121c57600080fd5b8251600160201b81118282018810171561123557600080fd5b82525081516020918201929091019080838360005b8381101561126257818101518382015260200161124a565b50505050905090810190601f16801561128f5780820380516001836020036101000a031916815260200191505b506040525050509050846112b06020835103836125a190919063ffffffff16565b10156112f4576040805162461bcd60e51b815260206004820152600e60248201526d4e6f742070726f66697461626c6560901b604482015290519081900360640190fd5b60005b86518110156113345761132c88611313846020808602906125fa565b89848151811061131f57fe5b60200260200101516126b7565b6001016112f7565b5061133f878561241f565b5080471015610e25576040805162461bcd60e51b815260206004820152600b60248201526a0dad2e6e6d2dcce408aa8960ab1b604482015290519081900360640190fd5b6000610b0b600080516020613ae883398151915283611545565b7fa381348eb3fe7f232f3078689dd9188d0bc370b23350159f64231117527caec781565b600080516020613b5e83398151915281565b6113eb600080516020613ae883398151915233611545565b6114075760405162461bcd60e51b81526004016106d0906138d5565b81518351146114285760405162461bcd60e51b81526004016106d09061375d565b60005b835181101561089357600084828151811061144257fe5b60200260200101519050600019816001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b815260040161147d92919061363b565b60206040518083038186803b15801561149557600080fd5b505afa1580156114a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114cd919061360c565b1461150357611503838584815181106114e257fe5b6020026020010151836001600160a01b031661248e9092919063ffffffff16565b5060010161142b565b6000610b0b600080516020613b7e83398151915283611545565b600082815260016020526040812061153e90836126c3565b9392505050565b600082815260016020526040812061153e90836126cf565b6002546001600160a01b031681565b600081565b600061158a600080516020613b5e833981519152611781565b11156115c4576115a8600080516020613b5e83398151915233611545565b6115c45760405162461bcd60e51b81526004016106d0906136e2565b6003546004546115d490346126e4565b11156115f25760405162461bcd60e51b81526004016106d090613786565b6004546115ff90346126e4565b6004553360009081526005602052604090205461161c90346126e4565b336000818152600560205260408082209390935591519091907f05e7be2689d5d20fd06bc749aa0d767080c4216945cacf5249f739d5a561d48f90611662903490613660565b60405180910390a3565b6000610b0b600080516020613b5e83398151915283611545565b61169e600080516020613b7e83398151915233611545565b6116ba5760405162461bcd60e51b81526004016106d0906137f4565b6000806116d2600454476123dd90919063ffffffff16565b9050826116e157809150611705565b828110156117015760405162461bcd60e51b81526004016106d09061385b565b8291505b6000336001600160a01b03168360405161171e90613624565b60006040518083038185875af1925050503d806000811461175b576040519150601f19603f3d011682016040523d82523d6000602084013e611760565b606091505b50509050806108935760405162461bcd60e51b81526004016106d09061382b565b6000818152600160205260408120610b0b9061273e565b60025460405163a363a0f360e01b81526001600160a01b039091169063a363a0f3906117ca9085908590600401613669565b60006040518083038186803b1580156117e257600080fd5b505afa1580156117f6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f419190810190613216565b60008281526001602052604090206002015461183c906104fd612307565b61096f5760405162461bcd60e51b8152600401808060200182810382526030815260200180613b2e6030913960400191505060405180910390fd5b61188f600080516020613b9e83398151915233611545565b6118ce576040805162461bcd60e51b815260206004820152601c6024820152600080516020613ac8833981519152604482015290519081900360640190fd5b60026000541415611914576040805162461bcd60e51b815260206004820152601f6024820152600080516020613aa8833981519152604482015290519081900360640190fd5b6002600055818142811015611961576040805162461bcd60e51b815260206004820152600e60248201526d747261646520746f6f206c61746560901b604482015290519081900360640190fd5b428211156119a8576040805162461bcd60e51b815260206004820152600f60248201526e747261646520746f6f206561726c7960881b604482015290519081900360640190fd5b8447818110156119ed576040805162461bcd60e51b815260206004820152601a6024820152600080516020613be8833981519152604482015290519081900360640190fd5b6060600260009054906101000a90046001600160a01b03166001600160a01b031663a363a0f38e8e6040518363ffffffff1660e01b8152600401808060200180602001838103835285818151815260200191508051906020019080838360005b83811015611a65578181015183820152602001611a4d565b50505050905090810190601f168015611a925780820380516001836020036101000a031916815260200191505b508381038252845181528451602091820191808701910280838360005b83811015611ac7578181015183820152602001611aaf565b5050505090500194505050505060006040518083038186803b158015611aec57600080fd5b505afa158015611b00573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015611b2957600080fd5b8101908080516040519392919084600160201b821115611b4857600080fd5b908301906020820185811115611b5d57600080fd5b8251600160201b811182820188101715611b7657600080fd5b82525081516020918201929091019080838360005b83811015611ba3578181015183820152602001611b8b565b50505050905090810190601f168015611bd05780820380516001836020036101000a031916815260200191505b50604052505050905088611bf16020835103836125a190919063ffffffff16565b1015611c35576040805162461bcd60e51b815260206004820152600e60248201526d4e6f742070726f66697461626c6560901b604482015290519081900360640190fd5b60005b8a51811015611c6857611c608c611c54846020808602906125fa565b8d848151811061131f57fe5b600101611c38565b50611c738b8961241f565b5080471015611cb7576040805162461bcd60e51b815260206004820152600b60248201526a0dad2e6e6d2dcce408aa8960ab1b604482015290519081900360640190fd5b5050600160005550505050505050505050565b600080516020613b7e83398151915281565b611cf4600080516020613b9e83398151915233611545565b611d33576040805162461bcd60e51b815260206004820152601c6024820152600080516020613ac8833981519152604482015290519081900360640190fd5b60026000541415611d79576040805162461bcd60e51b815260206004820152601f6024820152600080516020613aa8833981519152604482015290519081900360640190fd5b60026000558043811015611dc4576040805162461bcd60e51b815260206004820152600d60248201526c1d1c98591948195e1c1a5c9959609a1b604482015290519081900360640190fd5b824781811015611e09576040805162461bcd60e51b815260206004820152601a6024820152600080516020613be8833981519152604482015290519081900360640190fd5b611e13868661241f565b80471015611e56576040805162461bcd60e51b815260206004820152600b60248201526a0dad2e6e6d2dcce408aa8960ab1b604482015290519081900360640190fd5b5050600160005550505050565b611e7b600080516020613b9e83398151915233611545565b611eba576040805162461bcd60e51b815260206004820152601c6024820152600080516020613ac8833981519152604482015290519081900360640190fd5b60026000541415611f00576040805162461bcd60e51b815260206004820152601f6024820152600080516020613aa8833981519152604482015290519081900360640190fd5b60026000558043811015611f4b576040805162461bcd60e51b815260206004820152600d60248201526c1d1c98591948195e1c1a5c9959609a1b604482015290519081900360640190fd5b824781811015611f90576040805162461bcd60e51b815260206004820152601a6024820152600080516020613be8833981519152604482015290519081900360640190fd5b6002546040805163a363a0f360e01b8152600481019182528c5160448201528c516060936001600160a01b03169263a363a0f3928f928f92918291602482019160640190602087019080838360005b83811015611ff7578181015183820152602001611fdf565b50505050905090810190601f1680156120245780820380516001836020036101000a031916815260200191505b508381038252845181528451602091820191808701910280838360005b83811015612059578181015183820152602001612041565b5050505090500194505050505060006040518083038186803b15801561207e57600080fd5b505afa158015612092573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156120bb57600080fd5b8101908080516040519392919084600160201b8211156120da57600080fd5b9083019060208201858111156120ef57600080fd5b8251600160201b81118282018810171561210857600080fd5b82525081516020918201929091019080838360005b8381101561213557818101518382015260200161211d565b50505050905090810190601f1680156121625780820380516001836020036101000a031916815260200191505b506040525050509050866121836020835103836125a190919063ffffffff16565b10156121c7576040805162461bcd60e51b815260206004820152600e60248201526d4e6f742070726f66697461626c6560901b604482015290519081900360640190fd5b60005b88518110156121fa576121f28a6121e6846020808602906125fa565b8b848151811061131f57fe5b6001016121ca565b50612205898761241f565b5080471015612249576040805162461bcd60e51b815260206004820152600b60248201526a0dad2e6e6d2dcce408aa8960ab1b604482015290519081900360640190fd5b505060016000555050505050505050565b6000610b0b7fa381348eb3fe7f232f3078689dd9188d0bc370b23350159f64231117527caec783611545565b600080516020613b9e83398151915281565b600061153e836001600160a01b038416612749565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610893908590612793565b3390565b60008281526001602052604090206123239082612298565b1561091457612330612307565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260016020526040902061238c9082612844565b1561091457612399612307565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600061153e83836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250612859565b60005b8251811015610f4157600061243784836128f0565b90506000612448858460140161291c565b905060348301606061245b8783856125fa565b9050846124725761246d848288612924565b61247e565b61247e84826000612924565b5050919091016034019050612422565b801580612514575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b1580156124e657600080fd5b505afa1580156124fa573d6000803e3d6000fd5b505050506040513d602081101561251057600080fd5b5051155b61254f5760405162461bcd60e51b8152600401808060200182810382526036815260200180613c086036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052610f41908490612793565b600081602001835110156125f1576040805162461bcd60e51b815260206004820152601260248201527152656164206f7574206f6620626f756e647360701b604482015290519081900360640190fd5b50016020015190565b606081830184511015612649576040805162461bcd60e51b815260206004820152601260248201527152656164206f7574206f6620626f756e647360701b604482015290519081900360640190fd5b606082158015612664576040519150602082016040526126ae565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561269d578051835260209283019201612685565b5050858452601f01601f1916604052505b50949350505050565b60209182015192010152565b600061153e8383612ae7565b600061153e836001600160a01b038416612b4b565b60008282018381101561153e576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000610b0b82612b63565b60006127558383612b4b565b61278b57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610b0b565b506000610b0b565b60606127e8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612b679092919063ffffffff16565b805190915015610f415780806020019051602081101561280757600080fd5b5051610f415760405162461bcd60e51b815260040180806020018281038252602a815260200180613bbe602a913960400191505060405180910390fd5b600061153e836001600160a01b038416612b7e565b600081848411156128e85760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156128ad578181015183820152602001612895565b50505050905090810190601f1680156128da5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000806128fd848461291c565b600160601b6bffffffffffffffffffffffff1990911604949350505050565b016020015190565b600060608483156129dc57806001600160a01b031684866040518082805190602001908083835b6020831061296a5780518252601f19909201916020918201910161294b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146129cc576040519150601f19603f3d011682016040523d82523d6000602084013e6129d1565b606091505b509093509150612a84565b806001600160a01b0316856040518082805190602001908083835b60208310612a165780518252601f1990920191602091820191016129f7565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612a78576040519150601f19603f3d011682016040523d82523d6000602084013e612a7d565b606091505b5090935091505b82612adf576060612a9483612c44565b90508060405162461bcd60e51b8152600401808060200182810382528381815181526020019150805190602001908083836000838110156128ad578181015183820152602001612895565b505050505050565b81546000908210612b295760405162461bcd60e51b8152600401808060200182810382526022815260200180613a576022913960400191505060405180910390fd5b826000018281548110612b3857fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b6060612b768484600085612d72565b949350505050565b60008181526001830160205260408120548015612c3a5783546000198083019190810190600090879083908110612bb157fe5b9060005260206000200154905080876000018481548110612bce57fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080612bfe57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610b0b565b6000915050610b0b565b6060604482511015612c8a575060408051808201909152601e81527f43616c6c206661696c656420666f7220756e6b6e6f776e20726561736f6e000060208201526108ac565b6060612ca5600480855103856125fa9092919063ffffffff16565b9050808060200190516020811015612cbc57600080fd5b8101908080516040519392919084600160201b821115612cdb57600080fd5b908301906020820185811115612cf057600080fd5b8251600160201b811182820188101715612d0957600080fd5b82525081516020918201929091019080838360005b83811015612d36578181015183820152602001612d1e565b50505050905090810190601f168015612d635780820380516001836020036101000a031916815260200191505b50604052505050915050919050565b606082471015612db35760405162461bcd60e51b8152600401808060200182810382526026815260200180613b086026913960400191505060405180910390fd5b612dbc85612ece565b612e0d576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310612e4c5780518252601f199092019160209182019101612e2d565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612eae576040519150601f19603f3d011682016040523d82523d6000602084013e612eb3565b606091505b5091509150612ec3828286612ed4565b979650505050505050565b3b151590565b60608315612ee357508161153e565b825115612ef35782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156128ad578181015183820152602001612895565b80356001600160a01b03811681146108ac57600080fd5b600082601f830112612f61578081fd5b8135612f74612f6f826139ec565b6139c9565b818152915060208083019084810181840286018201871015612f9557600080fd5b60005b84811015612fbb57612fa982612f3a565b84529282019290820190600101612f98565b505050505092915050565b600082601f830112612fd6578081fd5b8135612fe4612f6f826139ec565b81815291506020808301908481018184028601820187101561300557600080fd5b60005b84811015612fbb57813584529282019290820190600101613008565b600082601f830112613034578081fd5b8135613042612f6f82613a09565b915080825283602082850101111561305957600080fd5b8060208401602084013760009082016020015292915050565b600060208284031215613083578081fd5b61153e82612f3a565b6000806000604084860312156130a0578182fd5b83356001600160401b03808211156130b6578384fd5b818601915086601f8301126130c9578384fd5b8135818111156130d7578485fd5b87602080830285010111156130ea578485fd5b6020928301989097509590910135949350505050565b60008060408385031215613112578182fd5b82356001600160401b03811115613127578283fd5b61313385828601612f51565b92505061314260208401612f3a565b90509250929050565b60008060006060848603121561315f578283fd5b83356001600160401b0380821115613175578485fd5b61318187838801612f51565b94506020860135915080821115613196578384fd5b506131a386828701612fc6565b9250506131b260408501612f3a565b90509250925092565b6000602082840312156131cc578081fd5b5035919050565b600080604083850312156131e5578182fd5b8235915061314260208401612f3a565b60008060408385031215613207578182fd5b50508035926020909101359150565b600060208284031215613227578081fd5b81516001600160401b0381111561323c578182fd5b8201601f8101841361324c578182fd5b805161325a612f6f82613a09565b81815285602083850101111561326e578384fd5b61327f826020830160208601613a2a565b95945050505050565b6000806040838503121561329a578182fd5b82356001600160401b03808211156132b0578384fd5b6132bc86838701613024565b935060208501359150808211156132d1578283fd5b506132de85828601612fc6565b9150509250929050565b60008060008060008060c08789031215613300578182fd5b86356001600160401b0380821115613316578384fd5b6133228a838b01613024565b97506020890135915080821115613337578384fd5b6133438a838b01612fc6565b96506040890135915080821115613358578384fd5b6133648a838b01613024565b95506060890135915080821115613379578384fd5b5061338689828a01612fc6565b9350506080870135915060a087013590509295509295509295565b600080600080600080600060e0888a0312156133bb578081fd5b87356001600160401b03808211156133d1578283fd5b6133dd8b838c01613024565b985060208a01359150808211156133f2578283fd5b6133fe8b838c01612fc6565b975060408a0135915080821115613413578283fd5b61341f8b838c01613024565b965060608a0135915080821115613434578283fd5b506134418a828b01612fc6565b979a969950949760808101359660a0820135965060c090910135945092505050565b600080600080600080600080610100898b03121561347f578182fd5b88356001600160401b0380821115613495578384fd5b6134a18c838d01613024565b995060208b01359150808211156134b6578384fd5b6134c28c838d01612fc6565b985060408b01359150808211156134d7578384fd5b6134e38c838d01613024565b975060608b01359150808211156134f8578384fd5b506135058b828c01612fc6565b989b979a50959860808101359760a0820135975060c0820135965060e090910135945092505050565b60008060408385031215613540578182fd5b82356001600160401b03811115613555578283fd5b61356185828601613024565b95602094909401359450505050565b600080600060608486031215613584578081fd5b83356001600160401b03811115613599578182fd5b6135a586828701613024565b9660208601359650604090950135949350505050565b600080600080608085870312156135d0578182fd5b84356001600160401b038111156135e5578283fd5b6135f187828801613024565b97602087013597506040870135966060013595509350505050565b60006020828403121561361d578081fd5b5051919050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b901515815260200190565b90815260200190565b600060408252835180604084015260206136898260608601838901613a2a565b6060601f19601f939093019290921684018481038301858301528551928101839052858201928491608001905b808310156136d657845182529383019360019290920191908301906136b6565b50979650505050505050565b60208082526024908201527f43616c6c6572206d75737420686176652057484954454c49535445445f4c5020604082015263726f6c6560e01b606082015260800190565b6020808252601f908201527f43616c6c6572206d7573742068617665204d414e4147455f4c5020726f6c6500604082015260600190565b6020808252600f908201526e0dcdee840e6c2daca40d8cadccee8d608b1b604082015260600190565b6020808252601c908201527f616d6f756e742065786365656473206d6178206c697175696469747900000000604082015260600190565b60208082526018908201527f496e63726561736520746f6b656e20616c6c6f77616e63650000000000000000604082015260600190565b6020808252601e908201527f43616c6c6572206d757374206861766520574954484452415720726f6c650000604082015260600190565b602080825260169082015275086deead8c840dcdee840eed2e8d0c8e4c2ee408aa8960531b604082015260600190565b60208082526023908201527f616d6f756e74206578636565647320776974686472617761626c652062616c616040820152626e636560e81b606082015260800190565b60208082526018908201527f436f6e74726163742062616c616e636520746f6f206c6f770000000000000000604082015260600190565b6020808252601e908201527f43616c6c6572206d757374206861766520415050524f56455220726f6c650000604082015260600190565b6020808252601e908201527f616d6f756e74206578636565647320746f74616c206c69717569646974790000604082015260600190565b60208082526021908201527f616d6f756e742065786365656473206c69717569646974792070726f766964656040820152601960fa1b606082015260800190565b6020808252601f908201527f616d6f756e74206578636565647320636f6e74726163742062616c616e636500604082015260600190565b60ff91909116815260200190565b6040518181016001600160401b03811182821017156139e457fe5b604052919050565b60006001600160401b038211156139ff57fe5b5060209081020190565b60006001600160401b03821115613a1c57fe5b50601f01601f191660200190565b60005b83811015613a45578181015183820152602001613a2d565b83811115610893575050600091015256fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e745265656e7472616e637947756172643a207265656e7472616e742063616c6c00547261646572206d75737420686176652054524144455220726f6c6500000000408a36151f841709116a4e8aca4e0202874f7f54687dcb863b1ea4672dc9d8cf416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65ea728681f55b7658af02b019305006d1b2faefced46ff12facedd896da3c3dc65d8e12c39142ff96d79d04d15d1ba1269e4fe57bb9d26f43523628b34ba108ecfacaf2747a7486cf5730e9265973fb54447d3ace6e7e4711f6360826b07319415361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565644e6f7420656e6f7567682045544820696e20636f6e74726163740000000000005361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a2646970667358221220792ef10b7a670a34fde589f886c5bad39843af1c4d199746c36c3832ce3688ca64736f6c63430007040033408a36151f841709116a4e8aca4e0202874f7f54687dcb863b1ea4672dc9d8cfea728681f55b7658af02b019305006d1b2faefced46ff12facedd896da3c3dc6a381348eb3fe7f232f3078689dd9188d0bc370b23350159f64231117527caec7aa1af34341297dfbc4dfe694fa8bb873bcaf9528e24c7336ae6bfc3f79ddeddb456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a2646970667358221220a9c832f7188ea0a8e80738800a27655d27a8978fd88d72ccf8227b68d4debe7264736f6c63430007040033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Creates and keeps track of Dispatchers on the network",
    "kind": "dev",
    "methods": {
      "addDispatchers(address[])": {
        "params": {
          "dispatcherContracts": "Array of dispatcher contract addresses"
        }
      },
      "constructor": {
        "params": {
          "_dispatcherAdmin": "admin that can create new Dispatchers",
          "_roleAdmin": "admin in control of roles"
        }
      },
      "createNewDispatcher(address,address,address,address,address,address,uint256,address[])": {
        "params": {
          "initialMaxLiquidity": "Initial max liquidity allowed in contract",
          "lpManager": "Address allowed to manage LP whitelist",
          "lpWhitelist": "List of addresses that are allowed to provide liquidity to this contract",
          "queryEngine": "Address of query engine contract",
          "roleManager": "Address allowed to manage contract roles",
          "supplier": "Address allowed to supply opportunities to contract",
          "trader": "Address allowed to make trades via this contract",
          "withdrawer": "Address allowed to withdraw profit from contract"
        },
        "returns": {
          "dispatcher": "Address of new Dispatcher contract"
        }
      },
      "dispatchers()": {
        "returns": {
          "_0": "Array of Dispatcher addresses"
        }
      },
      "exists(address)": {
        "params": {
          "dispatcherContract": "Dispatcher address"
        },
        "returns": {
          "_0": "true if Dispatcher is indexed "
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "numDispatchers()": {
        "returns": {
          "_0": "number of Dispatchers indexed "
        }
      },
      "removeDispatchers(address[])": {
        "params": {
          "dispatcherContracts": "Dispatcher contract addresses"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      }
    },
    "stateVariables": {
      "dispatchersSet": {
        "details": "Record of all Dispatchers"
      }
    },
    "title": "DispatcherFactory",
    "version": 1
  },
  "userdoc": {
    "events": {
      "DispatcherAdded(address)": {
        "notice": "Add existing Dispatcher event"
      },
      "DispatcherCreated(address,uint8,address,address,address,address,address,address,uint256,bool)": {
        "notice": "Create new Dispatcher event"
      },
      "DispatcherRemoved(address)": {
        "notice": "Remove existing Dispatcher event"
      }
    },
    "kind": "user",
    "methods": {
      "DISPATCHER_ADMIN_ROLE()": {
        "notice": "Admin role to create new Dispatchers"
      },
      "addDispatchers(address[])": {
        "notice": "Admin function to allow addition of dispatchers created via other Dispatcher Factories"
      },
      "constructor": {
        "notice": "Initializes contract, setting admin"
      },
      "createNewDispatcher(address,address,address,address,address,address,uint256,address[])": {
        "notice": "Create new Dispatcher contract"
      },
      "dispatchers()": {
        "notice": "Return list of Dispatcher contracts this factory indexes"
      },
      "exists(address)": {
        "notice": "Determine whether this factory is indexing a Dispatcher at the provided address"
      },
      "numDispatchers()": {
        "notice": "Returns the number of Dispatchers indexed by this factory"
      },
      "removeDispatchers(address[])": {
        "notice": "Admin function to allow removal of dispatchers from Dispatcher set"
      },
      "version()": {
        "notice": "Version number of Dispatcher Factory"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4034,
        "contract": "contracts/DispatcherFactory.sol:DispatcherFactory",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)4030_storage)"
      },
      {
        "astId": 2734,
        "contract": "contracts/DispatcherFactory.sol:DispatcherFactory",
        "label": "version",
        "offset": 0,
        "slot": "1",
        "type": "t_uint8"
      },
      {
        "astId": 2743,
        "contract": "contracts/DispatcherFactory.sol:DispatcherFactory",
        "label": "dispatchersSet",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(AddressSet)5320_storage"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)4030_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)4030_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)5320_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 5319,
            "contract": "contracts/DispatcherFactory.sol:DispatcherFactory",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5055_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)4030_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 4027,
            "contract": "contracts/DispatcherFactory.sol:DispatcherFactory",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)5320_storage"
          },
          {
            "astId": 4029,
            "contract": "contracts/DispatcherFactory.sol:DispatcherFactory",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)5055_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5050,
            "contract": "contracts/DispatcherFactory.sol:DispatcherFactory",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5054,
            "contract": "contracts/DispatcherFactory.sol:DispatcherFactory",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}