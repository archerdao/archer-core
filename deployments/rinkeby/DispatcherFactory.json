{
  "address": "0xc0AD3f77E7aa43ad225c8C2F3127022Da7546303",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roleAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dispatcherAdmin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dispatcher",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "queryEngine",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "roleManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lpManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "approver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialMaxLiquidity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "lpWhitelist",
          "type": "bool"
        }
      ],
      "name": "DispatcherCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DISPATCHER_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "queryEngine",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "roleManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lpManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialMaxLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "lpWhitelist",
          "type": "address[]"
        }
      ],
      "name": "createNewDispatcher",
      "outputs": [
        {
          "internalType": "address",
          "name": "dispatcher",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x39572fd15603f69101c24db248d832ffb23ce913e1a2e1fc64b408489cf63ffa",
  "receipt": {
    "to": null,
    "from": "0x4F8f512Dab59F227EA70B1D8A0044aFa95CC80C3",
    "contractAddress": "0xc0AD3f77E7aa43ad225c8C2F3127022Da7546303",
    "transactionIndex": 5,
    "gasUsed": "5339548",
    "logsBloom": "0x00000004000000000000000000000000000000000000000002000200000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000800000000000020000000000000000000800008000000001000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080008000000000000000000001000000000000000000000000200000000000000000000010000000000100100200000000020000000000000000000000000000000000020000000000000000000000000000000",
    "blockHash": "0xb98b5d5a3e3ce1ed0e71e1b98ffae5330ae314eb88859f0e6c33169a9a7ab441",
    "transactionHash": "0x39572fd15603f69101c24db248d832ffb23ce913e1a2e1fc64b408489cf63ffa",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 7728655,
        "transactionHash": "0x39572fd15603f69101c24db248d832ffb23ce913e1a2e1fc64b408489cf63ffa",
        "address": "0xc0AD3f77E7aa43ad225c8C2F3127022Da7546303",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xaa1af34341297dfbc4dfe694fa8bb873bcaf9528e24c7336ae6bfc3f79ddeddb",
          "0x0000000000000000000000005b0ac3279dbf84bb8da59be1ecab118198f022e5",
          "0x0000000000000000000000004f8f512dab59f227ea70b1d8a0044afa95cc80c3"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0xb98b5d5a3e3ce1ed0e71e1b98ffae5330ae314eb88859f0e6c33169a9a7ab441"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 7728655,
        "transactionHash": "0x39572fd15603f69101c24db248d832ffb23ce913e1a2e1fc64b408489cf63ffa",
        "address": "0xc0AD3f77E7aa43ad225c8C2F3127022Da7546303",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000864ad15351c4a50e12f767b1a7d993ae47493e55",
          "0x0000000000000000000000004f8f512dab59f227ea70b1d8a0044afa95cc80c3"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0xb98b5d5a3e3ce1ed0e71e1b98ffae5330ae314eb88859f0e6c33169a9a7ab441"
      }
    ],
    "blockNumber": 7728655,
    "cumulativeGasUsed": "5768821",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x864AD15351C4a50E12F767B1a7D993aE47493E55",
    "0x5b0aC3279dBf84Bb8DA59Be1EcaB118198f022E5"
  ],
  "solcInputHash": "6573a9b4663018faa6eed786b07d5cf2",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roleAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dispatcherAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dispatcher\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"queryEngine\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"roleManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialMaxLiquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"lpWhitelist\",\"type\":\"bool\"}],\"name\":\"DispatcherCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISPATCHER_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"queryEngine\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"roleManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialMaxLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"lpWhitelist\",\"type\":\"address[]\"}],\"name\":\"createNewDispatcher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"dispatcher\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_dispatcherAdmin\":\"admin that can create new Dispatchers\",\"_roleAdmin\":\"admin in control of roles\"}},\"createNewDispatcher(address,address,address,address,address,address,uint256,address[])\":{\"params\":{\"approver\":\"Address allowed to make approvals on contract\",\"initialMaxLiquidity\":\"Initial max liquidity allowed in contract\",\"lpManager\":\"Address allowed to manage LP whitelist\",\"lpWhitelist\":\"list of addresses that are allowed to provide liquidity to this contract\",\"queryEngine\":\"Address of query engine contract\",\"roleManager\":\"Address allowed to manage contract roles\",\"trader\":\"Address allowed to make trades via this contract\",\"withdrawer\":\"Address allowed to withdraw profit from contract\"},\"returns\":{\"dispatcher\":\"Address of new Dispatcher contract\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"events\":{\"DispatcherCreated(address,uint8,address,address,address,address,address,address,uint256,bool)\":{\"notice\":\"Create new Dispatcher event\"}},\"kind\":\"user\",\"methods\":{\"DISPATCHER_ADMIN_ROLE()\":{\"notice\":\"Admin role to create new Dispatchers\"},\"constructor\":{\"notice\":\"Initializes contract, setting admin\"},\"createNewDispatcher(address,address,address,address,address,address,uint256,address[])\":{\"notice\":\"Create new Dispatcher contract\"},\"version()\":{\"notice\":\"Version number of Dispatcher Factory\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DispatcherFactory.sol\":\"DispatcherFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/Dispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IQueryEngine.sol\\\";\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\nimport \\\"./lib/AccessControl.sol\\\";\\nimport \\\"./lib/Trader.sol\\\";\\n\\ncontract Dispatcher is AccessControl, Trader {\\n    // Allows safe math operations on uint256 values\\n    using SafeMath for uint256;\\n\\n    // Allows easy manipulation on bytes\\n    using BytesLib for bytes;\\n\\n    // Use safe ERC20 interface to gracefully handle non-compliant tokens\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Version number of Dispatcher\\n    uint8 public version;\\n\\n    /// @notice Admin role to manage whitelisted LPs\\n    bytes32 public constant MANAGE_LP_ROLE = keccak256(\\\"MANAGE_LP_ROLE\\\");\\n\\n    /// @notice Addresses with this role are allowed to provide liquidity to this contract\\n    /// @dev If no addresses with this role exist, all addresses can provide liquidity\\n    bytes32 public constant WHITELISTED_LP_ROLE = keccak256(\\\"WHITELISTED_LP_ROLE\\\");\\n\\n    /// @notice Admin role to restrict approval of tokens on dispatcher\\n    bytes32 public constant APPROVER_ROLE = keccak256(\\\"APPROVER_ROLE\\\");  \\n\\n    /// @notice Admin role to restrict withdrawal of funds from contract\\n    bytes32 public constant WITHDRAW_ROLE = keccak256(\\\"WITHDRAW_ROLE\\\");    \\n\\n    /// @notice Maximum ETH liquidity allowed in Dispatcher\\n    uint256 public MAX_LIQUIDITY;\\n\\n    /// @notice Total current liquidity provided to Dispatcher\\n    uint256 public totalLiquidity;\\n\\n    /// @notice Mapping of lp address to liquidity provided\\n    mapping(address => uint256) public lpBalances;\\n\\n    /// @notice modifier to restrict functions to only users that have been added as LP manager\\n    modifier onlyLPManager() {\\n        require(hasRole(MANAGE_LP_ROLE, msg.sender), \\\"Caller must have MANAGE_LP role\\\");\\n        _;\\n    }\\n\\n    /// @notice modifier to restrict functions to only users that have been added as an approver\\n    modifier onlyApprover() {\\n        require(hasRole(APPROVER_ROLE, msg.sender), \\\"Caller must have APPROVER role\\\");\\n        _;\\n    }\\n\\n    /// @notice modifier to restrict functions to only users that have been added as a withdrawer\\n    modifier onlyWithdrawer() {\\n        require(hasRole(WITHDRAW_ROLE, msg.sender), \\\"Caller must have WITHDRAW role\\\");\\n        _;\\n    }\\n\\n    /// @notice modifier to restrict functions to only users that have been whitelisted as an LP\\n    modifier onlyWhitelistedLP() {\\n        if(getRoleMemberCount(WHITELISTED_LP_ROLE) > 0) {\\n            require(hasRole(WHITELISTED_LP_ROLE, msg.sender), \\\"Caller must have WHITELISTED_LP role\\\");\\n        }\\n        _;\\n    }\\n\\n    /// @notice Max liquidity updated event\\n    event MaxLiquidityUpdated(address indexed asset, uint256 indexed newAmount, uint256 oldAmount);\\n\\n    /// @notice Liquidity Provided event\\n    event LiquidityProvided(address indexed asset, address indexed provider, uint256 amount);\\n\\n    /// @notice Liquidity removed event\\n    event LiquidityRemoved(address indexed asset, address indexed provider, uint256 amount);\\n\\n    /// @notice Initializes contract, setting up initial contract permissions\\n    /// @param _version Version number of Dispatcher\\n    /// @param _queryEngine Address of query engine contract\\n    /// @param _roleManager Address allowed to manage contract roles\\n    /// @param _lpManager Address allowed to manage LP whitelist\\n    /// @param _withdrawer Address allowed to withdraw profit from contract\\n    /// @param _trader Address allowed to make trades via this contract\\n    /// @param _approver Address allowed to make approvals via this contract\\n    /// @param _initialMaxLiquidity Initial max liquidity allowed in contract\\n    /// @param _lpWhitelist list of addresses that are allowed to provide liquidity to this contract\\n    constructor(\\n        uint8 _version,\\n        address _queryEngine,\\n        address _roleManager,\\n        address _lpManager,\\n        address _withdrawer,\\n        address _trader,\\n        address _approver,\\n        uint256 _initialMaxLiquidity,\\n        address[] memory _lpWhitelist\\n    ) {\\n        version = _version;\\n        queryEngine = IQueryEngine(_queryEngine);\\n        _setupRole(MANAGE_LP_ROLE, _lpManager);\\n        _setRoleAdmin(WHITELISTED_LP_ROLE, MANAGE_LP_ROLE);\\n        _setupRole(WITHDRAW_ROLE, _withdrawer);\\n        _setupRole(TRADER_ROLE, _trader);\\n        _setupRole(APPROVER_ROLE, _approver);\\n        _setupRole(DEFAULT_ADMIN_ROLE, _roleManager);\\n        MAX_LIQUIDITY = _initialMaxLiquidity;\\n        for(uint i; i < _lpWhitelist.length; i++) {\\n            _setupRole(WHITELISTED_LP_ROLE, _lpWhitelist[i]);\\n        }\\n    }\\n\\n    /// @notice Receive function to allow contract to accept ETH\\n    receive() external payable {}\\n    \\n    /// @notice Fallback function in case receive function is not matched\\n    fallback() external payable {}\\n\\n    /// @notice Returns true if given address is on the list of approvers\\n    /// @param addressToCheck the address to check\\n    /// @return true if address is approver\\n    function isApprover(address addressToCheck) external view returns(bool) {\\n        return hasRole(APPROVER_ROLE, addressToCheck);\\n    }\\n\\n    /// @notice Returns true if given address is on the list of approved withdrawers\\n    /// @param addressToCheck the address to check\\n    /// @return true if address is withdrawer\\n    function isWithdrawer(address addressToCheck) external view returns(bool) {\\n        return hasRole(WITHDRAW_ROLE, addressToCheck);\\n    }\\n\\n    /// @notice Returns true if given address is on the list of LP managers\\n    /// @param addressToCheck the address to check\\n    /// @return true if address is LP manager\\n    function isLPManager(address addressToCheck) external view returns(bool) {\\n        return hasRole(MANAGE_LP_ROLE, addressToCheck);\\n    }\\n\\n    /// @notice Returns true if given address is on the list of whitelisted LPs\\n    /// @param addressToCheck the address to check\\n    /// @return true if address is whitelisted\\n    function isWhitelistedLP(address addressToCheck) external view returns(bool) {\\n        return hasRole(WHITELISTED_LP_ROLE, addressToCheck);\\n    }\\n\\n    /// @notice Set approvals for external addresses to use Dispatcher contract tokens\\n    /// @param tokensToApprove the tokens to approve\\n    /// @param spender the address to allow spending of token\\n    function tokenAllowAll(\\n        address[] memory tokensToApprove, \\n        address spender\\n    ) external onlyApprover {\\n        for(uint i = 0; i < tokensToApprove.length; i++) {\\n            IERC20 token = IERC20(tokensToApprove[i]);\\n            if (token.allowance(address(this), spender) != uint256(-1)) {\\n                token.safeApprove(spender, uint256(-1));\\n            }\\n        }\\n    }\\n\\n    /// @notice Set approvals for external addresses to use Dispatcher contract tokens\\n    /// @param tokensToApprove the tokens to approve\\n    /// @param approvalAmounts the token approval amounts\\n    /// @param spender the address to allow spending of token\\n    function tokenAllow(\\n        address[] memory tokensToApprove, \\n        uint256[] memory approvalAmounts, \\n        address spender\\n    ) external onlyApprover {\\n        require(tokensToApprove.length == approvalAmounts.length, \\\"not same length\\\");\\n        for(uint i = 0; i < tokensToApprove.length; i++) {\\n            IERC20 token = IERC20(tokensToApprove[i]);\\n            if (token.allowance(address(this), spender) != uint256(-1)) {\\n                token.safeApprove(spender, approvalAmounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Rescue (withdraw) tokens from the smart contract\\n    /// @param tokens the tokens to withdraw\\n    /// @param amount the amount of each token to withdraw.  If zero, withdraws the maximum allowed amount for each token\\n    function rescueTokens(address[] calldata tokens, uint256 amount) external onlyWithdrawer {\\n        for (uint i = 0; i < tokens.length; i++) {\\n            IERC20 token = IERC20(tokens[i]);\\n            uint256 withdrawalAmount;\\n            uint256 tokenBalance = token.balanceOf(address(this));\\n            uint256 tokenAllowance = token.allowance(address(this), msg.sender);\\n            if (amount == 0) {\\n                if (tokenBalance > tokenAllowance) {\\n                    withdrawalAmount = tokenAllowance;\\n                } else {\\n                    withdrawalAmount = tokenBalance;\\n                }\\n            } else {\\n                require(tokenBalance >= amount, \\\"Contract balance too low\\\");\\n                require(tokenAllowance >= amount, \\\"Increase token allowance\\\");\\n                withdrawalAmount = amount;\\n            }\\n            token.safeTransferFrom(address(this), msg.sender, withdrawalAmount);\\n        }\\n    }\\n\\n    /// @notice Set max ETH liquidity to accept for this contract\\n    /// @param newMax new max ETH liquidity\\n    function setMaxETHLiquidity(uint256 newMax) external onlyLPManager {\\n        emit MaxLiquidityUpdated(address(0), newMax, MAX_LIQUIDITY);\\n        MAX_LIQUIDITY = newMax;\\n    }\\n\\n    /// @notice Provide ETH liquidity to Dispatcher\\n    function provideETHLiquidity() external payable onlyWhitelistedLP {\\n        require(totalLiquidity.add(msg.value) <= MAX_LIQUIDITY, \\\"amount exceeds max liquidity\\\");\\n        totalLiquidity = totalLiquidity.add(msg.value);\\n        lpBalances[msg.sender] = lpBalances[msg.sender].add(msg.value);\\n        emit LiquidityProvided(address(0), msg.sender, msg.value);\\n    }\\n\\n    /// @notice Remove ETH liquidity from Dispatcher\\n    /// @param amount amount of liquidity to remove\\n    function removeETHLiquidity(uint256 amount) external {\\n        require(lpBalances[msg.sender] >= amount, \\\"amount exceeds liquidity provided\\\");\\n        require(totalLiquidity.sub(amount) >= 0, \\\"amount exceeds total liquidity\\\");\\n        require(address(this).balance.sub(amount) >= 0, \\\"amount exceeds contract balance\\\");\\n        lpBalances[msg.sender] = lpBalances[msg.sender].sub(amount);\\n        totalLiquidity = totalLiquidity.sub(amount);\\n        (bool success, ) = msg.sender.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Could not withdraw ETH\\\");\\n        emit LiquidityRemoved(address(0), msg.sender, amount);\\n    }\\n\\n    /// @notice Withdraw ETH from the smart contract\\n    /// @param amount the amount of ETH to withdraw.  If zero, withdraws the maximum allowed amount.\\n    function withdrawEth(uint256 amount) external onlyWithdrawer {\\n        uint256 withdrawalAmount;\\n        uint256 withdrawableBalance = address(this).balance.sub(totalLiquidity);\\n        if (amount == 0) {\\n            withdrawalAmount = withdrawableBalance;\\n        } else {\\n            require(withdrawableBalance >= amount, \\\"amount exceeds withdrawable balance\\\");\\n            withdrawalAmount = amount;\\n        }\\n        (bool success, ) = msg.sender.call{value: withdrawalAmount}(\\\"\\\");\\n        require(success, \\\"Could not withdraw ETH\\\");\\n    }\\n\\n    /// @notice A non-view function to help estimate the cost of a given query in practice\\n    /// @param script the compiled bytecode for the series of function calls to get the final price\\n    /// @param inputLocations index locations within the script to insert input amounts dynamically\\n    function estimateQueryCost(bytes memory script, uint256[] memory inputLocations) public {\\n        queryEngine.queryAllPrices(script, inputLocations);\\n    }\\n}\",\"keccak256\":\"0x30ff426d4e3b80b52fc80f318b87898c32f6388e1a448600f0d7a8f7b725db9c\",\"license\":\"MIT\"},\"contracts/DispatcherFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/AccessControl.sol\\\";\\nimport \\\"./Dispatcher.sol\\\";\\n\\ncontract DispatcherFactory is AccessControl {\\n    /// @notice Version number of Dispatcher Factory\\n    uint8 public version = 1;\\n\\n    /// @notice Admin role to create new Dispatchers\\n    bytes32 public constant DISPATCHER_ADMIN_ROLE = keccak256(\\\"DISPATCHER_ADMIN_ROLE\\\");\\n\\n    /// @notice Create new Dispatcher event\\n    event DispatcherCreated(\\n        address indexed dispatcher,\\n        uint8 indexed version, \\n        address queryEngine,\\n        address roleManager,\\n        address lpManager,\\n        address withdrawer,\\n        address trader,\\n        address approver,\\n        uint256 initialMaxLiquidity,\\n        bool lpWhitelist\\n    );\\n\\n    /// @notice modifier to restrict createNewDispatcher function\\n    modifier onlyAdmin() {\\n        require(hasRole(DISPATCHER_ADMIN_ROLE, msg.sender), \\\"Caller must have DISPATCHER_ADMIN role\\\");\\n        _;\\n    }\\n\\n    /// @notice Initializes contract, setting admin\\n    /// @param _roleAdmin admin in control of roles\\n    /// @param _dispatcherAdmin admin that can create new Dispatchers\\n    constructor(\\n        address _roleAdmin,\\n        address _dispatcherAdmin\\n    ) {\\n        _setupRole(DISPATCHER_ADMIN_ROLE, _dispatcherAdmin);\\n        _setupRole(DEFAULT_ADMIN_ROLE, _roleAdmin);\\n    }\\n\\n    /// @notice Create new Dispatcher contract\\n    /// @param queryEngine Address of query engine contract\\n    /// @param roleManager Address allowed to manage contract roles\\n    /// @param lpManager Address allowed to manage LP whitelist\\n    /// @param withdrawer Address allowed to withdraw profit from contract\\n    /// @param trader Address allowed to make trades via this contract\\n    /// @param approver Address allowed to make approvals on contract\\n    /// @param initialMaxLiquidity Initial max liquidity allowed in contract\\n    /// @param lpWhitelist list of addresses that are allowed to provide liquidity to this contract\\n    /// @return dispatcher Address of new Dispatcher contract\\n    function createNewDispatcher(\\n        address queryEngine,\\n        address roleManager,\\n        address lpManager,\\n        address withdrawer,\\n        address trader,\\n        address approver,\\n        uint256 initialMaxLiquidity,\\n        address[] memory lpWhitelist\\n    ) external onlyAdmin returns (\\n        address dispatcher\\n    ) {\\n        Dispatcher newDispatcher = new Dispatcher(\\n            version,\\n            queryEngine,\\n            roleManager,\\n            lpManager,\\n            withdrawer,\\n            trader,\\n            approver,\\n            initialMaxLiquidity,\\n            lpWhitelist\\n        );\\n\\n        dispatcher = address(newDispatcher);\\n\\n        emit DispatcherCreated(\\n            dispatcher,\\n            version,\\n            queryEngine,\\n            roleManager,\\n            lpManager,\\n            withdrawer,\\n            trader,\\n            approver,\\n            initialMaxLiquidity,\\n            lpWhitelist.length > 0 ? true : false\\n        );\\n    }\\n}\",\"keccak256\":\"0x8dc90dafa1085fda1725c7bf301da6d573cbad08365f9306342ce69c25d2969f\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x077c1c7b2001eab9f0cb3b7cee53577b39305495db8cba923f92420af9a4099a\",\"license\":\"MIT\"},\"contracts/interfaces/IQueryEngine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IQueryEngine {\\n    function getPrice(address contractAddress, bytes memory data) external view returns (bytes memory);\\n    function queryAllPrices(bytes memory script, uint256[] memory inputLocations) external view returns (bytes memory);\\n    function query(bytes memory script, uint256[] memory inputLocations) external view returns (uint256);\\n}\",\"keccak256\":\"0x582a8bd7cf501ccc1d9c7b6a7266df1986afff33e24e4867b1884bdba137402b\",\"license\":\"MIT\"},\"contracts/lib/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\",\"keccak256\":\"0x0bf67f0847f39a0dfb909b4b68d8273f67739f68e5c44c04418156f6d8a11ea1\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0x8fd765afd2c7c5836c65f999138537e2c5460687c68d795128ec20dc73bf2923\",\"license\":\"MIT\"},\"contracts/lib/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity ^0.7.0;\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_bytes.length >= (_start + _length), \\\"Read out of bounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= (_start + 20), \\\"Read out of bounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= (_start + 1), \\\"Read out of bounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= (_start + 2), \\\"Read out of bounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= (_start + 4), \\\"Read out of bounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= (_start + 8), \\\"Read out of bounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= (_start + 12), \\\"Read out of bounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= (_start + 16), \\\"Read out of bounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= (_start + 32), \\\"Read out of bounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= (_start + 32), \\\"Read out of bounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\",\"keccak256\":\"0x6d70ec583c608b94cdb17170dfb447d5df4a657410c1c3f36c885fa71ee7ec39\",\"license\":\"Unlicense\"},\"contracts/lib/CalldataEditor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./BytesLib.sol\\\";\\n\\nabstract contract CalldataEditor {\\n    using BytesLib for bytes;\\n\\n    /// @notice Returns uint from chunk of the bytecode\\n    /// @param data the compiled bytecode for the series of function calls\\n    /// @param location the current 'cursor' location within the bytecode\\n    /// @return result uint\\n    function uint256At(bytes memory data, uint256 location) pure internal returns (uint256 result) {\\n        assembly {\\n            result := mload(add(data, add(0x20, location)))\\n        }\\n    }\\n\\n    /// @notice Returns address from chunk of the bytecode\\n    /// @param data the compiled bytecode for the series of function calls\\n    /// @param location the current 'cursor' location within the bytecode\\n    /// @return result address\\n    function addressAt(bytes memory data, uint256 location) pure internal returns (address result) {\\n        uint256 word = uint256At(data, location);\\n        assembly {\\n            result := div(and(word, 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000),\\n                          0x1000000000000000000000000)\\n        }\\n    }\\n\\n    /// @notice Returns the start of the calldata within a chunk of the bytecode\\n    /// @param data the compiled bytecode for the series of function calls\\n    /// @param location the current 'cursor' location within the bytecode\\n    /// @return result pointer to start of calldata\\n    function locationOf(bytes memory data, uint256 location) pure internal returns (uint256 result) {\\n        assembly {\\n            result := add(data, add(0x20, location))\\n        }\\n    }\\n    \\n    /// @notice Replace the bytes at the index location in original with new bytes\\n    /// @param original original bytes\\n    /// @param newBytes new bytes to replace in original\\n    /// @param location the index within the original bytes where to make the replacement\\n    function replaceDataAt(bytes memory original, bytes memory newBytes, uint256 location) pure internal {\\n        assembly {\\n            mstore(add(add(original, location), 0x20), mload(add(newBytes, 0x20)))\\n        }\\n    }\\n\\n    /// @dev Get the revert message from a call\\n    /// @notice This is needed in order to get the human-readable revert message from a call\\n    /// @param res Response of the call\\n    /// @return Revert message string\\n    function getRevertMsg(bytes memory res) internal pure returns (string memory) {\\n        // If the res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (res.length < 68) return 'Call failed for unknown reason';\\n        bytes memory revertData = res.slice(4, res.length - 4); // Remove the selector which is the first 4 bytes\\n        return abi.decode(revertData, (string)); // All that remains is the revert string\\n    }\\n}\",\"keccak256\":\"0xd9dd639cf35c8a7457a1fc126da4801f5ff79ce3267e1f46121b11516ae27265\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0xd3e88da8695a1d63936f7bbf3b3441056c44d167e679a80f9a1b5ffafb11fad9\",\"license\":\"MIT\"},\"contracts/lib/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\",\"keccak256\":\"0x2b5126d431b44bc6e25a43305eb23b6d093eb2e7923a8d304db425bbb398efce\",\"license\":\"MIT\"},\"contracts/lib/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\",\"keccak256\":\"0x3318ee67bfc251e74ac8ac1a97061fdaed4f5355fd9c23eb26e1ee1550f675bd\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0xf5c6f7a4e202733b9bea8dc0c4be4bc16f765c08079418eb426ad490d9f4142e\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x961855901713e710c05dd67f9a01e501a54e82e68a526fe3662e228c27f788d9\",\"license\":\"MIT\"},\"contracts/lib/Trader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"../interfaces/IQueryEngine.sol\\\";\\n\\nimport \\\"./BytesLib.sol\\\";\\nimport \\\"./CalldataEditor.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\n\\nabstract contract Trader is ReentrancyGuard, AccessControl, CalldataEditor {\\n    using BytesLib for bytes;\\n\\n    /// @notice Query contract\\n    IQueryEngine public queryEngine;\\n\\n    /// @notice Trader role to restrict functions to set list of approved traders\\n    bytes32 public constant TRADER_ROLE = keccak256(\\\"TRADER_ROLE\\\");\\n\\n    /// @notice modifier to restrict functions to only users that have been added as a trader\\n    modifier onlyTrader() {\\n        require(hasRole(TRADER_ROLE, msg.sender), \\\"Trader must have TRADER role\\\");\\n        _;\\n    }\\n\\n    /// @notice All trades must be profitable\\n    modifier mustBeProfitable(uint256 ethRequested) {\\n        uint256 contractBalanceBefore = address(this).balance;\\n        require(contractBalanceBefore >= ethRequested, \\\"Not enough ETH in contract\\\");\\n        _;\\n        require(address(this).balance >= contractBalanceBefore, \\\"missing ETH\\\");\\n    }\\n\\n    /// @notice Trades must not be expired\\n    modifier notExpired(uint256 deadlineBlock) {\\n        require(deadlineBlock >= block.number, \\\"trade expired\\\");\\n        _;\\n    }\\n\\n    /// @notice Trades must be executed within time window\\n    modifier onTime(uint256 minTimestamp, uint256 maxTimestamp) {\\n        require(maxTimestamp >= block.timestamp, \\\"trade too late\\\");\\n        require(minTimestamp <= block.timestamp, \\\"trade too early\\\");\\n        _;\\n    }\\n\\n    /// @notice Returns true if given address is on the list of approved traders\\n    /// @param addressToCheck the address to check\\n    /// @return true if address is trader\\n    function isTrader(address addressToCheck) external view returns(bool) {\\n        return hasRole(TRADER_ROLE, addressToCheck);\\n    }\\n\\n    /// @notice Makes a series of trades as single transaction if profitable without query\\n    /// @param executeScript the compiled bytecode for the series of function calls to execute the trade\\n    /// @param ethValue the amount of ETH to send with initial contract call\\n    function makeTrade(\\n        bytes memory executeScript,\\n        uint256 ethValue\\n    ) public onlyTrader nonReentrant mustBeProfitable(ethValue) {\\n        execute(executeScript, ethValue);\\n    }\\n\\n    /// @notice Makes a series of trades as single transaction if profitable without query + block deadline\\n    /// @param executeScript the compiled bytecode for the series of function calls to execute the trade\\n    /// @param ethValue the amount of ETH to send with initial contract call\\n    /// @param blockDeadline block number when trade expires\\n    function makeTrade(\\n        bytes memory executeScript,\\n        uint256 ethValue,\\n        uint256 blockDeadline\\n    ) public onlyTrader nonReentrant notExpired(blockDeadline) mustBeProfitable(ethValue) {\\n        execute(executeScript, ethValue);\\n    }\\n\\n    /// @notice Makes a series of trades as single transaction if profitable without query + within time window specified\\n    /// @param executeScript the compiled bytecode for the series of function calls to execute the trade\\n    /// @param ethValue the amount of ETH to send with initial contract call\\n    /// @param minTimestamp minimum block timestamp to execute trade\\n    /// @param maxTimestamp maximum timestamp to execute trade\\n    function makeTrade(\\n        bytes memory executeScript,\\n        uint256 ethValue,\\n        uint256 minTimestamp,\\n        uint256 maxTimestamp\\n    ) public onlyTrader nonReentrant onTime(minTimestamp, maxTimestamp) mustBeProfitable(ethValue) {\\n        execute(executeScript, ethValue);\\n    }\\n\\n    /// @notice Makes a series of trades as single transaction if profitable\\n    /// @param queryScript the compiled bytecode for the series of function calls to get the final price\\n    /// @param queryInputLocations index locations within the queryScript to insert input amounts dynamically\\n    /// @param executeScript the compiled bytecode for the series of function calls to execute the trade\\n    /// @param executeInputLocations index locations within the executeScript to insert input amounts dynamically\\n    /// @param targetPrice profit target for this trade, if ETH>ETH, this should be ethValue + gas estimate * gas price\\n    /// @param ethValue the amount of ETH to send with initial contract call\\n    function makeTrade(\\n        bytes memory queryScript,\\n        uint256[] memory queryInputLocations,\\n        bytes memory executeScript,\\n        uint256[] memory executeInputLocations,\\n        uint256 targetPrice,\\n        uint256 ethValue\\n    ) public onlyTrader nonReentrant mustBeProfitable(ethValue) {\\n        bytes memory prices = queryEngine.queryAllPrices(queryScript, queryInputLocations);\\n        require(prices.toUint256(prices.length - 32) > targetPrice, \\\"Not profitable\\\");\\n        for(uint i = 0; i < executeInputLocations.length; i++) {\\n            replaceDataAt(executeScript, prices.slice(i*32, (i+1)*32), executeInputLocations[i]);\\n        }\\n        execute(executeScript, ethValue);\\n    }\\n\\n    /// @notice Makes a series of trades as single transaction if profitable + block deadline\\n    /// @param queryScript the compiled bytecode for the series of function calls to get the final price\\n    /// @param queryInputLocations index locations within the queryScript to insert input amounts dynamically\\n    /// @param executeScript the compiled bytecode for the series of function calls to execute the trade\\n    /// @param executeInputLocations index locations within the executeScript to insert input amounts dynamically\\n    /// @param targetPrice profit target for this trade, if ETH>ETH, this should be ethValue + gas estimate * gas price\\n    /// @param ethValue the amount of ETH to send with initial contract call\\n    /// @param blockDeadline block number when trade expires\\n    function makeTrade(\\n        bytes memory queryScript,\\n        uint256[] memory queryInputLocations,\\n        bytes memory executeScript,\\n        uint256[] memory executeInputLocations,\\n        uint256 targetPrice,\\n        uint256 ethValue,\\n        uint256 blockDeadline\\n    ) public onlyTrader nonReentrant notExpired(blockDeadline) mustBeProfitable(ethValue) {\\n        bytes memory prices = queryEngine.queryAllPrices(queryScript, queryInputLocations);\\n        require(prices.toUint256(prices.length - 32) > targetPrice, \\\"Not profitable\\\");\\n        for(uint i = 0; i < executeInputLocations.length; i++) {\\n            replaceDataAt(executeScript, prices.slice(i*32, (i+1)*32), executeInputLocations[i]);\\n        }\\n        execute(executeScript, ethValue);\\n    }\\n\\n    /// @notice Makes a series of trades as single transaction if profitable + within time window specified\\n    /// @param queryScript the compiled bytecode for the series of function calls to get the final price\\n    /// @param queryInputLocations index locations within the queryScript to insert input amounts dynamically\\n    /// @param executeScript the compiled bytecode for the series of function calls to execute the trade\\n    /// @param executeInputLocations index locations within the executeScript to insert input amounts dynamically\\n    /// @param targetPrice profit target for this trade, if ETH>ETH, this should be ethValue + gas estimate * gas price\\n    /// @param ethValue the amount of ETH to send with initial contract call\\n    /// @param minTimestamp minimum block timestamp to execute trade\\n    /// @param maxTimestamp maximum timestamp to execute trade\\n    function makeTrade(\\n        bytes memory queryScript,\\n        uint256[] memory queryInputLocations,\\n        bytes memory executeScript,\\n        uint256[] memory executeInputLocations,\\n        uint256 targetPrice,\\n        uint256 ethValue,\\n        uint256 minTimestamp,\\n        uint256 maxTimestamp\\n    ) public onlyTrader nonReentrant onTime(minTimestamp, maxTimestamp) mustBeProfitable(ethValue) {\\n        bytes memory prices = queryEngine.queryAllPrices(queryScript, queryInputLocations);\\n        require(prices.toUint256(prices.length - 32) > targetPrice, \\\"Not profitable\\\");\\n        for(uint i = 0; i < executeInputLocations.length; i++) {\\n            replaceDataAt(executeScript, prices.slice(i*32, (i+1)*32), executeInputLocations[i]);\\n        }\\n        execute(executeScript, ethValue);\\n    }\\n\\n    /// @notice Executes series of function calls as single transaction\\n    /// @param script the compiled bytecode for the series of function calls to invoke\\n    /// @param ethValue the amount of ETH to send with initial contract call\\n    function execute(bytes memory script, uint256 ethValue) internal {\\n        // sequentially call contract methods\\n        uint256 location = 0;\\n        while (location < script.length) {\\n            address contractAddress = addressAt(script, location);\\n            uint256 calldataLength = uint256At(script, location + 0x14);\\n            uint256 calldataStart = location + 0x14 + 0x20;\\n            bytes memory callData = script.slice(calldataStart, calldataLength);\\n            if(location == 0) {\\n                callMethod(contractAddress, callData, ethValue);\\n            }\\n            else {\\n                callMethod(contractAddress, callData, 0);\\n            }\\n            location += (0x14 + 0x20 + calldataLength);\\n        }\\n    }\\n\\n    /// @notice Calls the supplied calldata using the supplied contract address\\n    /// @param contractToCall the contract to call\\n    /// @param data the call data to execute\\n    /// @param ethValue the amount of ETH to send with initial contract call\\n    function callMethod(address contractToCall, bytes memory data, uint256 ethValue) internal {\\n        bool success;\\n        bytes memory returnData;\\n        address payable contractAddress = payable(contractToCall);\\n        if(ethValue > 0) {\\n            (success, returnData) = contractAddress.call{value: ethValue}(data);\\n        } else {\\n            (success, returnData) = contractAddress.call(data);\\n        }\\n        if (!success) {\\n            string memory revertMsg = getRevertMsg(returnData);\\n            revert(revertMsg);\\n        }\\n    }\\n}\",\"keccak256\":\"0xeaab4e3e45167627e379cab7bf0390c2526e7277e39b73dfdb31d137553c99e4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526001805460ff1916811790553480156200001d57600080fd5b5060405162005f5238038062005f528339810160408190526200004091620001b2565b6200006c7faa1af34341297dfbc4dfe694fa8bb873bcaf9528e24c7336ae6bfc3f79ddeddb8262000081565b6200007960008362000081565b5050620001e9565b6200008d828262000091565b5050565b600082815260208181526040909120620000b69183906200059a6200010a821b17901c565b156200008d57620000c66200012a565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600062000121836001600160a01b0384166200012e565b90505b92915050565b3390565b60006200013c83836200017d565b620001745750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000124565b50600062000124565b60009081526001919091016020526040902054151590565b80516001600160a01b0381168114620001ad57600080fd5b919050565b60008060408385031215620001c5578182fd5b620001d08362000195565b9150620001e06020840162000195565b90509250929050565b615d5980620001f96000396000f3fe60806040523480156200001157600080fd5b5060043610620000dc5760003560e01c806391d14854116200008d578063ca15c8731162000063578063ca15c87314620001b9578063d547741f14620001d0578063e9a7515114620001e757620000dc565b806391d14854146200017f5780639ce3ec3d14620001a5578063a217fddf14620001af57620000dc565b806336568abe11620000c357806336568abe146200012957806354fd4d5014620001405780639010d07c146200015957620000dc565b8063248a9ca314620000e15780632f2ff15d1462000110575b600080fd5b620000f8620000f236600462000a73565b620001fe565b60405162000107919062000b61565b60405180910390f35b620001276200012136600462000a8c565b62000216565b005b620001276200013a36600462000a8c565b6200029e565b6200014a62000339565b60405162000107919062000bc7565b620001706200016a36600462000aba565b62000342565b60405162000107919062000adc565b620001966200019036600462000a8c565b62000365565b60405162000107919062000b56565b620000f86200037f565b620000f8620003a3565b620000f8620001ca36600462000a73565b620003a8565b62000127620001e136600462000a8c565b620003c1565b62000170620001f83660046200093e565b62000439565b6000818152602081905260409020600201545b919050565b600082815260208190526040902060020154620002379062000190620005be565b6200028e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f81526020018062005c96602f913960400191505060405180910390fd5b6200029a8282620005c2565b5050565b620002a8620005be565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146200032d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f81526020018062005cf5602f913960400191505060405180910390fd5b6200029a82826200064a565b60015460ff1681565b60008281526020819052604081206200035c9083620006d2565b90505b92915050565b60008281526020819052604081206200035c9083620006e0565b7faa1af34341297dfbc4dfe694fa8bb873bcaf9528e24c7336ae6bfc3f79ddeddb81565b600081565b60008181526020819052604081206200035f9062000704565b600082815260208190526040902060020154620003e29062000190620005be565b6200032d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603081526020018062005cc56030913960400191505060405180910390fd5b6000620004677faa1af34341297dfbc4dfe694fa8bb873bcaf9528e24c7336ae6bfc3f79ddeddb3362000365565b620004a9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004a09062000b6a565b60405180910390fd5b6000600160009054906101000a900460ff168a8a8a8a8a8a8a8a604051620004d1906200090b565b620004e59998979695949392919062000bd5565b604051809103906000f08015801562000502573d6000803e3d6000fd5b509050809150600160009054906101000a900460ff1660ff168273ffffffffffffffffffffffffffffffffffffffff167f9a63203234614199a0bc755131a988e0dbed1944eec7ef17037d48f11a0f2bd78c8c8c8c8c8c8c60008d51116200056c5760006200056f565b60015b6040516200058598979695949392919062000afd565b60405180910390a35098975050505050505050565b60006200035c8373ffffffffffffffffffffffffffffffffffffffff841662000711565b3390565b6000828152602081905260409020620005dc90826200059a565b156200029a57620005ec620005be565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260208190526040902062000664908262000760565b156200029a5762000674620005be565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60006200035c838362000784565b60006200035c8373ffffffffffffffffffffffffffffffffffffffff841662000805565b60006200035f826200081d565b60006200071f838362000805565b62000757575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200035f565b5060006200035f565b60006200035c8373ffffffffffffffffffffffffffffffffffffffff841662000821565b81546000908210620007e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602281526020018062005c746022913960400191505060405180910390fd5b826000018281548110620007f257fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b60008181526001830160205260408120548015620009005783547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80830191908101906000908790839081106200087457fe5b90600052602060002001549050808760000184815481106200089257fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080620008c357fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506200035f565b60009150506200035f565b614fcd8062000ca783390190565b803573ffffffffffffffffffffffffffffffffffffffff811681146200021157600080fd5b600080600080600080600080610100898b0312156200095b578384fd5b620009668962000919565b97506200097660208a0162000919565b96506200098660408a0162000919565b95506200099660608a0162000919565b9450620009a660808a0162000919565b9350620009b660a08a0162000919565b925060c0890135915060e089013567ffffffffffffffff80821115620009da578283fd5b818b0191508b601f830112620009ee578283fd5b813581811115620009fb57fe5b60208102915062000a0f6020830162000c81565b80828252602082019150602085018f602086880101111562000a2f578687fd5b8695505b8386101562000a5d5762000a478162000919565b8352600195909501946020928301920162000a33565b5080955050505050509295985092959890939650565b60006020828403121562000a85578081fd5b5035919050565b6000806040838503121562000a9f578182fd5b8235915062000ab16020840162000919565b90509250929050565b6000806040838503121562000acd578182fd5b50508035926020909101359150565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9889168152968816602088015294871660408701529286166060860152908516608085015290931660a083015260c082019290925290151560e08201526101000190565b901515815260200190565b90815260200190565b60208082526026908201527f43616c6c6572206d757374206861766520444953504154434845525f41444d4960408201527f4e20726f6c650000000000000000000000000000000000000000000000000000606082015260800190565b60ff91909116815260200190565b600061012080830160ff8d168452602073ffffffffffffffffffffffffffffffffffffffff808e1682870152808d166040870152808c166060870152808b166080870152808a1660a087015280891660c08701528760e0870152836101008701528293508651808452610140870194508288019350855b8181101562000c6c57845183168652948301949383019360010162000c4c565b50939f9e505050505050505050505050505050565b60405181810167ffffffffffffffff8111828210171562000c9e57fe5b60405291905056fe60806040523480156200001157600080fd5b5060405162004fcd38038062004fcd833981016040819052620000349162000321565b60016000556002805460ff60a01b1916600160a01b60ff8c1602176001600160a01b0319166001600160a01b038a161790556200008160008051602062004fad833981519152876200019c565b620000ab60008051602062004f8d83398151915260008051602062004fad833981519152620001ac565b620000d77f5d8e12c39142ff96d79d04d15d1ba1269e4fe57bb9d26f43523628b34ba108ec866200019c565b620001037ffacaf2747a7486cf5730e9265973fb54447d3ace6e7e4711f6360826b0731941856200019c565b6200012f7f408a36151f841709116a4e8aca4e0202874f7f54687dcb863b1ea4672dc9d8cf846200019c565b6200013c6000886200019c565b600382905560005b81518110156200018c576200018360008051602062004f8d8339815191528383815181106200016f57fe5b60200260200101516200019c60201b60201c565b60010162000144565b505050505050505050506200047d565b620001a88282620001fe565b5050565b600082815260016020526040808220600201549051839285917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a460009182526001602052604090912060020155565b60008281526001602090815260409091206200022591839062002dec62000279821b17901c565b15620001a8576200023562000299565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600062000290836001600160a01b0384166200029d565b90505b92915050565b3390565b6000620002ab8383620002ec565b620002e35750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000293565b50600062000293565b60009081526001919091016020526040902054151590565b80516001600160a01b03811681146200031c57600080fd5b919050565b60008060008060008060008060006101208a8c03121562000340578485fd5b895160ff8116811462000351578586fd5b98506200036160208b0162000304565b97506200037160408b0162000304565b96506200038160608b0162000304565b95506200039160808b0162000304565b9450620003a160a08b0162000304565b9350620003b160c08b0162000304565b60e08b01516101008c015191945092506001600160401b0380821115620003d6578283fd5b818c0191508c601f830112620003ea578283fd5b815181811115620003f757fe5b604051602080830282010181811084821117156200041157fe5b8060405250809250818152602081019250602084018f602080850287010111156200043a578586fd5b8594505b828510156200046857620004528162000304565b845260019490940193602093840193016200043e565b50809450505050509295985092959850929598565b614b00806200048d6000396000f3fe60806040526004361061026e5760003560e01c806376e821cf11610153578063c311d049116100cb578063e02023a11161007f578063ec38857611610064578063ec38857614610679578063ecd1878f14610699578063f0a56fc8146106b957610275565b8063e02023a114610644578063e7abbb221461065957610275565b8063cc6febdf116100b0578063cc6febdf146105e4578063d547741f14610604578063d99125ee1461062457610275565b8063c311d049146105a4578063ca15c873146105c457610275565b806391d1485411610122578063a217fddf11610107578063a217fddf14610567578063ac19e8981461057c578063c2d4f8c01461058457610275565b806391d148541461053257806397ff5fb61461055257610275565b806376e821cf146104b057806379f645f0146104c55780639004e5c5146104e55780639010d07c1461050557610275565b806341650279116101e657806366f4deca116101b55780636880608f1161019a5780636880608f1461045b5780636d218e481461047b578063717f8df01461049b57610275565b806366f4deca1461041b57806368285acd1461043b57610275565b806341650279146103a45780634245962b146103c4578063509f1fc1146103d957806354fd4d50146103f957610275565b8063248a9ca31161023d57806336568abe1161022257806336568abe146103375780633dee3601146103575780634039ad0d1461037757610275565b8063248a9ca3146102f75780632f2ff15d1461031757610275565b80630b65092d14610277578063148e250d146102ad57806315770f92146102c257806318916513146102d757610275565b3661027557005b005b34801561028357600080fd5b50610297610292366004613ee6565b6106ce565b6040516102a491906144f9565b60405180910390f35b3480156102b957600080fd5b506102976106e0565b3480156102ce57600080fd5b506102976106e6565b3480156102e357600080fd5b506102756102f2366004613f00565b6106ec565b34801561030357600080fd5b50610297610312366004614032565b610970565b34801561032357600080fd5b5061027561033236600461404a565b610988565b34801561034357600080fd5b5061027561035236600461404a565b610a09565b34801561036357600080fd5b50610275610372366004614032565b610a9e565b34801561038357600080fd5b50610397610392366004613ee6565b610c7e565b6040516102a491906144ee565b3480156103b057600080fd5b506102756103bf3660046143aa565b610cb0565b3480156103d057600080fd5b50610297610eb1565b3480156103e557600080fd5b506102756103f4366004614439565b610ed5565b34801561040557600080fd5b5061040e6111ba565b6040516102a491906148d8565b34801561042757600080fd5b50610275610436366004613f75565b6111db565b34801561044757600080fd5b50610275610456366004614032565b61135f565b34801561046757600080fd5b50610275610476366004614161565b611416565b34801561048757600080fd5b50610397610496366004613ee6565b6118f8565b3480156104a757600080fd5b50610297611924565b3480156104bc57600080fd5b50610297611948565b3480156104d157600080fd5b506102756104e0366004613fc1565b61196c565b3480156104f157600080fd5b50610397610500366004613ee6565b611b23565b34801561051157600080fd5b5061052561052036600461406c565b611b4f565b6040516102a491906144a6565b34801561053e57600080fd5b5061039761054d36600461404a565b611b6e565b34801561055e57600080fd5b50610525611b86565b34801561057357600080fd5b50610297611ba2565b610275611ba7565b34801561059057600080fd5b5061039761059f366004613ee6565b611cfa565b3480156105b057600080fd5b506102756105bf366004614032565b611d26565b3480156105d057600080fd5b506102976105df366004614032565b611e8e565b3480156105f057600080fd5b506102756105ff366004614100565b611ea5565b34801561061057600080fd5b5061027561061f36600461404a565b611f6f565b34801561063057600080fd5b5061027561063f3660046142de565b611fe2565b34801561065057600080fd5b506102976125af565b34801561066557600080fd5b506102756106743660046143ed565b6125d3565b34801561068557600080fd5b5061027561069436600461421b565b612846565b3480156106a557600080fd5b506103976106b4366004613ee6565b612d9c565b3480156106c557600080fd5b50610297612dc8565b60056020526000908152604090205481565b60035481565b60045481565b6107167f5d8e12c39142ff96d79d04d15d1ba1269e4fe57bb9d26f43523628b34ba108ec33611b6e565b610755576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074c906146d4565b60405180910390fd5b60005b8281101561096a57600084848381811061076e57fe5b90506020020160208101906107839190613ee6565b90506000808273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107c191906144a6565b60206040518083038186803b1580156107d957600080fd5b505afa1580156107ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610811919061448b565b905060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30336040518363ffffffff1660e01b81526004016108509291906144c7565b60206040518083038186803b15801561086857600080fd5b505afa15801561087c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a0919061448b565b9050856108c057808211156108b7578092506108bb565b8192505b610938565b858210156108fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074c9061479f565b85811015610934576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074c9061469d565b8592505b61095a73ffffffffffffffffffffffffffffffffffffffff8516303386612e0e565b5050600190920191506107589050565b50505050565b6000818152600160205260409020600201545b919050565b6000828152600160205260409020600201546109a69061054d612ea3565b6109fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001806149b7602f913960400191505060405180910390fd5b610a058282612ea7565b5050565b610a11612ea3565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a94576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180614a9c602f913960400191505060405180910390fd5b610a058282612f2a565b33600090815260056020526040902054811115610ae7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074c90614844565b600454600090610af79083612fad565b1015610b2f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074c9061480d565b6000610b3b4783612fad565b1015610b73576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074c906148a1565b33600090815260056020526040902054610b8d9082612fad565b33600090815260056020526040902055600454610baa9082612fad565b60045560405160009033908390610bc0906144a3565b60006040518083038185875af1925050503d8060008114610bfd576040519150601f19603f3d011682016040523d82523d6000602084013e610c02565b606091505b5050905080610c3d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074c9061470b565b60405133906000907f983e86fda8e7b1e2eae380201830eaf1cac55772e8e39583da349865e817886390610c729086906144f9565b60405180910390a35050565b6000610caa7ffacaf2747a7486cf5730e9265973fb54447d3ace6e7e4711f6360826b073194183611b6e565b92915050565b610cda7ffacaf2747a7486cf5730e9265973fb54447d3ace6e7e4711f6360826b073194133611b6e565b610d4557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f547261646572206d75737420686176652054524144455220726f6c6500000000604482015290519081900360640190fd5b60026000541415610db757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600055804781811015610e2d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4e6f7420656e6f7567682045544820696e20636f6e7472616374000000000000604482015290519081900360640190fd5b610e378484612fef565b80471015610ea657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f6d697373696e6720455448000000000000000000000000000000000000000000604482015290519081900360640190fd5b505060016000555050565b7f408a36151f841709116a4e8aca4e0202874f7f54687dcb863b1ea4672dc9d8cf81565b610eff7ffacaf2747a7486cf5730e9265973fb54447d3ace6e7e4711f6360826b073194133611b6e565b610f6a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f547261646572206d75737420686176652054524144455220726f6c6500000000604482015290519081900360640190fd5b60026000541415610fdc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260005581814281101561105257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f747261646520746f6f206c617465000000000000000000000000000000000000604482015290519081900360640190fd5b428211156110c157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f747261646520746f6f206561726c790000000000000000000000000000000000604482015290519081900360640190fd5b84478181101561113257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4e6f7420656e6f7567682045544820696e20636f6e7472616374000000000000604482015290519081900360640190fd5b61113c8888612fef565b804710156111ab57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f6d697373696e6720455448000000000000000000000000000000000000000000604482015290519081900360640190fd5b50506001600055505050505050565b60025474010000000000000000000000000000000000000000900460ff1681565b6112057f408a36151f841709116a4e8aca4e0202874f7f54687dcb863b1ea4672dc9d8cf33611b6e565b61123b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074c906147d6565b60005b825181101561135a57600083828151811061125557fe5b602002602001015190507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30866040518363ffffffff1660e01b81526004016112bb9291906144c7565b60206040518083038186803b1580156112d357600080fd5b505afa1580156112e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130b919061448b565b146113515761135173ffffffffffffffffffffffffffffffffffffffff8216847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61305e565b5060010161123e565b505050565b6113897fa381348eb3fe7f232f3078689dd9188d0bc370b23350159f64231117527caec733611b6e565b6113bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074c906145f8565b80600073ffffffffffffffffffffffffffffffffffffffff167fb2c6cf9c77391977298388e9125711ceb6bd1ddc9e8a8da1d2af054316cbc85360035460405161140991906144f9565b60405180910390a3600355565b6114407ffacaf2747a7486cf5730e9265973fb54447d3ace6e7e4711f6360826b073194133611b6e565b6114ab57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f547261646572206d75737420686176652054524144455220726f6c6500000000604482015290519081900360640190fd5b6002600054141561151d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260005580478181101561159357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4e6f7420656e6f7567682045544820696e20636f6e7472616374000000000000604482015290519081900360640190fd5b600254604080517fa363a0f3000000000000000000000000000000000000000000000000000000008152600481019182528a5160448201528a5160609373ffffffffffffffffffffffffffffffffffffffff169263a363a0f3928d928d92918291602482019160640190602087019080838360005b83811015611620578181015183820152602001611608565b50505050905090810190601f16801561164d5780820380516001836020036101000a031916815260200191505b508381038252845181528451602091820191808701910280838360005b8381101561168257818101518382015260200161166a565b5050505090500194505050505060006040518083038186803b1580156116a757600080fd5b505afa1580156116bb573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561170257600080fd5b810190808051604051939291908464010000000082111561172257600080fd5b90830190602082018581111561173757600080fd5b825164010000000081118282018810171561175157600080fd5b82525081516020918201929091019080838360005b8381101561177e578181015183820152602001611766565b50505050905090810190601f1680156117ab5780820380516001836020036101000a031916815260200191505b506040525050509050846117cc6020835103836131ec90919063ffffffff16565b1161183857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e6f742070726f66697461626c65000000000000000000000000000000000000604482015290519081900360640190fd5b60005b865181101561187d576118758861185c84602080860290600187010261326a565b89848151811061186857fe5b602002602001015161336a565b60010161183b565b506118888785612fef565b50804710156111ab57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f6d697373696e6720455448000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000610caa7f408a36151f841709116a4e8aca4e0202874f7f54687dcb863b1ea4672dc9d8cf83611b6e565b7fa381348eb3fe7f232f3078689dd9188d0bc370b23350159f64231117527caec781565b7fea728681f55b7658af02b019305006d1b2faefced46ff12facedd896da3c3dc681565b6119967f408a36151f841709116a4e8aca4e0202874f7f54687dcb863b1ea4672dc9d8cf33611b6e565b6119cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074c906147d6565b8151835114611a07576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074c9061462f565b60005b835181101561096a576000848281518110611a2157fe5b602002602001015190507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30866040518363ffffffff1660e01b8152600401611a879291906144c7565b60206040518083038186803b158015611a9f57600080fd5b505afa158015611ab3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad7919061448b565b14611b1a57611b1a83858481518110611aec57fe5b60200260200101518373ffffffffffffffffffffffffffffffffffffffff1661305e9092919063ffffffff16565b50600101611a0a565b6000610caa7f5d8e12c39142ff96d79d04d15d1ba1269e4fe57bb9d26f43523628b34ba108ec83611b6e565b6000828152600160205260408120611b679083613376565b9392505050565b6000828152600160205260408120611b679083613382565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b600081565b6000611bd27fea728681f55b7658af02b019305006d1b2faefced46ff12facedd896da3c3dc6611e8e565b1115611c3857611c027fea728681f55b7658af02b019305006d1b2faefced46ff12facedd896da3c3dc633611b6e565b611c38576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074c9061459b565b600354600454611c4890346133a4565b1115611c80576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074c90614666565b600454611c8d90346133a4565b60045533600090815260056020526040902054611caa90346133a4565b336000818152600560205260408082209390935591519091907f05e7be2689d5d20fd06bc749aa0d767080c4216945cacf5249f739d5a561d48f90611cf09034906144f9565b60405180910390a3565b6000610caa7fea728681f55b7658af02b019305006d1b2faefced46ff12facedd896da3c3dc683611b6e565b611d507f5d8e12c39142ff96d79d04d15d1ba1269e4fe57bb9d26f43523628b34ba108ec33611b6e565b611d86576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074c906146d4565b600080611d9e60045447612fad90919063ffffffff16565b905082611dad57809150611deb565b82811015611de7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074c90614742565b8291505b60003373ffffffffffffffffffffffffffffffffffffffff1683604051611e11906144a3565b60006040518083038185875af1925050503d8060008114611e4e576040519150601f19603f3d011682016040523d82523d6000602084013e611e53565b606091505b505090508061096a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074c9061470b565b6000818152600160205260408120610caa90613418565b6002546040517fa363a0f300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063a363a0f390611efd9085908590600401614502565b60006040518083038186803b158015611f1557600080fd5b505afa158015611f29573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261135a919081019061408d565b600082815260016020526040902060020154611f8d9061054d612ea3565b610a94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526030815260200180614a0c6030913960400191505060405180910390fd5b61200c7ffacaf2747a7486cf5730e9265973fb54447d3ace6e7e4711f6360826b073194133611b6e565b61207757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f547261646572206d75737420686176652054524144455220726f6c6500000000604482015290519081900360640190fd5b600260005414156120e957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260005581814281101561215f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f747261646520746f6f206c617465000000000000000000000000000000000000604482015290519081900360640190fd5b428211156121ce57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f747261646520746f6f206561726c790000000000000000000000000000000000604482015290519081900360640190fd5b84478181101561223f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4e6f7420656e6f7567682045544820696e20636f6e7472616374000000000000604482015290519081900360640190fd5b6060600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a363a0f38e8e6040518363ffffffff1660e01b8152600401808060200180602001838103835285818151815260200191508051906020019080838360005b838110156122d15781810151838201526020016122b9565b50505050905090810190601f1680156122fe5780820380516001836020036101000a031916815260200191505b508381038252845181528451602091820191808701910280838360005b8381101561233357818101518382015260200161231b565b5050505090500194505050505060006040518083038186803b15801561235857600080fd5b505afa15801561236c573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405260208110156123b357600080fd5b81019080805160405193929190846401000000008211156123d357600080fd5b9083019060208201858111156123e857600080fd5b825164010000000081118282018810171561240257600080fd5b82525081516020918201929091019080838360005b8381101561242f578181015183820152602001612417565b50505050905090810190601f16801561245c5780820380516001836020036101000a031916815260200191505b5060405250505090508861247d6020835103836131ec90919063ffffffff16565b116124e957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e6f742070726f66697461626c65000000000000000000000000000000000000604482015290519081900360640190fd5b60005b8a51811015612521576125198c61250d84602080860290600187010261326a565b8d848151811061186857fe5b6001016124ec565b5061252c8b89612fef565b508047101561259c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f6d697373696e6720455448000000000000000000000000000000000000000000604482015290519081900360640190fd5b5050600160005550505050505050505050565b7f5d8e12c39142ff96d79d04d15d1ba1269e4fe57bb9d26f43523628b34ba108ec81565b6125fd7ffacaf2747a7486cf5730e9265973fb54447d3ace6e7e4711f6360826b073194133611b6e565b61266857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f547261646572206d75737420686176652054524144455220726f6c6500000000604482015290519081900360640190fd5b600260005414156126da57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600055804381101561274f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f7472616465206578706972656400000000000000000000000000000000000000604482015290519081900360640190fd5b8247818110156127c057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4e6f7420656e6f7567682045544820696e20636f6e7472616374000000000000604482015290519081900360640190fd5b6127ca8686612fef565b8047101561283957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f6d697373696e6720455448000000000000000000000000000000000000000000604482015290519081900360640190fd5b5050600160005550505050565b6128707ffacaf2747a7486cf5730e9265973fb54447d3ace6e7e4711f6360826b073194133611b6e565b6128db57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f547261646572206d75737420686176652054524144455220726f6c6500000000604482015290519081900360640190fd5b6002600054141561294d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260005580438110156129c257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f7472616465206578706972656400000000000000000000000000000000000000604482015290519081900360640190fd5b824781811015612a3357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4e6f7420656e6f7567682045544820696e20636f6e7472616374000000000000604482015290519081900360640190fd5b600254604080517fa363a0f3000000000000000000000000000000000000000000000000000000008152600481019182528c5160448201528c5160609373ffffffffffffffffffffffffffffffffffffffff169263a363a0f3928f928f92918291602482019160640190602087019080838360005b83811015612ac0578181015183820152602001612aa8565b50505050905090810190601f168015612aed5780820380516001836020036101000a031916815260200191505b508381038252845181528451602091820191808701910280838360005b83811015612b22578181015183820152602001612b0a565b5050505090500194505050505060006040518083038186803b158015612b4757600080fd5b505afa158015612b5b573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526020811015612ba257600080fd5b8101908080516040519392919084640100000000821115612bc257600080fd5b908301906020820185811115612bd757600080fd5b8251640100000000811182820188101715612bf157600080fd5b82525081516020918201929091019080838360005b83811015612c1e578181015183820152602001612c06565b50505050905090810190601f168015612c4b5780820380516001836020036101000a031916815260200191505b50604052505050905086612c6c6020835103836131ec90919063ffffffff16565b11612cd857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e6f742070726f66697461626c65000000000000000000000000000000000000604482015290519081900360640190fd5b60005b8851811015612d1057612d088a612cfc84602080860290600187010261326a565b8b848151811061186857fe5b600101612cdb565b50612d1b8987612fef565b5080471015612d8b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f6d697373696e6720455448000000000000000000000000000000000000000000604482015290519081900360640190fd5b505060016000555050505050505050565b6000610caa7fa381348eb3fe7f232f3078689dd9188d0bc370b23350159f64231117527caec783611b6e565b7ffacaf2747a7486cf5730e9265973fb54447d3ace6e7e4711f6360826b073194181565b6000611b678373ffffffffffffffffffffffffffffffffffffffff8416613423565b6040805173ffffffffffffffffffffffffffffffffffffffff80861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905261096a90859061346d565b3390565b6000828152600160205260409020612ebf9082612dec565b15610a0557612ecc612ea3565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152600160205260409020612f429082613545565b15610a0557612f4f612ea3565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000611b6783836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250613567565b60005b825181101561135a5760006130078483613618565b905060006130188584601401613660565b905060348301606061302b87838561326a565b9050846130425761303d848288613668565b61304e565b61304e84826000613668565b5050919091016034019050612ff2565b80158061310a5750604080517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b1580156130dc57600080fd5b505afa1580156130f0573d6000803e3d6000fd5b505050506040513d602081101561310657600080fd5b5051155b61315f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526036815260200180614a666036913960400191505060405180910390fd5b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b30000000000000000000000000000000000000000000000000000000017905261135a90849061346d565b6000816020018351101561326157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f52656164206f7574206f6620626f756e64730000000000000000000000000000604482015290519081900360640190fd5b50016020015190565b6060818301845110156132de57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f52656164206f7574206f6620626f756e64730000000000000000000000000000604482015290519081900360640190fd5b6060821580156132f957604051915060208201604052613361565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561333257805183526020928301920161331a565b5050858452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b50949350505050565b60209182015192010152565b6000611b67838361389b565b6000611b678373ffffffffffffffffffffffffffffffffffffffff8416613919565b600082820183811015611b6757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000610caa82613931565b600061342f8383613919565b61346557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610caa565b506000610caa565b60606134cf826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166139359092919063ffffffff16565b80519091501561135a578080602001905160208110156134ee57600080fd5b505161135a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180614a3c602a913960400191505060405180910390fd5b6000611b678373ffffffffffffffffffffffffffffffffffffffff841661394c565b60008184841115613610576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156135d55781810151838201526020016135bd565b50505050905090810190601f1680156136025780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000806136258484613660565b6c010000000000000000000000007fffffffffffffffffffffffffffffffffffffffff00000000000000000000000090911604949350505050565b016020015190565b6000606084831561374b578073ffffffffffffffffffffffffffffffffffffffff1684866040518082805190602001908083835b602083106136d957805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161369c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461373b576040519150601f19603f3d011682016040523d82523d6000602084013e613740565b606091505b50909350915061381e565b8073ffffffffffffffffffffffffffffffffffffffff16856040518082805190602001908083835b602083106137b057805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613773565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114613812576040519150601f19603f3d011682016040523d82523d6000602084013e613817565b606091505b5090935091505b8261389357606061382e83613a30565b9050806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156135d55781810151838201526020016135bd565b505050505050565b815460009082106138f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806149956022913960400191505060405180910390fd5b82600001828154811061390657fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b60606139448484600085613b60565b949350505050565b60008181526001830160205260408120548015613a265783547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808301919081019060009087908390811061399d57fe5b90600052602060002001549050808760000184815481106139ba57fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806139ea57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610caa565b6000915050610caa565b6060604482511015613a76575060408051808201909152601e81527f43616c6c206661696c656420666f7220756e6b6e6f776e20726561736f6e00006020820152610983565b6060613a916004808551038561326a9092919063ffffffff16565b9050808060200190516020811015613aa857600080fd5b8101908080516040519392919084640100000000821115613ac857600080fd5b908301906020820185811115613add57600080fd5b8251640100000000811182820188101715613af757600080fd5b82525081516020918201929091019080838360005b83811015613b24578181015183820152602001613b0c565b50505050905090810190601f168015613b515780820380516001836020036101000a031916815260200191505b50604052505050915050919050565b606082471015613bbb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806149e66026913960400191505060405180910390fd5b613bc485613d1b565b613c2f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b60208310613c9957805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613c5c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613cfb576040519150601f19603f3d011682016040523d82523d6000602084013e613d00565b606091505b5091509150613d10828286613d21565b979650505050505050565b3b151590565b60608315613d30575081611b67565b825115613d405782518084602001fd5b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482018181528451602484015284518593919283926044019190850190808383600083156135d55781810151838201526020016135bd565b803573ffffffffffffffffffffffffffffffffffffffff8116811461098357600080fd5b600082601f830112613dd5578081fd5b8135613de8613de38261490a565b6148e6565b818152915060208083019084810181840286018201871015613e0957600080fd5b60005b84811015613e2f57613e1d82613da1565b84529282019290820190600101613e0c565b505050505092915050565b600082601f830112613e4a578081fd5b8135613e58613de38261490a565b818152915060208083019084810181840286018201871015613e7957600080fd5b60005b84811015613e2f57813584529282019290820190600101613e7c565b600082601f830112613ea8578081fd5b8135613eb6613de382614928565b9150808252836020828501011115613ecd57600080fd5b8060208401602084013760009082016020015292915050565b600060208284031215613ef7578081fd5b611b6782613da1565b600080600060408486031215613f14578182fd5b833567ffffffffffffffff80821115613f2b578384fd5b818601915086601f830112613f3e578384fd5b813581811115613f4c578485fd5b8760208083028501011115613f5f578485fd5b6020928301989097509590910135949350505050565b60008060408385031215613f87578182fd5b823567ffffffffffffffff811115613f9d578283fd5b613fa985828601613dc5565b925050613fb860208401613da1565b90509250929050565b600080600060608486031215613fd5578283fd5b833567ffffffffffffffff80821115613fec578485fd5b613ff887838801613dc5565b9450602086013591508082111561400d578384fd5b5061401a86828701613e3a565b92505061402960408501613da1565b90509250925092565b600060208284031215614043578081fd5b5035919050565b6000806040838503121561405c578182fd5b82359150613fb860208401613da1565b6000806040838503121561407e578182fd5b50508035926020909101359150565b60006020828403121561409e578081fd5b815167ffffffffffffffff8111156140b4578182fd5b8201601f810184136140c4578182fd5b80516140d2613de382614928565b8181528560208385010111156140e6578384fd5b6140f7826020830160208601614968565b95945050505050565b60008060408385031215614112578182fd5b823567ffffffffffffffff80821115614129578384fd5b61413586838701613e98565b9350602085013591508082111561414a578283fd5b5061415785828601613e3a565b9150509250929050565b60008060008060008060c08789031215614179578182fd5b863567ffffffffffffffff80821115614190578384fd5b61419c8a838b01613e98565b975060208901359150808211156141b1578384fd5b6141bd8a838b01613e3a565b965060408901359150808211156141d2578384fd5b6141de8a838b01613e98565b955060608901359150808211156141f3578384fd5b5061420089828a01613e3a565b9350506080870135915060a087013590509295509295509295565b600080600080600080600060e0888a031215614235578081fd5b873567ffffffffffffffff8082111561424c578283fd5b6142588b838c01613e98565b985060208a013591508082111561426d578283fd5b6142798b838c01613e3a565b975060408a013591508082111561428e578283fd5b61429a8b838c01613e98565b965060608a01359150808211156142af578283fd5b506142bc8a828b01613e3a565b979a969950949760808101359660a0820135965060c090910135945092505050565b600080600080600080600080610100898b0312156142fa578182fd5b883567ffffffffffffffff80821115614311578384fd5b61431d8c838d01613e98565b995060208b0135915080821115614332578384fd5b61433e8c838d01613e3a565b985060408b0135915080821115614353578384fd5b61435f8c838d01613e98565b975060608b0135915080821115614374578384fd5b506143818b828c01613e3a565b989b979a50959860808101359760a0820135975060c0820135965060e090910135945092505050565b600080604083850312156143bc578182fd5b823567ffffffffffffffff8111156143d2578283fd5b6143de85828601613e98565b95602094909401359450505050565b600080600060608486031215614401578081fd5b833567ffffffffffffffff811115614417578182fd5b61442386828701613e98565b9660208601359650604090950135949350505050565b6000806000806080858703121561444e578182fd5b843567ffffffffffffffff811115614464578283fd5b61447087828801613e98565b97602087013597506040870135966060013595509350505050565b60006020828403121561449c578081fd5b5051919050565b90565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b901515815260200190565b90815260200190565b600060408252835180604084015260206145228260608601838901614968565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011684019150606082016060858403018286015280865180835260808501915083880194508592505b8083101561458f578451825293830193600192909201919083019061456f565b50979650505050505050565b60208082526024908201527f43616c6c6572206d75737420686176652057484954454c49535445445f4c502060408201527f726f6c6500000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f43616c6c6572206d7573742068617665204d414e4147455f4c5020726f6c6500604082015260600190565b6020808252600f908201527f6e6f742073616d65206c656e6774680000000000000000000000000000000000604082015260600190565b6020808252601c908201527f616d6f756e742065786365656473206d6178206c697175696469747900000000604082015260600190565b60208082526018908201527f496e63726561736520746f6b656e20616c6c6f77616e63650000000000000000604082015260600190565b6020808252601e908201527f43616c6c6572206d757374206861766520574954484452415720726f6c650000604082015260600190565b60208082526016908201527f436f756c64206e6f742077697468647261772045544800000000000000000000604082015260600190565b60208082526023908201527f616d6f756e74206578636565647320776974686472617761626c652062616c6160408201527f6e63650000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526018908201527f436f6e74726163742062616c616e636520746f6f206c6f770000000000000000604082015260600190565b6020808252601e908201527f43616c6c6572206d757374206861766520415050524f56455220726f6c650000604082015260600190565b6020808252601e908201527f616d6f756e74206578636565647320746f74616c206c69717569646974790000604082015260600190565b60208082526021908201527f616d6f756e742065786365656473206c69717569646974792070726f7669646560408201527f6400000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f616d6f756e74206578636565647320636f6e74726163742062616c616e636500604082015260600190565b60ff91909116815260200190565b60405181810167ffffffffffffffff8111828210171561490257fe5b604052919050565b600067ffffffffffffffff82111561491e57fe5b5060209081020190565b600067ffffffffffffffff82111561493c57fe5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b8381101561498357818101518382015260200161496b565b8381111561096a575050600091015256fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b655361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a26469706673582212207b2a13afcb5cad6b092d90cc3716670e76ec934c39952e1de79461ab0fa76f5e64736f6c63430007040033ea728681f55b7658af02b019305006d1b2faefced46ff12facedd896da3c3dc6a381348eb3fe7f232f3078689dd9188d0bc370b23350159f64231117527caec7456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a2646970667358221220eba20f553d1a9b6a09e0ce909702ce228cb96629166f9d993000df51ea098c9164736f6c63430007040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_dispatcherAdmin": "admin that can create new Dispatchers",
          "_roleAdmin": "admin in control of roles"
        }
      },
      "createNewDispatcher(address,address,address,address,address,address,uint256,address[])": {
        "params": {
          "approver": "Address allowed to make approvals on contract",
          "initialMaxLiquidity": "Initial max liquidity allowed in contract",
          "lpManager": "Address allowed to manage LP whitelist",
          "lpWhitelist": "list of addresses that are allowed to provide liquidity to this contract",
          "queryEngine": "Address of query engine contract",
          "roleManager": "Address allowed to manage contract roles",
          "trader": "Address allowed to make trades via this contract",
          "withdrawer": "Address allowed to withdraw profit from contract"
        },
        "returns": {
          "dispatcher": "Address of new Dispatcher contract"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "DispatcherCreated(address,uint8,address,address,address,address,address,address,uint256,bool)": {
        "notice": "Create new Dispatcher event"
      }
    },
    "kind": "user",
    "methods": {
      "DISPATCHER_ADMIN_ROLE()": {
        "notice": "Admin role to create new Dispatchers"
      },
      "constructor": {
        "notice": "Initializes contract, setting admin"
      },
      "createNewDispatcher(address,address,address,address,address,address,uint256,address[])": {
        "notice": "Create new Dispatcher contract"
      },
      "version()": {
        "notice": "Version number of Dispatcher Factory"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1332,
        "contract": "contracts/DispatcherFactory.sol:DispatcherFactory",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)1328_storage)"
      },
      {
        "astId": 787,
        "contract": "contracts/DispatcherFactory.sol:DispatcherFactory",
        "label": "version",
        "offset": 0,
        "slot": "1",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)1328_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)1328_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2618_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2617,
            "contract": "contracts/DispatcherFactory.sol:DispatcherFactory",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2353_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)1328_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 1325,
            "contract": "contracts/DispatcherFactory.sol:DispatcherFactory",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)2618_storage"
          },
          {
            "astId": 1327,
            "contract": "contracts/DispatcherFactory.sol:DispatcherFactory",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)2353_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2348,
            "contract": "contracts/DispatcherFactory.sol:DispatcherFactory",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2352,
            "contract": "contracts/DispatcherFactory.sol:DispatcherFactory",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}