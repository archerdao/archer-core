{
  "address": "0x506348C6c3ef88167A198Bd968Fbb3A4925e587a",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldCollector",
          "type": "address"
        }
      ],
      "name": "FeeCollectorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "newFee",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "oldFee",
          "type": "uint32"
        }
      ],
      "name": "FeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "miner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newSplitTo",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldSplitTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newSplit",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "oldSplit",
          "type": "uint32"
        }
      ],
      "name": "MinerSplitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_SETTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINER_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TIP_JAR_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_resultMatch",
          "type": "bytes32"
        }
      ],
      "name": "check32BytesAndSend",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_targets",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_payloads",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_resultMatches",
          "type": "bytes32[]"
        }
      ],
      "name": "check32BytesAndSendMulti",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_resultMatch",
          "type": "bytes32"
        }
      ],
      "name": "check32BytesAndTip",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_targets",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_payloads",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_resultMatches",
          "type": "bytes32[]"
        }
      ],
      "name": "check32BytesAndTipMulti",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_resultMatch",
          "type": "bytes"
        }
      ],
      "name": "checkBytesAndSend",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_targets",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_payloads",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_resultMatches",
          "type": "bytes[]"
        }
      ],
      "name": "checkBytesAndSendMulti",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_resultMatch",
          "type": "bytes"
        }
      ],
      "name": "checkBytesAndTip",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_targets",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_payloads",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_resultMatches",
          "type": "bytes[]"
        }
      ],
      "name": "checkBytesAndTipMulti",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roleAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tipJarAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_minerManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeSetter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_networkFeeCollector",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_networkFee",
          "type": "uint32"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minerSplits",
      "outputs": [
        {
          "internalType": "address",
          "name": "splitTo",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "splitPct",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "networkFee",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "networkFeeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "newFee",
          "type": "uint32"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newCollector",
          "type": "address"
        }
      ],
      "name": "setFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tip",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "splitTo",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "splitPct",
          "type": "uint32"
        }
      ],
      "name": "updateMinerSplit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xafdbcfa8d64be3ee571acc661a83abe8f6a4f28cd1af560e24ad127eb76972db",
  "receipt": {
    "to": null,
    "from": "0x4F8f512Dab59F227EA70B1D8A0044aFa95CC80C3",
    "contractAddress": "0x506348C6c3ef88167A198Bd968Fbb3A4925e587a",
    "transactionIndex": 16,
    "gasUsed": "1563946",
    "logsBloom": "0x
    "blockHash": "0x2fd7e0754547a5d52f2ab576278827912d909b50085eb57358f486df3acedfe1",
    "transactionHash": "0xafdbcfa8d64be3ee571acc661a83abe8f6a4f28cd1af560e24ad127eb76972db",
    "logs": [],
    "blockNumber": 8363678,
    "cumulativeGasUsed": "5031052",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "5910f9ef356ad6e6f95330e0f13bc748",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"newFee\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"oldFee\",\"type\":\"uint32\"}],\"name\":\"FeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSplitTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldSplitTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newSplit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"oldSplit\",\"type\":\"uint32\"}],\"name\":\"MinerSplitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_SETTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINER_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIP_JAR_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_resultMatch\",\"type\":\"bytes32\"}],\"name\":\"check32BytesAndSend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_payloads\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_resultMatches\",\"type\":\"bytes32[]\"}],\"name\":\"check32BytesAndSendMulti\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_resultMatch\",\"type\":\"bytes32\"}],\"name\":\"check32BytesAndTip\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_payloads\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_resultMatches\",\"type\":\"bytes32[]\"}],\"name\":\"check32BytesAndTipMulti\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_resultMatch\",\"type\":\"bytes\"}],\"name\":\"checkBytesAndSend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_payloads\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_resultMatches\",\"type\":\"bytes[]\"}],\"name\":\"checkBytesAndSendMulti\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_resultMatch\",\"type\":\"bytes\"}],\"name\":\"checkBytesAndTip\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_payloads\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_resultMatches\",\"type\":\"bytes[]\"}],\"name\":\"checkBytesAndTipMulti\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roleAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tipJarAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minerManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeSetter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_networkFeeCollector\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_networkFee\",\"type\":\"uint32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minerSplits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"splitTo\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"splitPct\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"networkFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"networkFeeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newFee\",\"type\":\"uint32\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCollector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tip\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"splitTo\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"splitPct\",\"type\":\"uint32\"}],\"name\":\"updateMinerSplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Allows suppliers to create a tip that gets distributed to miners + the network\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,address,address,address,uint32)\":{\"params\":{\"_feeSetter\":\"fee setter address\",\"_minerManager\":\"miner manager address\",\"_networkFee\":\"% of fee collected by the network\",\"_networkFeeCollector\":\"address that collects network fees\",\"_roleAdmin\":\"admin in control of roles\",\"_tipJarAdmin\":\"admin of tip pool\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setFee(uint32)\":{\"params\":{\"newFee\":\"new fee\"}},\"setFeeCollector(address)\":{\"params\":{\"newCollector\":\"new fee collector address\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updateMinerSplit(address,address,uint32)\":{\"params\":{\"minerAddress\":\"Address of miner\",\"splitPct\":\"% of tip that splitTo receives\",\"splitTo\":\"Address that receives split\"}}},\"title\":\"TipJar\",\"version\":1},\"userdoc\":{\"events\":{\"FeeCollectorSet(address,address)\":{\"notice\":\"Fee collector set event\"},\"FeeSet(uint32,uint32)\":{\"notice\":\"Fee set event\"},\"MinerSplitUpdated(address,address,address,uint32,uint32)\":{\"notice\":\"Miner split updated event\"}},\"kind\":\"user\",\"methods\":{\"FEE_SETTER_ROLE()\":{\"notice\":\"Fee setter role\"},\"MINER_MANAGER_ROLE()\":{\"notice\":\"Miner manager role\"},\"TIP_JAR_ADMIN_ROLE()\":{\"notice\":\"TipJar Admin role\"},\"initialize(address,address,address,address,address,uint32)\":{\"notice\":\"Initializes contract, setting admin roles + network fee\"},\"minerSplits(address)\":{\"notice\":\"Miner split mapping\"},\"networkFee()\":{\"notice\":\"Network fee (measured in bips: 10,000 bips = 1% of contract balance)\"},\"networkFeeCollector()\":{\"notice\":\"Network fee output address\"},\"setFee(uint32)\":{\"notice\":\"Admin function to set network fee\"},\"setFeeCollector(address)\":{\"notice\":\"Admin function to set fee collector address\"},\"tip()\":{\"notice\":\"Distributes any ETH in contract to relevant parties\"},\"updateMinerSplit(address,address,uint32)\":{\"notice\":\"Update split % and split to address for given miner\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TipJar.sol\":\"TipJar\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/TipJar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/*\\n  Copyright 2021 Archer DAO: Chris Piatt (chris@archerdao.io).\\n*/\\n\\nimport \\\"./lib/0.8/AccessControlUpgradeable.sol\\\";\\nimport \\\"./lib/0.8/CheckAndSend.sol\\\";\\n\\n/**\\n * @title TipJar\\n * @dev Allows suppliers to create a tip that gets distributed to miners + the network\\n */\\ncontract TipJar is AccessControlUpgradeable, CheckAndSend {\\n\\n    /// @notice TipJar Admin role\\n    bytes32 public constant TIP_JAR_ADMIN_ROLE = keccak256(\\\"TIP_JAR_ADMIN_ROLE\\\");\\n\\n    /// @notice Miner manager role\\n    bytes32 public constant MINER_MANAGER_ROLE = keccak256(\\\"MINER_MANAGER_ROLE\\\");\\n\\n    /// @notice Fee setter role\\n    bytes32 public constant FEE_SETTER_ROLE = keccak256(\\\"FEE_SETTER_ROLE\\\");\\n\\n    /// @notice Network fee (measured in bips: 10,000 bips = 1% of contract balance)\\n    uint32 public networkFee;\\n\\n    /// @notice Network fee output address\\n    address public networkFeeCollector;\\n\\n    /// @notice Miner split\\n    struct Split {\\n        address splitTo;\\n        uint32 splitPct;\\n    }\\n\\n    /// @notice Miner split mapping\\n    mapping (address => Split) public minerSplits;\\n\\n    /// @notice Fee set event\\n    event FeeSet(uint32 indexed newFee, uint32 indexed oldFee);\\n\\n    /// @notice Fee collector set event\\n    event FeeCollectorSet(address indexed newCollector, address indexed oldCollector);\\n\\n    /// @notice Miner split updated event\\n    event MinerSplitUpdated(address indexed miner, address indexed newSplitTo, address indexed oldSplitTo, uint32 newSplit, uint32 oldSplit);\\n\\n    /// @notice modifier to restrict functions to admins\\n    modifier onlyAdmin() {\\n        require(hasRole(TIP_JAR_ADMIN_ROLE, msg.sender), \\\"Caller must have TIP_JAR_ADMIN_ROLE role\\\");\\n        _;\\n    }\\n\\n    /// @notice modifier to restrict functions to miner managers\\n    modifier onlyMinerManager(address miner) {\\n        require(msg.sender == miner || hasRole(MINER_MANAGER_ROLE, msg.sender), \\\"Caller must have MINER_MANAGER_ROLE role\\\");\\n        _;\\n    }\\n\\n    /// @notice modifier to restrict functions to fee setters\\n    modifier onlyFeeSetter() {\\n        require(hasRole(FEE_SETTER_ROLE, msg.sender), \\\"Caller must have FEE_SETTER_ROLE role\\\");\\n        _;\\n    }\\n\\n    /// @notice Initializes contract, setting admin roles + network fee\\n    /// @param _roleAdmin admin in control of roles\\n    /// @param _tipJarAdmin admin of tip pool\\n    /// @param _minerManager miner manager address\\n    /// @param _feeSetter fee setter address\\n    /// @param _networkFeeCollector address that collects network fees\\n    /// @param _networkFee % of fee collected by the network\\n    function initialize(\\n        address _roleAdmin,\\n        address _tipJarAdmin,\\n        address _minerManager,\\n        address _feeSetter,\\n        address _networkFeeCollector,\\n        uint32 _networkFee\\n    ) public initializer {\\n        _setupRole(TIP_JAR_ADMIN_ROLE, _tipJarAdmin);\\n        _setupRole(MINER_MANAGER_ROLE, _minerManager);\\n        _setupRole(FEE_SETTER_ROLE, _feeSetter);\\n        _setupRole(DEFAULT_ADMIN_ROLE, _roleAdmin);\\n        networkFeeCollector = _networkFeeCollector;\\n        emit FeeCollectorSet(_networkFeeCollector, address(0));\\n        networkFee = _networkFee;\\n        emit FeeSet(_networkFee, 0);\\n    }\\n\\n    /// @notice Receive function to allow contract to accept ETH\\n    receive() external payable {}\\n\\n    /// @notice Fallback function to allow contract to accept ETH\\n    fallback() external payable {}\\n\\n    function check32BytesAndSend(\\n        address _target,\\n        bytes calldata _payload,\\n        bytes32 _resultMatch\\n    ) external payable {\\n        _check32Bytes(_target, _payload, _resultMatch);\\n    }\\n\\n    function check32BytesAndTip(\\n        address _target,\\n        bytes calldata _payload,\\n        bytes32 _resultMatch\\n    ) external payable {\\n        _check32Bytes(_target, _payload, _resultMatch);\\n        tip();\\n    }\\n\\n    function check32BytesAndSendMulti(\\n        address[] calldata _targets,\\n        bytes[] calldata _payloads,\\n        bytes32[] calldata _resultMatches\\n    ) external payable {\\n        _check32BytesMulti(_targets, _payloads, _resultMatches);\\n    }\\n\\n    function check32BytesAndTipMulti(\\n        address[] calldata _targets,\\n        bytes[] calldata _payloads,\\n        bytes32[] calldata _resultMatches\\n    ) external payable {\\n        _check32BytesMulti(_targets, _payloads, _resultMatches);\\n        tip();\\n    }\\n\\n    function checkBytesAndSend(\\n        address _target,\\n        bytes calldata _payload,\\n        bytes calldata _resultMatch\\n    ) external payable {\\n        _checkBytes(_target, _payload, _resultMatch);\\n    }\\n\\n    function checkBytesAndTip(\\n        address _target,\\n        bytes calldata _payload,\\n        bytes calldata _resultMatch\\n    ) external payable {\\n        _checkBytes(_target, _payload, _resultMatch);\\n        tip();\\n    }\\n\\n    function checkBytesAndSendMulti(\\n        address[] calldata _targets,\\n        bytes[] calldata _payloads,\\n        bytes[] calldata _resultMatches\\n    ) external payable {\\n        _checkBytesMulti(_targets, _payloads, _resultMatches);\\n    }\\n\\n    function checkBytesAndTipMulti(\\n        address[] calldata _targets,\\n        bytes[] calldata _payloads,\\n        bytes[] calldata _resultMatches\\n    ) external payable {\\n        _checkBytesMulti(_targets, _payloads, _resultMatches);\\n        tip();\\n    }\\n\\n    /**\\n     * @notice Distributes any ETH in contract to relevant parties\\n     */\\n    function tip() public payable {\\n        if (networkFee > 0) {\\n            uint256 fee = (address(this).balance * networkFee) / 1000000;\\n            (bool feeSuccess, ) = networkFeeCollector.call{value: fee}(\\\"\\\");\\n            require(feeSuccess, \\\"Could not collect fee\\\");\\n        }\\n\\n        if(minerSplits[block.coinbase].splitPct > 0) {\\n            uint256 split = (address(this).balance * minerSplits[block.coinbase].splitPct) / 1000000;\\n            (bool splitSuccess, ) = minerSplits[block.coinbase].splitTo.call{value: split}(\\\"\\\");\\n            require(splitSuccess, \\\"Could not split\\\");\\n        }\\n\\n        if (address(this).balance > 0) {\\n            (bool success, ) = block.coinbase.call{value: address(this).balance}(\\\"\\\");\\n            require(success, \\\"Could not collect ETH\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Admin function to set network fee\\n     * @param newFee new fee\\n     */\\n    function setFee(uint32 newFee) external onlyFeeSetter {\\n        emit FeeSet(newFee, networkFee);\\n        networkFee = newFee;\\n    }\\n\\n    /**\\n     * @notice Admin function to set fee collector address\\n     * @param newCollector new fee collector address\\n     */\\n    function setFeeCollector(address newCollector) external onlyAdmin {\\n        emit FeeCollectorSet(newCollector, networkFeeCollector);\\n        networkFeeCollector = newCollector;\\n    }\\n\\n    /**\\n     * @notice Update split % and split to address for given miner\\n     * @param minerAddress Address of miner\\n     * @param splitTo Address that receives split\\n     * @param splitPct % of tip that splitTo receives\\n     */\\n    function updateMinerSplit(\\n        address minerAddress, \\n        address splitTo, \\n        uint32 splitPct\\n    ) external onlyMinerManager(minerAddress) {\\n        Split memory oldSplit = minerSplits[minerAddress];\\n        address oldSplitTo = oldSplit.splitTo;\\n        uint32 oldSplitPct = oldSplit.splitPct;\\n        minerSplits[minerAddress] = Split({\\n            splitTo: splitTo,\\n            splitPct: splitPct\\n        });\\n        emit MinerSplitUpdated(minerAddress, splitTo, oldSplitTo, splitPct, oldSplitPct);\\n    }\\n}\",\"keccak256\":\"0xe4f1bdb77ff87b6e545e32cbcee267de2c1735b0aecb346869f08a740438e902\",\"license\":\"MIT\"},\"contracts/interfaces/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"contracts/lib/0.8/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ContextUpgradeable.sol\\\";\\nimport \\\"./ERC165Upgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        require(hasRole(getRoleAdmin(role), _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        require(hasRole(getRoleAdmin(role), _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\",\"keccak256\":\"0x45a2fadbbc103989f788f157d6e81b992496be8bd45d6b8808423c8dee07a36a\",\"license\":\"MIT\"},\"contracts/lib/0.8/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0xbf8dc250aa07ec2837ce70f902e3964a22b749a26160e39865f85f659dc48b66\",\"license\":\"MIT\"},\"contracts/lib/0.8/CheckAndSend.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/*\\n  Copyright 2021 Flashbots: Scott Bigelow (scott@flashbots.net).\\n*/\\n\\ncontract CheckAndSend {\\n    function _check32BytesMulti(\\n        address[] calldata _targets,\\n        bytes[] calldata _payloads,\\n        bytes32[] calldata _resultMatches\\n    ) internal view {\\n        require(_targets.length == _payloads.length);\\n        require(_targets.length == _resultMatches.length);\\n        for (uint256 i = 0; i < _targets.length; i++) {\\n            _check32Bytes(_targets[i], _payloads[i], _resultMatches[i]);\\n        }\\n    }\\n\\n    function _checkBytesMulti(\\n        address[] calldata _targets,\\n        bytes[] calldata _payloads,\\n        bytes[] calldata _resultMatches\\n    ) internal view {\\n        require(_targets.length == _payloads.length);\\n        require(_targets.length == _resultMatches.length);\\n        for (uint256 i = 0; i < _targets.length; i++) {\\n            _checkBytes(_targets[i], _payloads[i], _resultMatches[i]);\\n        }\\n    }\\n\\n    function _check32Bytes(\\n        address _target,\\n        bytes memory _payload,\\n        bytes32 _resultMatch\\n    ) internal view {\\n        (bool _success, bytes memory _response) = _target.staticcall(_payload);\\n        require(_success, \\\"!success\\\");\\n        require(_response.length >= 32, \\\"response less than 32 bytes\\\");\\n        bytes32 _responseScalar;\\n        assembly {\\n            _responseScalar := mload(add(_response, 0x20))\\n        }\\n        require(_responseScalar == _resultMatch, \\\"response mismatch\\\");\\n    }\\n\\n    function _checkBytes(\\n        address _target,\\n        bytes memory _payload,\\n        bytes memory _resultMatch\\n    ) internal view {\\n        (bool _success, bytes memory _response) = _target.staticcall(_payload);\\n        require(_success, \\\"!success\\\");\\n        require(\\n            keccak256(_resultMatch) == keccak256(_response),\\n            \\\"response bytes mismatch\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x97344f2424a0bebfdc0ade0a75412ce5fc2f69c6939b9397bc1865641f02690b\",\"license\":\"MIT\"},\"contracts/lib/0.8/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"./Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x3d094287dec2bd3a7edf6cdd5d18d158d52e9533ee38e36b2780934039ca166e\",\"license\":\"MIT\"},\"contracts/lib/0.8/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC165Upgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\",\"keccak256\":\"0x7c66730476b5210b665d09d6ccd73a78df168aca0148d29200bb93d3154c9489\",\"license\":\"MIT\"},\"contracts/lib/0.8/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\",\"keccak256\":\"0xc445e701fc984ebd4faf7aa82e40cd0068f5893a31c1557ca86c74fec69f1e8e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101855760003560e01c80638c5178cf116100d1578063a42dce801161008a578063d547741f11610064578063d547741f14610471578063e934768314610491578063f856e7c8146104c5578063ff17f980146104f95761018c565b8063a42dce80146103d5578063bb642e85146103f5578063ce8fac801461045e5761018c565b80638c5178cf1461031b5780638d9163401461033b57806391d148541461035b5780639af96d7e1461037b5780639db9e18b1461038e578063a217fddf146103c05761018c565b80632f2ff15d1161013e57806337a04af41161011857806337a04af4146102a257806348ca0a30146102b55780634b281588146102c857806386b738be146103085761018c565b80632f2ff15d1461024f57806336568abe1461026f5780633676290c1461028f5761018c565b806301ffc9a71461018e57806311473eba146101c35780631ab971ab146101d657806324835805146101f6578063248a9ca3146102095780632755cd2d146102475761018c565b3661018c57005b005b34801561019a57600080fd5b506101ae6101a93660046119ef565b61052d565b60405190151581526020015b60405180910390f35b61018c6101d1366004611916565b610566565b3480156101e257600080fd5b5061018c6101f1366004611a17565b610584565b61018c610204366004611898565b610661565b34801561021557600080fd5b506102396102243660046119ac565b60009081526065602052604090206001015490565b6040519081526020016101ba565b61018c6106dc565b34801561025b57600080fd5b5061018c61026a3660046119c4565b610954565b34801561027b57600080fd5b5061018c61028a3660046119c4565b6109e3565b61018c61029d366004611916565b610a5d565b61018c6102b0366004611916565b610a6b565b61018c6102c3366004611898565b610a79565b3480156102d457600080fd5b506097546102f09064010000000090046001600160a01b031681565b6040516001600160a01b0390911681526020016101ba565b61018c610316366004611840565b610af5565b34801561032757600080fd5b5061018c61033636600461178b565b610b3d565b34801561034757600080fd5b5061018c6103563660046117fe565b610d1b565b34801561036757600080fd5b506101ae6103763660046119c4565b610f62565b61018c610389366004611916565b610f8d565b34801561039a57600080fd5b506097546103ab9063ffffffff1681565b60405163ffffffff90911681526020016101ba565b3480156103cc57600080fd5b50610239600081565b3480156103e157600080fd5b5061018c6103f036600461176a565b610f9b565b34801561040157600080fd5b5061043a61041036600461176a565b6098602052600090815260409020546001600160a01b03811690600160a01b900463ffffffff1682565b604080516001600160a01b03909316835263ffffffff9091166020830152016101ba565b61018c61046c366004611840565b611093565b34801561047d57600080fd5b5061018c61048c3660046119c4565b6110dd565b34801561049d57600080fd5b506102397fe6ad9a47fbda1dc18de1eb5eeb7d935e5e81b4748f3cfc61e233e64f8818206081565b3480156104d157600080fd5b506102397f0938034daff16723b6cfe3b3b828d3aed52d6e6c5275df2d0555a160aabd204681565b34801561050557600080fd5b506102397f608b4546ea66564f3d11a848267e730be96d609ea9d5fcb439501f0f9ac347f181565b60006001600160e01b03198216637965db0b60e01b148061055e57506301ffc9a760e01b6001600160e01b03198316145b90505b919050565b61057486868686868661115d565b61057c6106dc565b505050505050565b6105ae7fe6ad9a47fbda1dc18de1eb5eeb7d935e5e81b4748f3cfc61e233e64f8818206033610f62565b61060d5760405162461bcd60e51b815260206004820152602560248201527f43616c6c6572206d7573742068617665204645455f5345545445525f524f4c4560448201526420726f6c6560d81b60648201526084015b60405180910390fd5b60975460405163ffffffff918216918316907fa8d5cd5754f57c9e07e1a75b048989e56418a7c706f6e4007daab8a6e1d7d6cc90600090a36097805463ffffffff191663ffffffff92909216919091179055565b6106d58585858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8901819004810282018101909252878152925087915086908190840183828082843760009201919091525061129f92505050565b5050505050565b60975463ffffffff16156107b957609754600090620f4240906107059063ffffffff1647611acf565b61070f9190611aaf565b6097546040519192506000916401000000009091046001600160a01b03169083908381818185875af1925050503d8060008114610768576040519150601f19603f3d011682016040523d82523d6000602084013e61076d565b606091505b50509050806107b65760405162461bcd60e51b8152602060048201526015602482015274436f756c64206e6f7420636f6c6c6563742066656560581b6044820152606401610604565b50505b41600090815260986020526040902054600160a01b900463ffffffff16156108ba5741600090815260986020526040812054620f42409061080790600160a01b900463ffffffff1647611acf565b6108119190611aaf565b4160009081526098602052604080822054905192935090916001600160a01b039091169083908381818185875af1925050503d806000811461086f576040519150601f19603f3d011682016040523d82523d6000602084013e610874565b606091505b50509050806108b75760405162461bcd60e51b815260206004820152600f60248201526e10dbdd5b19081b9bdd081cdc1b1a5d608a1b6044820152606401610604565b50505b471561095257604051600090419047908381818185875af1925050503d8060008114610902576040519150601f19603f3d011682016040523d82523d6000602084013e610907565b606091505b50509050806109505760405162461bcd60e51b8152602060048201526015602482015274086deead8c840dcdee840c6ded8d8cac6e8408aa89605b1b6044820152606401610604565b505b565b600082815260656020526040902060010154610971905b33610376565b6109d55760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60448201526e0818591b5a5b881d1bc819dc985b9d608a1b6064820152608401610604565b6109df8282611394565b5050565b6001600160a01b0381163314610a535760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610604565b6109df828261141a565b61057c86868686868661115d565b610574868686868686611481565b610aed8585858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8901819004810282018101909252878152925087915086908190840183828082843760009201919091525061129f92505050565b6106d56106dc565b610b378484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250869250611583915050565b50505050565b600054610100900460ff1680610b56575060005460ff16155b610bb95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610604565b600054610100900460ff16158015610bdb576000805461ffff19166101011790555b610c057f0938034daff16723b6cfe3b3b828d3aed52d6e6c5275df2d0555a160aabd2046876109d5565b610c2f7f608b4546ea66564f3d11a848267e730be96d609ea9d5fcb439501f0f9ac347f1866109d5565b610c597fe6ad9a47fbda1dc18de1eb5eeb7d935e5e81b4748f3cfc61e233e64f88182060856109d5565b610c646000886109d5565b60978054640100000000600160c01b0319166401000000006001600160a01b03861690810291909117909155604051600091907f089588e3f10370c99a6f74177eacb5361ba90e1b70a123bfeccb6619c21cd721908390a36097805463ffffffff191663ffffffff8416908117909155604051600091907fa8d5cd5754f57c9e07e1a75b048989e56418a7c706f6e4007daab8a6e1d7d6cc908390a38015610d12576000805461ff00191690555b50505050505050565b82336001600160a01b0382161480610d585750610d587f608b4546ea66564f3d11a848267e730be96d609ea9d5fcb439501f0f9ac347f133610f62565b610db55760405162461bcd60e51b815260206004820152602860248201527f43616c6c6572206d7573742068617665204d494e45525f4d414e414745525f526044820152674f4c4520726f6c6560c01b6064820152608401610604565b600060986000866001600160a01b03166001600160a01b031681526020019081526020016000206040518060400160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff168152505090506000816000015190506000826020015190506040518060400160405280876001600160a01b031681526020018663ffffffff1681525060986000896001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548163ffffffff021916908363ffffffff160217905550905050816001600160a01b0316866001600160a01b0316886001600160a01b03167fc659a685e66f552150d79438e7b594425a44c700923bbb3d32226b0a88ee1c528885604051610f5192919063ffffffff92831681529116602082015260400190565b60405180910390a450505050505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61057c868686868686611481565b610fc57f0938034daff16723b6cfe3b3b828d3aed52d6e6c5275df2d0555a160aabd204633610f62565b6110225760405162461bcd60e51b815260206004820152602860248201527f43616c6c6572206d7573742068617665205449505f4a41525f41444d494e5f526044820152674f4c4520726f6c6560c01b6064820152608401610604565b6097546040516001600160a01b036401000000009092048216918316907f089588e3f10370c99a6f74177eacb5361ba90e1b70a123bfeccb6619c21cd72190600090a3609780546001600160a01b0390921664010000000002640100000000600160c01b0319909216919091179055565b6110d58484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250869250611583915050565b610b376106dc565b6000828152606560205260409020600101546110f89061096b565b610a535760405162461bcd60e51b815260206004820152603060248201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60448201526f2061646d696e20746f207265766f6b6560801b6064820152608401610604565b84831461116957600080fd5b84811461117557600080fd5b60005b85811015610d125761128d8787838181106111a357634e487b7160e01b600052603260045260246000fd5b90506020020160208101906111b8919061176a565b8686848181106111d857634e487b7160e01b600052603260045260246000fd5b90506020028101906111ea9190611a6a565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525088925087915086905081811061124157634e487b7160e01b600052603260045260246000fd5b90506020028101906112539190611a6a565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061129f92505050565b8061129781611aee565b915050611178565b600080846001600160a01b0316846040516112ba9190611a31565b600060405180830381855afa9150503d80600081146112f5576040519150601f19603f3d011682016040523d82523d6000602084013e6112fa565b606091505b5091509150816113375760405162461bcd60e51b8152602060048201526008602482015267217375636365737360c01b6044820152606401610604565b80805190602001208380519060200120146106d55760405162461bcd60e51b815260206004820152601760248201527f726573706f6e7365206279746573206d69736d617463680000000000000000006044820152606401610604565b61139e8282610f62565b6109df5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556113d63390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6114248282610f62565b156109df5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b84831461148d57600080fd5b84811461149957600080fd5b60005b85811015610d12576115718787838181106114c757634e487b7160e01b600052603260045260246000fd5b90506020020160208101906114dc919061176a565b8686848181106114fc57634e487b7160e01b600052603260045260246000fd5b905060200281019061150e9190611a6a565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525088925087915086905081811061156557634e487b7160e01b600052603260045260246000fd5b90506020020135611583565b8061157b81611aee565b91505061149c565b600080846001600160a01b03168460405161159e9190611a31565b600060405180830381855afa9150503d80600081146115d9576040519150601f19603f3d011682016040523d82523d6000602084013e6115de565b606091505b50915091508161161b5760405162461bcd60e51b8152602060048201526008602482015267217375636365737360c01b6044820152606401610604565b60208151101561166d5760405162461bcd60e51b815260206004820152601b60248201527f726573706f6e7365206c657373207468616e20333220627974657300000000006044820152606401610604565b602081015183811461057c5760405162461bcd60e51b81526020600482015260116024820152700e4cae6e0dedce6ca40dad2e6dac2e8c6d607b1b6044820152606401610604565b80356001600160a01b038116811461056157600080fd5b60008083601f8401126116dd578182fd5b50813567ffffffffffffffff8111156116f4578182fd5b6020830191508360208260051b850101111561170f57600080fd5b9250929050565b60008083601f840112611727578182fd5b50813567ffffffffffffffff81111561173e578182fd5b60208301915083602082850101111561170f57600080fd5b803563ffffffff8116811461056157600080fd5b60006020828403121561177b578081fd5b611784826116b5565b9392505050565b60008060008060008060c087890312156117a3578182fd5b6117ac876116b5565b95506117ba602088016116b5565b94506117c8604088016116b5565b93506117d6606088016116b5565b92506117e4608088016116b5565b91506117f260a08801611756565b90509295509295509295565b600080600060608486031215611812578283fd5b61181b846116b5565b9250611829602085016116b5565b915061183760408501611756565b90509250925092565b60008060008060608587031215611855578384fd5b61185e856116b5565b9350602085013567ffffffffffffffff811115611879578384fd5b61188587828801611716565b9598909750949560400135949350505050565b6000806000806000606086880312156118af578081fd5b6118b8866116b5565b9450602086013567ffffffffffffffff808211156118d4578283fd5b6118e089838a01611716565b909650945060408801359150808211156118f8578283fd5b5061190588828901611716565b969995985093965092949392505050565b6000806000806000806060878903121561192e578182fd5b863567ffffffffffffffff80821115611945578384fd5b6119518a838b016116cc565b90985096506020890135915080821115611969578384fd5b6119758a838b016116cc565b9096509450604089013591508082111561198d578384fd5b5061199a89828a016116cc565b979a9699509497509295939492505050565b6000602082840312156119bd578081fd5b5035919050565b600080604083850312156119d6578182fd5b823591506119e6602084016116b5565b90509250929050565b600060208284031215611a00578081fd5b81356001600160e01b031981168114611784578182fd5b600060208284031215611a28578081fd5b61178482611756565b60008251815b81811015611a515760208186018101518583015201611a37565b81811115611a5f5782828501525b509190910192915050565b6000808335601e19843603018112611a80578283fd5b83018035915067ffffffffffffffff821115611a9a578283fd5b60200191503681900382131561170f57600080fd5b600082611aca57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611ae957611ae9611b09565b500290565b6000600019821415611b0257611b02611b09565b5060010190565b634e487b7160e01b600052601160045260246000fdfea264697066735822122009f0fb7f31016450352e651d8196aeacc6ed78049bfbd9ef8de24da15b963e6764736f6c63430008030033",
  "devdoc": {
    "details": "Allows suppliers to create a tip that gets distributed to miners + the network",
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,address,address,address,uint32)": {
        "params": {
          "_feeSetter": "fee setter address",
          "_minerManager": "miner manager address",
          "_networkFee": "% of fee collected by the network",
          "_networkFeeCollector": "address that collects network fees",
          "_roleAdmin": "admin in control of roles",
          "_tipJarAdmin": "admin of tip pool"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setFee(uint32)": {
        "params": {
          "newFee": "new fee"
        }
      },
      "setFeeCollector(address)": {
        "params": {
          "newCollector": "new fee collector address"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "updateMinerSplit(address,address,uint32)": {
        "params": {
          "minerAddress": "Address of miner",
          "splitPct": "% of tip that splitTo receives",
          "splitTo": "Address that receives split"
        }
      }
    },
    "title": "TipJar",
    "version": 1
  },
  "userdoc": {
    "events": {
      "FeeCollectorSet(address,address)": {
        "notice": "Fee collector set event"
      },
      "FeeSet(uint32,uint32)": {
        "notice": "Fee set event"
      },
      "MinerSplitUpdated(address,address,address,uint32,uint32)": {
        "notice": "Miner split updated event"
      }
    },
    "kind": "user",
    "methods": {
      "FEE_SETTER_ROLE()": {
        "notice": "Fee setter role"
      },
      "MINER_MANAGER_ROLE()": {
        "notice": "Miner manager role"
      },
      "TIP_JAR_ADMIN_ROLE()": {
        "notice": "TipJar Admin role"
      },
      "initialize(address,address,address,address,address,uint32)": {
        "notice": "Initializes contract, setting admin roles + network fee"
      },
      "minerSplits(address)": {
        "notice": "Miner split mapping"
      },
      "networkFee()": {
        "notice": "Network fee (measured in bips: 10,000 bips = 1% of contract balance)"
      },
      "networkFeeCollector()": {
        "notice": "Network fee output address"
      },
      "setFee(uint32)": {
        "notice": "Admin function to set network fee"
      },
      "setFeeCollector(address)": {
        "notice": "Admin function to set fee collector address"
      },
      "tip()": {
        "notice": "Distributes any ETH in contract to relevant parties"
      },
      "updateMinerSplit(address,address,uint32)": {
        "notice": "Update split % and split to address for given miner"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1429,
        "contract": "contracts/TipJar.sol:TipJar",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1432,
        "contract": "contracts/TipJar.sol:TipJar",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1375,
        "contract": "contracts/TipJar.sol:TipJar",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1421,
        "contract": "contracts/TipJar.sol:TipJar",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 633,
        "contract": "contracts/TipJar.sol:TipJar",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)628_storage)"
      },
      {
        "astId": 897,
        "contract": "contracts/TipJar.sol:TipJar",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 29,
        "contract": "contracts/TipJar.sol:TipJar",
        "label": "networkFee",
        "offset": 0,
        "slot": "151",
        "type": "t_uint32"
      },
      {
        "astId": 32,
        "contract": "contracts/TipJar.sol:TipJar",
        "label": "networkFeeCollector",
        "offset": 4,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 43,
        "contract": "contracts/TipJar.sol:TipJar",
        "label": "minerSplits",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_struct(Split)37_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Split)37_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TipJar.Split)",
        "numberOfBytes": "32",
        "value": "t_struct(Split)37_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)628_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)628_storage"
      },
      "t_struct(RoleData)628_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 625,
            "contract": "contracts/TipJar.sol:TipJar",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 627,
            "contract": "contracts/TipJar.sol:TipJar",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Split)37_storage": {
        "encoding": "inplace",
        "label": "struct TipJar.Split",
        "members": [
          {
            "astId": 34,
            "contract": "contracts/TipJar.sol:TipJar",
            "label": "splitTo",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 36,
            "contract": "contracts/TipJar.sol:TipJar",
            "label": "splitPct",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}